{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"CONTRIBUTING/","title":"Contributing a Guide","text":"<p>Want to help teach Gradio? Consider contributing a Guide! \ud83e\udd17</p> <p>Broadly speaking, there are two types of guides:</p> <ul> <li>Use cases: guides that cover step-by-step how to build a particular type of machine learning demo or app using Gradio. Here's an example: Creating a Chatbot</li> <li>Feature explanation: guides that describe in detail a particular feature of Gradio. Here's an example: Using Flagging</li> </ul> <p>We encourage you to submit either type of Guide! (Looking for ideas? We may also have open issues where users have asked for guides on particular topics)</p>"},{"location":"CONTRIBUTING/#guide-structure","title":"Guide Structure","text":"<p>As you can see with the previous examples, Guides are standard markdown documents. They usually:</p> <ul> <li>start with an Introduction section describing the topic</li> <li>include subheadings to make articles easy to navigate</li> <li>include real code snippets that make it easy to follow along and implement the Guide</li> <li>include embedded Gradio demos to make them more interactive and provide immediate demonstrations of the topic being discussed. These Gradio demos are hosted on Hugging Face Spaces and are embedded using the standard \\&lt;iframe&gt; tag.</li> </ul>"},{"location":"CONTRIBUTING/#how-to-contribute-a-guide","title":"How to Contribute a Guide","text":"<ol> <li>Clone or fork this <code>gradio</code> repo</li> <li>Add a new markdown document with a descriptive title to the <code>/guides</code> folder</li> <li>Write your Guide in standard markdown! Embed Gradio demos wherever helpful</li> <li>Add a list of <code>related_spaces</code> at the top of the markdown document (see the previously linked Guides for how to do this)</li> <li>Add 3 <code>tags</code> at the top of the markdown document to help users find your guide (again, see the previously linked Guides for how to do this)</li> <li>Open a PR to have your guide reviewed</li> </ol> <p>That's it! We're looking forward to reading your Guide \ud83e\udd73</p>"},{"location":"01_getting-started/01_quickstart/","title":"Quickstart","text":"<p>Prerequisite: Gradio requires Python 3.8 or higher, that's all!</p>"},{"location":"01_getting-started/01_quickstart/#what-does-gradio-do","title":"What Does Gradio Do?","text":"<p>One of the best ways to share your machine learning model, API, or data science workflow with others is to create an interactive app that allows your users or colleagues to try out the demo in their browsers.</p> <p>Gradio allows you to build demos and share them, all in Python. And usually in just a few lines of code! So let's get started.</p>"},{"location":"01_getting-started/01_quickstart/#hello-world","title":"Hello, World","text":"<p>To get Gradio running with a simple \"Hello, World\" example, follow these three steps:</p> <p>1. Install Gradio using pip:</p> <pre><code>pip install gradio\n</code></pre> <p>2. Run the code below as a Python script or in a Jupyter Notebook (or Google Colab):</p> <p>$code_hello_world</p> <p>We shorten the imported name to <code>gr</code> for better readability of code using Gradio. This is a widely adopted convention that you should follow so that anyone working with your code can easily understand it.</p> <p>3. The demo below will appear automatically within the Jupyter Notebook, or pop in a browser on http://localhost:7860 if running from a script:</p> <p>$demo_hello_world</p> <p>When developing locally, if you want to run the code as a Python script, you can use the Gradio CLI to launch the application in reload mode, which will provide seamless and fast development. Learn more about reloading in the Auto-Reloading Guide.</p> <pre><code>gradio app.py\n</code></pre> <p>Note: you can also do <code>python app.py</code>, but it won't provide the automatic reload mechanism.</p>"},{"location":"01_getting-started/01_quickstart/#the-interface-class","title":"The <code>Interface</code> Class","text":"<p>You'll notice that in order to make the demo, we created a <code>gr.Interface</code>. This <code>Interface</code> class can wrap any Python function with a user interface. In the example above, we saw a simple text-based function, but the function could be anything from music generator to a tax calculator to the prediction function of a pretrained machine learning model.</p> <p>The core <code>Interface</code> class is initialized with three required parameters:</p> <ul> <li><code>fn</code>: the function to wrap a UI around</li> <li><code>inputs</code>: which component(s) to use for the input (e.g. <code>\"text\"</code>, <code>\"image\"</code> or <code>\"audio\"</code>)</li> <li><code>outputs</code>: which component(s) to use for the output (e.g. <code>\"text\"</code>, <code>\"image\"</code> or <code>\"label\"</code>)</li> </ul> <p>Let's take a closer look at these components used to provide input and output.</p>"},{"location":"01_getting-started/01_quickstart/#components-attributes","title":"Components Attributes","text":"<p>We saw some simple <code>Textbox</code> components in the previous examples, but what if you want to change how the UI components look or behave?</p> <p>Let's say you want to customize the input text field \u2014 for example, you wanted it to be larger and have a text placeholder. If we use the actual class for <code>Textbox</code> instead of using the string shortcut, you have access to much more customizability through component attributes.</p> <p>$code_hello_world_2 $demo_hello_world_2</p>"},{"location":"01_getting-started/01_quickstart/#multiple-input-and-output-components","title":"Multiple Input and Output Components","text":"<p>Suppose you had a more complex function, with multiple inputs and outputs. In the example below, we define a function that takes a string, boolean, and number, and returns a string and number. Take a look how you pass a list of input and output components.</p> <p>$code_hello_world_3 $demo_hello_world_3</p> <p>You simply wrap the components in a list. Each component in the <code>inputs</code> list corresponds to one of the parameters of the function, in order. Each component in the <code>outputs</code> list corresponds to one of the values returned by the function, again in order.</p>"},{"location":"01_getting-started/01_quickstart/#an-image-example","title":"An Image Example","text":"<p>Gradio supports many types of components, such as <code>Image</code>, <code>DataFrame</code>, <code>Video</code>, or <code>Label</code>. Let's try an image-to-image function to get a feel for these!</p> <p>$code_sepia_filter $demo_sepia_filter</p> <p>When using the <code>Image</code> component as input, your function will receive a NumPy array with the shape <code>(height, width, 3)</code>, where the last dimension represents the RGB values. We'll return an image as well in the form of a NumPy array.</p> <p>You can also set the datatype used by the component with the <code>type=</code> keyword argument. For example, if you wanted your function to take a file path to an image instead of a NumPy array, the input <code>Image</code> component could be written as:</p> <pre><code>gr.Image(type=\"filepath\", shape=...)\n</code></pre> <p>Also note that our input <code>Image</code> component comes with an edit button \ud83d\udd89, which allows for cropping and zooming into images. Manipulating images in this way can help reveal biases or hidden flaws in a machine learning model!</p> <p>You can read more about the many components and how to use them in the Gradio docs.</p>"},{"location":"01_getting-started/01_quickstart/#chatbots","title":"Chatbots","text":"<p>Gradio includes a high-level class, <code>gr.ChatInterface</code>, which is similar to <code>gr.Interface</code>, but is specifically designed for chatbot UIs. The <code>gr.ChatInterface</code> class also wraps a function but this function must have a specific signature. The function should take two arguments: <code>message</code> and then <code>history</code> (the arguments can be named anything, but must be in this order)</p> <ul> <li><code>message</code>: a <code>str</code> representing the user's input</li> <li><code>history</code>: a <code>list</code> of <code>list</code> representing the conversations up until that point. Each inner list consists of two <code>str</code> representing a pair: <code>[user input, bot response]</code>.</li> </ul> <p>Your function should return a single string response, which is the bot's response to the particular user input <code>message</code>.</p> <p>Other than that, <code>gr.ChatInterface</code> has no required parameters (though several are available for customization of the UI).</p> <p>Here's a toy example:</p> <p>$code_chatinterface_random_response $demo_chatinterface_random_response</p> <p>You can read more about <code>gr.ChatInterface</code> here.</p>"},{"location":"01_getting-started/01_quickstart/#blocks-more-flexibility-and-control","title":"Blocks: More Flexibility and Control","text":"<p>Gradio offers two approaches to build apps:</p> <p>1. Interface and ChatInterface, which provide a high-level abstraction for creating demos that we've been discussing so far.</p> <p>2. Blocks, a low-level API for designing web apps with more flexible layouts and data flows. Blocks allows you to do things like feature multiple data flows and demos, control where components appear on the page, handle complex data flows (e.g. outputs can serve as inputs to other functions), and update properties/visibility of components based on user interaction \u2014 still all in Python. If this customizability is what you need, try <code>Blocks</code> instead!</p>"},{"location":"01_getting-started/01_quickstart/#hello-blocks","title":"Hello, Blocks","text":"<p>Let's take a look at a simple example. Note how the API here differs from <code>Interface</code>.</p> <p>$code_hello_blocks $demo_hello_blocks</p> <p>Things to note:</p> <ul> <li><code>Blocks</code> are made with a <code>with</code> clause, and any component created inside this clause is automatically added to the app.</li> <li>Components appear vertically in the app in the order they are created. (Later we will cover customizing layouts!)</li> <li>A <code>Button</code> was created, and then a <code>click</code> event-listener was added to this button. The API for this should look familiar! Like an <code>Interface</code>, the <code>click</code> method takes a Python function, input components, and output components.</li> </ul>"},{"location":"01_getting-started/01_quickstart/#more-complexity","title":"More Complexity","text":"<p>Here's an app to give you a taste of what's possible with <code>Blocks</code>:</p> <p>$code_blocks_flipper $demo_blocks_flipper</p> <p>A lot more going on here! We'll cover how to create complex <code>Blocks</code> apps like this in the building with blocks section for you.</p> <p>Congrats, you're now familiar with the basics of Gradio! \ud83e\udd73 Go to our next guide to learn more about the key features of Gradio.</p>"},{"location":"01_getting-started/02_key-features/","title":"Key Features","text":"<p>Let's go through some of the most popular features of Gradio! Here are Gradio's key features:</p> <ol> <li>Adding example inputs</li> <li>Passing custom error messages</li> <li>Adding descriptive content</li> <li>Setting up flagging</li> <li>Preprocessing and postprocessing</li> <li>Styling demos</li> <li>Queuing users</li> <li>Iterative outputs</li> <li>Progress bars</li> <li>Batch functions</li> <li>Running on collaborative notebooks</li> </ol>"},{"location":"01_getting-started/02_key-features/#example-inputs","title":"Example Inputs","text":"<p>You can provide example data that a user can easily load into <code>Interface</code>. This can be helpful to demonstrate the types of inputs the model expects, as well as to provide a way to explore your dataset in conjunction with your model. To load example data, you can provide a nested list to the <code>examples=</code> keyword argument of the Interface constructor. Each sublist within the outer list represents a data sample, and each element within the sublist represents an input for each input component. The format of example data for each component is specified in the Docs.</p> <p>$code_calculator $demo_calculator</p> <p>You can load a large dataset into the examples to browse and interact with the dataset through Gradio. The examples will be automatically paginated (you can configure this through the <code>examples_per_page</code> argument of <code>Interface</code>).</p> <p>Continue learning about examples in the More On Examples guide.</p>"},{"location":"01_getting-started/02_key-features/#alerts","title":"Alerts","text":"<p>You wish to pass custom error messages to the user. To do so, raise a <code>gr.Error(\"custom message\")</code> to display an error message. If you try to divide by zero in the calculator demo above, a popup modal will display the custom error message. Learn more about Error in the docs.</p> <p>You can also issue <code>gr.Warning(\"message\")</code> and <code>gr.Info(\"message\")</code> by having them as standalone lines in your function, which will immediately display modals while continuing the execution of your function. Queueing needs to be enabled for this to work.</p> <p>Note below how the <code>gr.Error</code> has to be raised, while the <code>gr.Warning</code> and <code>gr.Info</code> are single lines.</p> <pre><code>def start_process(name):\n    gr.Info(\"Starting process\")\n    if name is None:\n        gr.Warning(\"Name is empty\")\n    ...\n    if success == False:\n        raise gr.Error(\"Process failed\")\n</code></pre>"},{"location":"01_getting-started/02_key-features/#descriptive-content","title":"Descriptive Content","text":"<p>In the previous example, you may have noticed the <code>title=</code> and <code>description=</code> keyword arguments in the <code>Interface</code> constructor that helps users understand your app.</p> <p>There are three arguments in the <code>Interface</code> constructor to specify where this content should go:</p> <ul> <li><code>title</code>: which accepts text and can display it at the very top of interface, and also becomes the page title.</li> <li><code>description</code>: which accepts text, markdown or HTML and places it right under the title.</li> <li><code>article</code>: which also accepts text, markdown or HTML and places it below the interface.</li> </ul> <p></p> <p>If you're using the <code>Blocks</code> API instead, you can insert text, markdown, or HTML anywhere using the <code>gr.Markdown(...)</code> or <code>gr.HTML(...)</code> components, with descriptive content inside the <code>Component</code> constructor.</p> <p>Another useful keyword argument is <code>label=</code>, which is present in every <code>Component</code>. This modifies the label text at the top of each <code>Component</code>. You can also add the <code>info=</code> keyword argument to form elements like <code>Textbox</code> or <code>Radio</code> to provide further information on their usage.</p> <pre><code>gr.Number(label='Age', info='In years, must be greater than 0')\n</code></pre>"},{"location":"01_getting-started/02_key-features/#flagging","title":"Flagging","text":"<p>By default, an <code>Interface</code> will have \"Flag\" button. When a user testing your <code>Interface</code> sees input with interesting output, such as erroneous or unexpected model behaviour, they can flag the input for you to review. Within the directory provided by the <code>flagging_dir=</code> argument to the <code>Interface</code> constructor, a CSV file will log the flagged inputs. If the interface involves file data, such as for Image and Audio components, folders will be created to store those flagged data as well.</p> <p>For example, with the calculator interface shown above, we would have the flagged data stored in the flagged directory shown below:</p> <pre><code>+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n</code></pre> <p>flagged/logs.csv</p> <pre><code>num1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n</code></pre> <p>With the sepia interface shown earlier, we would have the flagged data stored in the flagged directory shown below:</p> <pre><code>+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n</code></pre> <p>flagged/logs.csv</p> <pre><code>im,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n</code></pre> <p>If you wish for the user to provide a reason for flagging, you can pass a list of strings to the <code>flagging_options</code> argument of Interface. Users will have to select one of the strings when flagging, which will be saved as an additional column to the CSV.</p>"},{"location":"01_getting-started/02_key-features/#preprocessing-and-postprocessing","title":"Preprocessing and Postprocessing","text":"<p>As you've seen, Gradio includes components that can handle a variety of different data types, such as images, audio, and video. Most components can be used both as inputs or outputs.</p> <p>When a component is used as an input, Gradio automatically handles the preprocessing needed to convert the data from a type sent by the user's browser (such as a base64 representation of a webcam snapshot) to a form that can be accepted by your function (such as a <code>numpy</code> array).</p> <p>Similarly, when a component is used as an output, Gradio automatically handles the postprocessing needed to convert the data from what is returned by your function (such as a list of image paths) to a form that can be displayed in the user's browser (such as a <code>Gallery</code> of images in base64 format).</p> <p>You can control the preprocessing using the parameters when constructing the image component. For example, here if you instantiate the <code>Image</code> component with the following parameters, it will convert the image to the <code>PIL</code> type and reshape it to be <code>(100, 100)</code> no matter the original size that it was submitted as:</p> <pre><code>img = gr.Image(shape=(100, 100), type=\"pil\")\n</code></pre> <p>In contrast, here we keep the original size of the image, but invert the colors before converting it to a numpy array:</p> <pre><code>img = gr.Image(invert_colors=True, type=\"numpy\")\n</code></pre> <p>Postprocessing is a lot easier! Gradio automatically recognizes the format of the returned data (e.g. is the <code>Image</code> a <code>numpy</code> array or a <code>str</code> filepath?) and postprocesses it into a format that can be displayed by the browser.</p> <p>Take a look at the Docs to see all the preprocessing-related parameters for each Component.</p>"},{"location":"01_getting-started/02_key-features/#styling","title":"Styling","text":"<p>Gradio themes are the easiest way to customize the look and feel of your app. You can choose from a variety of themes, or create your own. To do so, pass the <code>theme=</code> kwarg to the <code>Interface</code> constructor. For example:</p> <pre><code>demo = gr.Interface(..., theme=gr.themes.Monochrome())\n</code></pre> <p>Gradio comes with a set of prebuilt themes which you can load from <code>gr.themes.*</code>. You can extend these themes or create your own themes from scratch - see the Theming guide for more details.</p> <p>For additional styling ability, you can pass any CSS to your app using the <code>css=</code> kwarg. The base class for the Gradio app is <code>gradio-container</code>, so here's an example that changes the background color of the Gradio app:</p> <pre><code>with gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n</code></pre>"},{"location":"01_getting-started/02_key-features/#queuing","title":"Queuing","text":"<p>If your app expects heavy traffic, use the <code>queue()</code> method to control processing rate. This will queue up calls so only a certain number of requests are processed at a single time. Queueing uses websockets, which also prevent network timeouts, so you should use queueing if the inference time of your function is long (&gt; 1min).</p> <p>With <code>Interface</code>:</p> <pre><code>demo = gr.Interface(...).queue()\ndemo.launch()\n</code></pre> <p>With <code>Blocks</code>:</p> <pre><code>with gr.Blocks() as demo:\n    #...\ndemo.queue()\ndemo.launch()\n</code></pre> <p>You can control the number of requests processed at a single time as such:</p> <pre><code>with gr.Blocks() as demo:\n    btn = gr.Button(\"Run\")\n    btn.click(..., concurrency_limit=2)\n</code></pre> <p>This limits the number of requests processed for this event listener at a single time to 2.</p> <p>See the Docs on queueing on configuring other queuing parameters.</p> <p>To specify only certain functions for queueing in Blocks:</p> <pre><code>with gr.Blocks() as demo2:\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n</code></pre>"},{"location":"01_getting-started/02_key-features/#iterative-outputs","title":"Iterative Outputs","text":"<p>In some cases, you may want to stream a sequence of outputs rather than show a single output at once. For example, you might have an image generation model and you want to show the image that is generated at each step, leading up to the final image. Or you might have a chatbot which streams its response one word at a time instead of returning it all at once.</p> <p>In such cases, you can supply a generator function into Gradio instead of a regular function. Creating generators in Python is very simple: instead of a single <code>return</code> value, a function should <code>yield</code> a series of values instead. Usually the <code>yield</code> statement is put in some kind of loop. Here's an example of an generator that simply counts up to a given number:</p> <pre><code>def my_generator(x):\n    for i in range(x):\n        yield i\n</code></pre> <p>You supply a generator into Gradio the same way as you would a regular function. For example, here's a a (fake) image generation model that generates noise for several steps before outputting an image:</p> <p>$code_fake_diffusion $demo_fake_diffusion</p> <p>Note that we've added a <code>time.sleep(1)</code> in the iterator to create an artificial pause between steps so that you are able to observe the steps of the iterator (in a real image generation model, this probably wouldn't be necessary).</p> <p>Supplying a generator into Gradio requires you to enable queuing in the underlying Interface or Blocks (see the queuing section above).</p>"},{"location":"01_getting-started/02_key-features/#progress-bars","title":"Progress Bars","text":"<p>Gradio supports the ability to create a custom Progress Bars so that you have customizability and control over the progress update that you show to the user. In order to enable this, simply add an argument to your method that has a default value of a <code>gr.Progress</code> instance. Then you can update the progress levels by calling this instance directly with a float between 0 and 1, or using the <code>tqdm()</code> method of the <code>Progress</code> instance to track progress over an iterable, as shown below. Queueing must be enabled for progress updates.</p> <p>$code_progress_simple $demo_progress_simple</p> <p>If you use the <code>tqdm</code> library, you can even report progress updates automatically from any <code>tqdm.tqdm</code> that already exists within your function by setting the default argument as <code>gr.Progress(track_tqdm=True)</code>!</p>"},{"location":"01_getting-started/02_key-features/#batch-functions","title":"Batch Functions","text":"<p>Gradio supports the ability to pass batch functions. Batch functions are just functions which take in a list of inputs and return a list of predictions.</p> <p>For example, here is a batched function that takes in two lists of inputs (a list of words and a list of ints), and returns a list of trimmed words as output:</p> <pre><code>import time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n</code></pre> <p>The advantage of using batched functions is that if you enable queuing, the Gradio server can automatically batch incoming requests and process them in parallel, potentially speeding up your demo. Here's what the Gradio code looks like (notice the <code>batch=True</code> and <code>max_batch_size=16</code> -- both of these parameters can be passed into event triggers or into the <code>Interface</code> class)</p> <p>With <code>Interface</code>:</p> <pre><code>demo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n</code></pre> <p>With <code>Blocks</code>:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n</code></pre> <p>In the example above, 16 requests could be processed in parallel (for a total inference time of 5 seconds), instead of each request being processed separately (for a total inference time of 80 seconds). Many Hugging Face <code>transformers</code> and <code>diffusers</code> models work very naturally with Gradio's batch mode: here's an example demo using diffusers to generate images in batches</p> <p>Note: using batch functions with Gradio requires you to enable queuing in the underlying Interface or Blocks (see the queuing section above).</p>"},{"location":"01_getting-started/02_key-features/#colab-notebooks","title":"Colab Notebooks","text":"<p>Gradio is able to run anywhere you run Python, including local jupyter notebooks as well as collaborative notebooks, such as Google Colab. In the case of local jupyter notebooks and Google Colab notbooks, Gradio runs on a local server which you can interact with in your browser. (Note: for Google Colab, this is accomplished by service worker tunneling, which requires cookies to be enabled in your browser.) For other remote notebooks, Gradio will also run on a server, but you will need to use SSH tunneling to view the app in your local browser. Often a simpler options is to use Gradio's built-in public links, discussed in the next Guide.</p>"},{"location":"01_getting-started/03_sharing-your-app/","title":"Sharing Your App","text":"<p>How to share your Gradio app:</p> <ol> <li>Sharing demos with the share parameter</li> <li>Hosting on HF Spaces</li> <li>Embedding hosted spaces</li> <li>Embedding with web components</li> <li>Using the API page</li> <li>Adding authentication to the page</li> <li>Accessing network requests</li> <li>Mounting within FastAPI</li> <li>Security and file access</li> </ol>"},{"location":"01_getting-started/03_sharing-your-app/#sharing-demos","title":"Sharing Demos","text":"<p>Gradio demos can be easily shared publicly by setting <code>share=True</code> in the <code>launch()</code> method. Like this:</p> <pre><code>demo.launch(share=True)\n</code></pre> <p>This generates a public, shareable link that you can send to anybody! When you send this link, the user on the other side can try out the model in their browser. Because the processing happens on your device (as long as your device stays on!), you don't have to worry about any packaging any dependencies. A share link usually looks something like this: https://07ff8706ab.gradio.live. Although the link is served through the Gradio Share Servers, these servers are only a proxy for your local server, and do not store any data sent through your app. </p> <p>Keep in mind that share links are publicly accessible, meaning that anyone can use your model for prediction! Therefore, make sure not to expose any sensitive information through the functions you write, or allow any critical changes to occur on your device. If you set <code>share=False</code> (the default, except in colab notebooks), only a local link is created, which can be shared by port-forwarding with specific users. </p> <p></p> <p>Share links expire after 72 hours. (Note: it is also possible to set up your own Share Server to overcome this restriction.)</p>"},{"location":"01_getting-started/03_sharing-your-app/#hosting-on-hf-spaces","title":"Hosting on HF Spaces","text":"<p>If you'd like to have a permanent link to your Gradio demo on the internet, use Hugging Face Spaces. Hugging Face Spaces provides the infrastructure to permanently host your machine learning model for free!</p> <p>After you have created a free Hugging Face account, you have three methods to deploy your Gradio app to Hugging Face Spaces:</p> <ol> <li> <p>From terminal: run <code>gradio deploy</code> in your app directory. The CLI will gather some basic metadata and then launch your app. To update your space, you can re-run this command or enable the Github Actions option to automatically update the Spaces on <code>git push</code>.</p> </li> <li> <p>From your browser: Drag and drop a folder containing your Gradio model and all related files here.</p> </li> <li> <p>Connect Spaces with your Git repository and Spaces will pull the Gradio app from there. See this guide how to host on Hugging Face Spaces for more information.</p> </li> </ol> <p>Note: Some components, like <code>gr.Image</code>, will display a \"Share\" button only on Spaces, so that users can share the generated output to the Discussions page of the Space easily. You can disable this with <code>show_share_button</code>, such as <code>gr.Image(show_share_button=False)</code>.</p> <p></p>"},{"location":"01_getting-started/03_sharing-your-app/#embedding-hosted-spaces","title":"Embedding Hosted Spaces","text":"<p>Once you have hosted your app on Hugging Face Spaces (or on your own server), you may want to embed the demo on a different website, such as your blog or your portfolio. Embedding an interactive demo allows people to try out the machine learning model that you have built, without needing to download or install anything \u2014 right in their browser! The best part is that you can embed interactive demos even in static websites, such as GitHub pages.</p> <p>There are two ways to embed your Gradio demos. You can find quick links to both options directly on the Hugging Face Space page, in the \"Embed this Space\" dropdown option:</p> <p></p>"},{"location":"01_getting-started/03_sharing-your-app/#embedding-with-web-components","title":"Embedding with Web Components","text":"<p>Web components typically offer a better experience to users than IFrames. Web components load lazily, meaning that they won't slow down the loading time of your website, and they automatically adjust their height based on the size of the Gradio app.</p> <p>To embed with Web Components:</p> <ol> <li>Import the gradio JS library into into your site by adding the script below in your site (replace {GRADIO_VERSION} in the URL with the library version of Gradio you are using).</li> </ol> <pre><code>&lt;script\n    type=\"module\"\n    src=\"https://gradio.s3-us-west-2.amazonaws.com/{GRADIO_VERSION}/gradio.js\"\n&gt;&lt;/script&gt;\n</code></pre> <ol> <li>Add</li> </ol> <pre><code>&lt;gradio-app src=\"https://$your_space_host.hf.space\"&gt;&lt;/gradio-app&gt;\n</code></pre> <p>element where you want to place the app. Set the <code>src=</code> attribute to your Space's embed URL, which you can find in the \"Embed this Space\" button. For example:</p> <pre><code>&lt;gradio-app\n    src=\"https://abidlabs-pytorch-image-classifier.hf.space\"\n&gt;&lt;/gradio-app&gt;\n</code></pre> <p>You can see examples of how web components look on the Gradio landing page.</p> <p>You can also customize the appearance and behavior of your web component with attributes that you pass into the <code>&lt;gradio-app&gt;</code> tag:</p> <ul> <li><code>src</code>: as we've seen, the <code>src</code> attributes links to the URL of the hosted Gradio demo that you would like to embed</li> <li><code>space</code>: an optional shorthand if your Gradio demo is hosted on Hugging Face Space. Accepts a <code>username/space_name</code> instead of a full URL. Example: <code>gradio/Echocardiogram-Segmentation</code>. If this attribute attribute is provided, then <code>src</code> does not need to be provided.</li> <li><code>control_page_title</code>: a boolean designating whether the html title of the page should be set to the title of the Gradio app (by default <code>\"false\"</code>)</li> <li><code>initial_height</code>: the initial height of the web component while it is loading the Gradio app, (by default <code>\"300px\"</code>). Note that the final height is set based on the size of the Gradio app.</li> <li><code>container</code>: whether to show the border frame and information about where the Space is hosted (by default <code>\"true\"</code>)</li> <li><code>info</code>: whether to show just the information about where the Space is hosted underneath the embedded app (by default <code>\"true\"</code>)</li> <li><code>autoscroll</code>: whether to autoscroll to the output when prediction has finished (by default <code>\"false\"</code>)</li> <li><code>eager</code>: whether to load the Gradio app as soon as the page loads (by default <code>\"false\"</code>)</li> <li><code>theme_mode</code>: whether to use the <code>dark</code>, <code>light</code>, or default <code>system</code> theme mode (by default <code>\"system\"</code>)</li> <li><code>render</code>: an event that is triggered once the embedded space has finished rendering.</li> </ul> <p>Here's an example of how to use these attributes to create a Gradio app that does not lazy load and has an initial height of 0px.</p> <pre><code>&lt;gradio-app\n    space=\"gradio/Echocardiogram-Segmentation\"\n    eager=\"true\"\n    initial_height=\"0px\"\n&gt;&lt;/gradio-app&gt;\n</code></pre> <p>Here's another example of how to use the <code>render</code> event. An event listener is used to capture the <code>render</code> event and will call the <code>handleLoadComplete()</code> function once rendering is complete. </p> <pre><code>&lt;script&gt;\n    function handleLoadComplete() {\n        console.log(\"Embedded space has finished rendering\");\n    }\n\n    const gradioApp = document.querySelector(\"gradio-app\");\n    gradioApp.addEventListener(\"render\", handleLoadComplete);\n&lt;/script&gt;\n</code></pre> <p>Note: While Gradio's CSS will never impact the embedding page, the embedding page can affect the style of the embedded Gradio app. Make sure that any CSS in the parent page isn't so general that it could also apply to the embedded Gradio app and cause the styling to break. Element selectors such as <code>header { ... }</code> and <code>footer { ... }</code> will be the most likely to cause issues.</p>"},{"location":"01_getting-started/03_sharing-your-app/#embedding-with-iframes","title":"Embedding with IFrames","text":"<p>To embed with IFrames instead (if you cannot add javascript to your website, for example), add this element:</p> <pre><code>&lt;iframe src=\"https://$your_space_host.hf.space\"&gt;&lt;/iframe&gt;\n</code></pre> <p>Again, you can find the <code>src=</code> attribute to your Space's embed URL, which you can find in the \"Embed this Space\" button.</p> <p>Note: if you use IFrames, you'll probably want to add a fixed <code>height</code> attribute and set <code>style=\"border:0;\"</code> to remove the boreder. In addition, if your app requires permissions such as access to the webcam or the microphone, you'll need to provide that as well using the <code>allow</code> attribute.</p>"},{"location":"01_getting-started/03_sharing-your-app/#api-page","title":"API Page","text":"<p>You can use almost any Gradio app as an API! In the footer of a Gradio app like this one, you'll see a \"Use via API\" link.</p> <p></p> <p>This is a page that lists the endpoints that can be used to query the Gradio app, via our supported clients: either the Python client, or the JavaScript client. For each endpoint, Gradio automatically generates the parameters and their types, as well as example inputs.</p> <p>The endpoints are automatically created when you launch a Gradio <code>Interface</code>. If you are using Gradio <code>Blocks</code>, you can also set up a Gradio API page, though we recommend that you explicitly name each event listener, such as</p> <pre><code>btn.click(add, [num1, num2], output, api_name=\"addition\")\n</code></pre> <p>This will add and document the endpoint <code>/api/addition/</code> to the automatically generated API page. Otherwise, your API endpoints will appear as \"unnamed\" endpoints.</p> <p>Note: For Gradio apps in which queueing is enabled, users can bypass the queue if they make a POST request to your API endpoint. To disable this behavior, set <code>api_open=False</code> in the <code>queue()</code> method. To disable the API page altogether, set <code>show_api=False</code> in <code>.launch()</code>.</p>"},{"location":"01_getting-started/03_sharing-your-app/#authentication","title":"Authentication","text":""},{"location":"01_getting-started/03_sharing-your-app/#password-protected-app","title":"Password-protected app","text":"<p>You may wish to put an authentication page in front of your app to limit who can open your app. With the <code>auth=</code> keyword argument in the <code>launch()</code> method, you can provide a tuple with a username and password, or a list of acceptable username/password tuples; Here's an example that provides password-based authentication for a single user named \"admin\":</p> <pre><code>demo.launch(auth=(\"admin\", \"pass1234\"))\n</code></pre> <p>For more complex authentication handling, you can even pass a function that takes a username and password as arguments, and returns True to allow authentication, False otherwise. This can be used for, among other things, making requests to 3rd-party authentication services.</p> <p>Here's an example of a function that accepts any login where the username and password are the same:</p> <pre><code>def same_auth(username, password):\n    return username == password\ndemo.launch(auth=same_auth)\n</code></pre> <p>For authentication to work properly, third party cookies must be enabled in your browser. This is not the case by default for Safari, Chrome Incognito Mode.</p>"},{"location":"01_getting-started/03_sharing-your-app/#oauth-login-via-hugging-face","title":"OAuth (Login via Hugging Face)","text":"<p>Gradio supports OAuth login via Hugging Face. This feature is currently experimental and only available on Spaces. If allows to add a \"Sign in with Hugging Face\" button to your demo. Check out this Space for a live demo.</p> <p>To enable OAuth, you must set <code>hf_oauth: true</code> as a Space metadata in your README.md file. This will register your Space as an OAuth application on Hugging Face. Next, you can use <code>gr.LoginButton</code> and <code>gr.LogoutButton</code> to add login and logout buttons to your Gradio app. Once a user is logged in with their HF account, you can retrieve their profile by adding a parameter of type <code>gr.OAuthProfile</code> to any Gradio function. The user profile will be automatically injected as a parameter value.</p> <p>Here is a short example:</p> <pre><code>import gradio as gr\n\n\ndef hello(profile: gr.OAuthProfile | None) -&gt; str:\n    if profile is None:\n        return \"I don't know you.\"\n    return f\"Hello {profile.name}\"\n\n\nwith gr.Blocks() as demo:\n    gr.LoginButton()\n    gr.LogoutButton()\n    gr.Markdown().attach_load_event(hello, None)\n</code></pre> <p>When the user clicks on the login button, they get redirected in a new page to authorize your Space.</p> <p></p> <p>Users can revoke access to their profile at any time in their settings.</p> <p>As seen above, OAuth features are available only when your app runs in a Space. However, you often need to test your app locally before deploying it. To help with that, the <code>gr.LoginButton</code> is mocked. When a user clicks on it, they are automatically logged in with a fake user profile. This allows you to debug your app before deploying it to a Space.</p>"},{"location":"01_getting-started/03_sharing-your-app/#accessing-the-network-request-directly","title":"Accessing the Network Request Directly","text":"<p>When a user makes a prediction to your app, you may need the underlying network request, in order to get the request headers (e.g. for advanced authentication), log the client's IP address, getting the query parameters, or for other reasons. Gradio supports this in a similar manner to FastAPI: simply add a function parameter whose type hint is <code>gr.Request</code> and Gradio will pass in the network request as that parameter. Here is an example:</p> <pre><code>import gradio as gr\n\ndef echo(text, request: gr.Request):\n    if request:\n        print(\"Request headers dictionary:\", request.headers)\n        print(\"IP address:\", request.client.host)\n        print(\"Query parameters:\", dict(request.query_params))\n    return text\n\nio = gr.Interface(echo, \"textbox\", \"textbox\").launch()\n</code></pre> <p>Note: if your function is called directly instead of through the UI (this happens, for example, when examples are cached, or when the Gradio app is called via API), then <code>request</code> will be <code>None</code>.  You should handle this case explicitly to ensure that your app does not throw any errors. That is why we have the explicit check <code>if request</code>.</p>"},{"location":"01_getting-started/03_sharing-your-app/#mounting-within-another-fastapi-app","title":"Mounting Within Another FastAPI App","text":"<p>In some cases, you might have an existing FastAPI app, and you'd like to add a path for a Gradio demo. You can easily do this with <code>gradio.mount_gradio_app()</code>.</p> <p>Here's a complete example:</p> <p>$code_custom_path</p> <p>Note that this approach also allows you run your Gradio apps on custom paths (<code>http://localhost:8000/gradio</code> in the example above).</p>"},{"location":"01_getting-started/03_sharing-your-app/#security-and-file-access","title":"Security and File Access","text":"<p>Sharing your Gradio app with others (by hosting it on Spaces, on your own server, or through temporary share links) exposes certain files on the host machine to users of your Gradio app.</p> <p>In particular, Gradio apps ALLOW users to access to three kinds of files:</p> <ul> <li> <p>Temporary files created by Gradio. These are files that are created by Gradio as part of running your prediction function. For example, if your prediction function returns a video file, then Gradio will save that video to a temporary cache on your device and then send the path to the file to the front end. You can customize the location of cache files created by Gradio by setting the environment variable <code>GRADIO_TEMP_DIR</code> to an absolute path, such as <code>/home/usr/scripts/project/temp/</code>.</p> </li> <li> <p>Cached examples created by Gradio. These are files that are created by Gradio as part of caching examples for faster runtimes, if you set <code>cache_examples=True</code> in <code>gr.Interface()</code> or in <code>gr.Examples()</code>. These files are saved in the <code>gradio_cached_examples/</code> subdirectory within your app's working directory.</p> </li> <li> <p>Files that you explicitly allow via the <code>allowed_paths</code> parameter in <code>launch()</code>. This parameter allows you to pass in a list of additional directories or exact filepaths you'd like to allow users to have access to. (By default, this parameter is an empty list).</p> </li> </ul> <p>Gradio DOES NOT ALLOW access to:</p> <ul> <li> <p>Files that you explicitly block via the <code>blocked_paths</code> parameter in <code>launch()</code>. You can pass in a list of additional directories or exact filepaths to the <code>blocked_paths</code> parameter in <code>launch()</code>. This parameter takes precedence over the files that Gradio exposes by default or by the <code>allowed_paths</code>.</p> </li> <li> <p>Any other paths on the host machine. Users should NOT be able to access other arbitrary paths on the host.</p> </li> </ul> <p>Please make sure you are running the latest version of <code>gradio</code> for these security settings to apply.</p>"},{"location":"02_building-interfaces/01_interface-state/","title":"Interface State","text":"<p>This guide covers how State is handled in Gradio. Learn the difference between Global and Session states, and how to use both.</p>"},{"location":"02_building-interfaces/01_interface-state/#global-state","title":"Global State","text":"<p>Your function may use data that persists beyond a single function call. If the data is something accessible to all function calls and all users, you can create a variable outside the function call and access it inside the function. For example, you may load a large model outside the function and use it inside the function so that every function call does not need to reload the model.</p> <p>$code_score_tracker</p> <p>In the code above, the <code>scores</code> array is shared between all users. If multiple users are accessing this demo, their scores will all be added to the same list, and the returned top 3 scores will be collected from this shared reference.</p>"},{"location":"02_building-interfaces/01_interface-state/#session-state","title":"Session State","text":"<p>Another type of data persistence Gradio supports is session state, where data persists across multiple submits within a page session. However, data is not shared between different users of your model. To store data in a session state, you need to do three things:</p> <ol> <li>Pass in an extra parameter into your function, which represents the state of the interface.</li> <li>At the end of the function, return the updated value of the state as an extra return value.</li> <li>Add the <code>'state'</code> input and <code>'state'</code> output components when creating your <code>Interface</code></li> </ol> <p>A chatbot is an example where you would need session state - you want access to a users previous submissions, but you cannot store chat history in a global variable, because then chat history would get jumbled between different users.</p> <p>$code_chatbot_dialogpt $demo_chatbot_dialogpt</p> <p>Notice how the state persists across submits within each page, but if you load this demo in another tab (or refresh the page), the demos will not share chat history.</p> <p>The default value of <code>state</code> is None. If you pass a default value to the state parameter of the function, it is used as the default value of the state instead. The <code>Interface</code> class only supports a single input and outputs state variable, though it can be a list with multiple elements. For more complex use cases, you can use Blocks, which supports multiple <code>State</code> variables.</p>"},{"location":"02_building-interfaces/02_reactive-interfaces/","title":"Reactive Interfaces","text":"<p>This guide covers how to get Gradio interfaces to refresh automatically or continuously stream data.</p>"},{"location":"02_building-interfaces/02_reactive-interfaces/#live-interfaces","title":"Live Interfaces","text":"<p>You can make interfaces automatically refresh by setting <code>live=True</code> in the interface. Now the interface will recalculate as soon as the user input changes.</p> <p>$code_calculator_live $demo_calculator_live</p> <p>Note there is no submit button, because the interface resubmits automatically on change.</p>"},{"location":"02_building-interfaces/02_reactive-interfaces/#streaming-components","title":"Streaming Components","text":"<p>Some components have a \"streaming\" mode, such as <code>Audio</code> component in microphone mode, or the <code>Image</code> component in webcam mode. Streaming means data is sent continuously to the backend and the <code>Interface</code> function is continuously being rerun.</p> <p>The difference between <code>gr.Audio(source='microphone')</code> and <code>gr.Audio(source='microphone', streaming=True)</code>, when both are used in <code>gr.Interface(live=True)</code>, is that the first <code>Component</code> will automatically submit data and run the <code>Interface</code> function when the user stops recording, whereas the second <code>Component</code> will continuously send data and run the <code>Interface</code> function during recording.</p> <p>Here is example code of streaming images from the webcam.</p> <p>$code_stream_frames</p> <p>Streaming can also be done in an output component. A <code>gr.Audio(streaming=True)</code> output component can take a stream of audio data yielded piece-wise by a generator function and combines them into a single audio file.</p> <p>$code_stream_audio_out</p>"},{"location":"02_building-interfaces/03_more-on-examples/","title":"More on Examples","text":"<p>This guide covers what more you can do with Examples: Loading examples from a directory, providing partial examples, and caching. If Examples is new to you, check out the intro in the Key Features guide.</p>"},{"location":"02_building-interfaces/03_more-on-examples/#providing-examples","title":"Providing Examples","text":"<p>As covered in the Key Features guide, adding examples to an Interface is as easy as providing a list of lists to the <code>examples</code> keyword argument. Each sublist is a data sample, where each element corresponds to an input of the prediction function. The inputs must be ordered in the same order as the prediction function expects them.</p> <p>If your interface only has one input component, then you can provide your examples as a regular list instead of a list of lists.</p>"},{"location":"02_building-interfaces/03_more-on-examples/#loading-examples-from-a-directory","title":"Loading Examples from a Directory","text":"<p>You can also specify a path to a directory containing your examples. If your Interface takes only a single file-type input, e.g. an image classifier, you can simply pass a directory filepath to the <code>examples=</code> argument, and the <code>Interface</code> will load the images in the directory as examples. In the case of multiple inputs, this directory must contain a log.csv file with the example values. In the context of the calculator demo, we can set <code>examples='/demo/calculator/examples'</code> and in that directory we include the following <code>log.csv</code> file:</p> <pre><code>num,operation,num2\n5,\"add\",3\n4,\"divide\",2\n5,\"multiply\",3\n</code></pre> <p>This can be helpful when browsing flagged data. Simply point to the flagged directory and the <code>Interface</code> will load the examples from the flagged data.</p>"},{"location":"02_building-interfaces/03_more-on-examples/#providing-partial-examples","title":"Providing Partial Examples","text":"<p>Sometimes your app has many input components, but you would only like to provide examples for a subset of them. In order to exclude some inputs from the examples, pass <code>None</code> for all data samples corresponding to those particular components.</p>"},{"location":"02_building-interfaces/03_more-on-examples/#caching-examples","title":"Caching examples","text":"<p>You may wish to provide some cached examples of your model for users to quickly try out, in case your model takes a while to run normally. If <code>cache_examples=True</code>, the <code>Interface</code> will run all of your examples through your app and save the outputs when you call the <code>launch()</code> method. This data will be saved in a directory called <code>gradio_cached_examples</code>.</p> <p>Whenever a user clicks on an example, the output will automatically be populated in the app now, using data from this cached directory instead of actually running the function. This is useful so users can quickly try out your model without adding any load!</p> <p>Keep in mind once the cache is generated, it will not be updated in future launches. If the examples or function logic change, delete the cache folder to clear the cache and rebuild it with another <code>launch()</code>.</p>"},{"location":"02_building-interfaces/04_advanced-interface-features/","title":"Advanced Interface Features","text":""},{"location":"02_building-interfaces/04_advanced-interface-features/#loading-hugging-face-models-and-spaces","title":"Loading Hugging Face Models and Spaces","text":"<p>Gradio integrates nicely with the Hugging Face Hub, allowing you to load models and Spaces with just one line of code. To use this, simply use the <code>load()</code> method in the <code>Interface</code> class. So:</p> <ul> <li>To load any model from the Hugging Face Hub and create an interface around it, you pass <code>\"model/\"</code> or <code>\"huggingface/\"</code> followed by the model name, like these examples:</li> </ul> <pre><code>gr.Interface.load(\"huggingface/gpt2\").launch();\n</code></pre> <pre><code>gr.Interface.load(\"huggingface/EleutherAI/gpt-j-6B\",\n    inputs=gr.Textbox(lines=5, label=\"Input Text\")  # customizes the input component\n).launch()\n</code></pre> <ul> <li>To load any Space from the Hugging Face Hub and recreate it locally (so that you can customize the inputs and outputs for example), you pass <code>\"spaces/\"</code> followed by the model name:</li> </ul> <pre><code>gr.Interface.load(\"spaces/eugenesiow/remove-bg\",\n                  inputs=\"webcam\",\n                  title=\"Remove your webcam background!\").launch()\n</code></pre> <p>One of the great things about loading Hugging Face models or spaces using Gradio is that you can then immediately use the resulting <code>Interface</code> object just like function in your Python code (this works for every type of model/space: text, images, audio, video, and even multimodal models):</p> <pre><code>io = gr.Interface.load(\"models/EleutherAI/gpt-neo-2.7B\")\nio(\"It was the best of times\")  # outputs model completion\n</code></pre>"},{"location":"02_building-interfaces/05_four-kinds-of-interfaces/","title":"The 4 Kinds of Gradio Interfaces","text":"<p>So far, we've always assumed that in order to build an Gradio demo, you need both inputs and outputs. But this isn't always the case for machine learning demos: for example, unconditional image generation models don't take any input but produce an image as the output.</p> <p>It turns out that the <code>gradio.Interface</code> class can actually handle 4 different kinds of demos:</p> <ol> <li>Standard demos: which have both separate inputs and outputs (e.g. an image classifier or speech-to-text model)</li> <li>Output-only demos: which don't take any input but produce on output (e.g. an unconditional image generation model)</li> <li>Input-only demos: which don't produce any output but do take in some sort of input (e.g. a demo that saves images that you upload to a persistent external database)</li> <li>Unified demos: which have both input and output components, but the input and output components are the same. This means that the output produced overrides the input (e.g. a text autocomplete model)</li> </ol> <p>Depending on the kind of demo, the user interface (UI) looks slightly different:</p> <p></p> <p>Let's see how to build each kind of demo using the <code>Interface</code> class, along with examples:</p>"},{"location":"02_building-interfaces/05_four-kinds-of-interfaces/#standard-demos","title":"Standard demos","text":"<p>To create a demo that has both the input and the output components, you simply need to set the values of the <code>inputs</code> and <code>outputs</code> parameter in <code>Interface()</code>. Here's an example demo of a simple image filter:</p> <p>$code_sepia_filter $demo_sepia_filter</p>"},{"location":"02_building-interfaces/05_four-kinds-of-interfaces/#output-only-demos","title":"Output-only demos","text":"<p>What about demos that only contain outputs? In order to build such a demo, you simply set the value of the <code>inputs</code> parameter in <code>Interface()</code> to <code>None</code>. Here's an example demo of a mock image generation model:</p> <p>$code_fake_gan_no_input $demo_fake_gan_no_input</p>"},{"location":"02_building-interfaces/05_four-kinds-of-interfaces/#input-only-demos","title":"Input-only demos","text":"<p>Similarly, to create a demo that only contains inputs, set the value of <code>outputs</code> parameter in <code>Interface()</code> to be <code>None</code>. Here's an example demo that saves any uploaded image to disk:</p> <p>$code_save_file_no_output $demo_save_file_no_output</p>"},{"location":"02_building-interfaces/05_four-kinds-of-interfaces/#unified-demos","title":"Unified demos","text":"<p>A demo that has a single component as both the input and the output. It can simply be created by setting the values of the <code>inputs</code> and <code>outputs</code> parameter as the same component. Here's an example demo of a text generation model:</p> <p>$code_unified_demo_text_generation $demo_unified_demo_text_generation</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/","title":"Blocks and Event Listeners","text":"<p>We took a quick look at Blocks in the Quickstart. Let's dive deeper. This guide will cover the how Blocks are structured, event listeners and their types, running events continuously, updating configurations, and using dictionaries vs lists.</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#blocks-structure","title":"Blocks Structure","text":"<p>Take a look at the demo below.</p> <p>$code_hello_blocks $demo_hello_blocks</p> <ul> <li>First, note the <code>with gr.Blocks() as demo:</code> clause. The Blocks app code will be contained within this clause.</li> <li>Next come the Components. These are the same Components used in <code>Interface</code>. However, instead of being passed to some constructor, Components are automatically added to the Blocks as they are created within the <code>with</code> clause.</li> <li>Finally, the <code>click()</code> event listener. Event listeners define the data flow within the app. In the example above, the listener ties the two Textboxes together. The Textbox <code>name</code> acts as the input and Textbox <code>output</code> acts as the output to the <code>greet</code> method. This dataflow is triggered when the Button <code>greet_btn</code> is clicked. Like an Interface, an event listener can take multiple inputs or outputs.</li> </ul> <p>You can also attach event listeners using decorators - skip the <code>fn</code> argument and assign <code>inputs</code> and <code>outputs</code> directly:</p> <p>$code_hello_blocks_decorator</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#event-listeners-and-interactivity","title":"Event Listeners and Interactivity","text":"<p>In the example above, you'll notice that you are able to edit Textbox <code>name</code>, but not Textbox <code>output</code>. This is because any Component that acts as an input to an event listener is made interactive. However, since Textbox <code>output</code> acts only as an output, Gradio determines that it should not be made interactive. You can override the default behavior and directly configure the interactivity of a Component with the boolean <code>interactive</code> keyword argument.</p> <pre><code>output = gr.Textbox(label=\"Output\", interactive=True)\n</code></pre> <p>Note: What happens if a Gradio component is neither an input nor an output? If a component is constructed with a default value, then it is presumed to be displaying content and is rendered non-interactive. Otherwise, it is rendered interactive. Again, this behavior can be overridden by specifying a value for the <code>interactive</code> argument.</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#types-of-event-listeners","title":"Types of Event Listeners","text":"<p>Take a look at the demo below:</p> <p>$code_blocks_hello $demo_blocks_hello</p> <p>Instead of being triggered by a click, the <code>welcome</code> function is triggered by typing in the Textbox <code>inp</code>. This is due to the <code>change()</code> event listener. Different Components support different event listeners. For example, the <code>Video</code> Component supports a <code>play()</code> event listener, triggered when a user presses play. See the Docs for the event listeners for each Component.</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#multiple-data-flows","title":"Multiple Data Flows","text":"<p>A Blocks app is not limited to a single data flow the way Interfaces are. Take a look at the demo below:</p> <p>$code_reversible_flow $demo_reversible_flow</p> <p>Note that <code>num1</code> can act as input to <code>num2</code>, and also vice-versa! As your apps get more complex, you will have many data flows connecting various Components.</p> <p>Here's an example of a \"multi-step\" demo, where the output of one model (a speech-to-text model) gets fed into the next model (a sentiment classifier).</p> <p>$code_blocks_speech_text_sentiment $demo_blocks_speech_text_sentiment</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#function-input-list-vs-dict","title":"Function Input List vs Dict","text":"<p>The event listeners you've seen so far have a single input component. If you'd like to have multiple input components pass data to the function, you have two options on how the function can accept input component values:</p> <ol> <li>as a list of arguments, or</li> <li>as a single dictionary of values, keyed by the component</li> </ol> <p>Let's see an example of each: $code_calculator_list_and_dict</p> <p>Both <code>add()</code> and <code>sub()</code> take <code>a</code> and <code>b</code> as inputs. However, the syntax is different between these listeners.</p> <ol> <li>To the <code>add_btn</code> listener, we pass the inputs as a list. The function <code>add()</code> takes each of these inputs as arguments. The value of <code>a</code> maps to the argument <code>num1</code>, and the value of <code>b</code> maps to the argument <code>num2</code>.</li> <li>To the <code>sub_btn</code> listener, we pass the inputs as a set (note the curly brackets!). The function <code>sub()</code> takes a single dictionary argument <code>data</code>, where the keys are the input components, and the values are the values of those components.</li> </ol> <p>It is a matter of preference which syntax you prefer! For functions with many input components, option 2 may be easier to manage.</p> <p>$demo_calculator_list_and_dict</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#function-return-list-vs-dict","title":"Function Return List vs Dict","text":"<p>Similarly, you may return values for multiple output components either as:</p> <ol> <li>a list of values, or</li> <li>a dictionary keyed by the component</li> </ol> <p>Let's first see an example of (1), where we set the values of two output components by returning two values:</p> <pre><code>with gr.Blocks() as demo:\n    food_box = gr.Number(value=10, label=\"Food Count\")\n    status_box = gr.Textbox()\n    def eat(food):\n        if food &gt; 0:\n            return food - 1, \"full\"\n        else:\n            return 0, \"hungry\"\n    gr.Button(\"EAT\").click(\n        fn=eat,\n        inputs=food_box,\n        outputs=[food_box, status_box]\n    )\n</code></pre> <p>Above, each return statement returns two values corresponding to <code>food_box</code> and <code>status_box</code>, respectively.</p> <p>Instead of returning a list of values corresponding to each output component in order, you can also return a dictionary, with the key corresponding to the output component and the value as the new value. This also allows you to skip updating some output components.</p> <pre><code>with gr.Blocks() as demo:\n    food_box = gr.Number(value=10, label=\"Food Count\")\n    status_box = gr.Textbox()\n    def eat(food):\n        if food &gt; 0:\n            return {food_box: food - 1, status_box: \"full\"}\n        else:\n            return {status_box: \"hungry\"}\n    gr.Button(\"EAT\").click(\n        fn=eat,\n        inputs=food_box,\n        outputs=[food_box, status_box]\n    )\n</code></pre> <p>Notice how when there is no food, we only update the <code>status_box</code> element. We skipped updating the <code>food_box</code> component.</p> <p>Dictionary returns are helpful when an event listener affects many components on return, or conditionally affects outputs and not others.</p> <p>Keep in mind that with dictionary returns, we still need to specify the possible outputs in the event listener.</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#updating-component-configurations","title":"Updating Component Configurations","text":"<p>The return value of an event listener function is usually the updated value of the corresponding output Component. Sometimes we want to update the configuration of the Component as well, such as the visibility. In this case, we return a new Component, setting the properties we want to change.</p> <p>$code_blocks_essay_simple $demo_blocks_essay_simple</p> <p>See how we can configure the Textbox itself through a new <code>gr.Textbox()</code> method. The <code>value=</code> argument can still be used to update the value along with Component configuration. Any arguments we do not set will use their previous values.</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#examples","title":"Examples","text":"<p>Just like with <code>gr.Interface</code>, you can also add examples for your functions when you are working with <code>gr.Blocks</code>. In this case, instantiate a <code>gr.Examples</code> similar to how you would instantiate any other component. The constructor of <code>gr.Examples</code> takes two required arguments:</p> <ul> <li><code>examples</code>: a nested list of examples, in which the outer list consists of examples and each inner list consists of an input corresponding to each input component</li> <li><code>inputs</code>: the component or list of components that should be populated when the examples are clicked</li> </ul> <p>You can also set <code>cache_examples=True</code> similar to <code>gr.Interface</code>, in which case two additional arguments must be provided:</p> <ul> <li><code>outputs</code>: the component or list of components corresponding to the output of the examples</li> <li><code>fn</code>: the function to run to generate the outputs corresponding to the examples</li> </ul> <p>Here's an example showing how to use <code>gr.Examples</code> in a <code>gr.Blocks</code> app:</p> <p>$code_calculator_blocks</p> <p>Note: In Gradio 4.0 or later, when you click on examples, not only does the value of the input component update to the example value, but the component's configuration also reverts to the properties with which you constructed the component. This ensures that the examples are compatible with the component even if its configuration has been changed. </p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#running-events-consecutively","title":"Running Events Consecutively","text":"<p>You can also run events consecutively by using the <code>then</code> method of an event listener. This will run an event after the previous event has finished running. This is useful for running events that update components in multiple steps.</p> <p>For example, in the chatbot example below, we first update the chatbot with the user message immediately, and then update the chatbot with the computer response after a simulated delay.</p> <p>$code_chatbot_consecutive $demo_chatbot_consecutive</p> <p>The <code>.then()</code> method of an event listener executes the subsequent event regardless of whether the previous event raised any errors. If you'd like to only run subsequent events if the previous event executed successfully, use the <code>.success()</code> method, which takes the same arguments as <code>.then()</code>.</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#running-events-continuously","title":"Running Events Continuously","text":"<p>You can run events on a fixed schedule using the <code>every</code> parameter of the event listener. This will run the event <code>every</code> number of seconds while the client connection is open. If the connection is closed, the event will stop running after the following iteration. Note that this does not take into account the runtime of the event itself. So a function with a 1 second runtime running with <code>every=5</code>, would actually run every 6 seconds.</p> <p>Here is an example of a sine curve that updates every second!</p> <p>$code_sine_curve $demo_sine_curve</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#gathering-event-data","title":"Gathering Event Data","text":"<p>You can gather specific data about an event by adding the associated event data class as a type hint to an argument in the event listener function.</p> <p>For example, event data for <code>.select()</code> can be type hinted by a <code>gradio.SelectData</code> argument. This event is triggered when a user selects some part of the triggering component, and the event data includes information about what the user specifically selected. If a user selected a specific word in a <code>Textbox</code>, a specific image in a <code>Gallery</code>, or a specific cell in a <code>DataFrame</code>, the event data argument would contain information about the specific selection.</p> <p>In the 2 player tic-tac-toe demo below, a user can select a cell in the <code>DataFrame</code> to make a move. The event data argument contains information about the specific cell that was selected. We can first check to see if the cell is empty, and then update the cell with the user's move.</p> <p>$code_tictactoe $demo_tictactoe</p>"},{"location":"03_building-with-blocks/01_blocks-and-event-listeners/#binding-multiple-triggers-to-a-function","title":"Binding Multiple Triggers to a Function","text":"<p>Often times, you may want to bind multiple triggers to the same function. For example, you may want to allow a user to click a submit button, or press enter to submit a form. You can do this using the <code>gr.on</code> method and passing a list of triggers to the <code>trigger</code>.</p> <p>$code_on_listener_basic $demo_on_listener_basic</p> <p>You can use decorator syntax as well:</p> <p>$code_on_listener_decorator</p> <p>You can use <code>gr.on</code> to create \"live\" events by binding to the change event of all components. If you do not specify any triggers, the function will automatically bind to the change event of all input components. </p> <p>$code_on_listener_live $demo_on_listener_live</p> <p>You can follow <code>gr.on</code> with <code>.then</code>, just like any regular event listener. This handy method should save you from having to write a lot of repetitive code!</p>"},{"location":"03_building-with-blocks/02_controlling-layout/","title":"Controlling Layout","text":"<p>By default, Components in Blocks are arranged vertically. Let's take a look at how we can rearrange Components. Under the hood, this layout structure uses the flexbox model of web development.</p>"},{"location":"03_building-with-blocks/02_controlling-layout/#rows","title":"Rows","text":"<p>Elements within a <code>with gr.Row</code> clause will all be displayed horizontally. For example, to display two Buttons side by side:</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        btn1 = gr.Button(\"Button 1\")\n        btn2 = gr.Button(\"Button 2\")\n</code></pre> <p>To make every element in a Row have the same height, use the <code>equal_height</code> argument of the <code>style</code> method.</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row(equal_height=True):\n        textbox = gr.Textbox()\n        btn2 = gr.Button(\"Button 2\")\n</code></pre> <p>The widths of elements in a Row can be controlled via a combination of <code>scale</code> and <code>min_width</code> arguments that are present in every Component.</p> <ul> <li><code>scale</code> is an integer that defines how an element will take up space in a Row. If scale is set to <code>0</code>, and element will not expand to take up space. If scale is set to <code>1</code> or greater, the element well expand. Multiple elements in a row will expand proportional to their scale. Below, <code>btn1</code> will expand twice as much as <code>btn2</code>, while <code>btn0</code> will not expand at all:</li> </ul> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        btn0 = gr.Button(\"Button 0\", scale=0)\n        btn1 = gr.Button(\"Button 1\", scale=1)\n        btn2 = gr.Button(\"Button 2\", scale=2)\n</code></pre> <ul> <li><code>min_width</code> will set the minimum width the element will take. The Row will wrap if there isn't sufficient space to satisfy all <code>min_width</code> values.</li> </ul> <p>Learn more about Rows in the docs.</p>"},{"location":"03_building-with-blocks/02_controlling-layout/#columns-and-nesting","title":"Columns and Nesting","text":"<p>Components within a Column will be placed vertically atop each other. Since the vertical layout is the default layout for Blocks apps anyway, to be useful, Columns are usually nested within Rows. For example:</p> <p>$code_rows_and_columns $demo_rows_and_columns</p> <p>See how the first column has two Textboxes arranged vertically. The second column has an Image and Button arranged vertically. Notice how the relative widths of the two columns is set by the <code>scale</code> parameter. The column with twice the <code>scale</code> value takes up twice the width.</p> <p>Learn more about Columns in the docs.</p>"},{"location":"03_building-with-blocks/02_controlling-layout/#tabs-and-accordions","title":"Tabs and Accordions","text":"<p>You can also create Tabs using the <code>with gr.Tab('tab_name'):</code> clause. Any component created inside of a <code>with gr.Tab('tab_name'):</code> context appears in that tab. Consecutive Tab clauses are grouped together so that a single tab can be selected at one time, and only the components within that Tab's context are shown.</p> <p>For example:</p> <p>$code_blocks_flipper $demo_blocks_flipper</p> <p>Also note the <code>gr.Accordion('label')</code> in this example. The Accordion is a layout that can be toggled open or closed. Like <code>Tabs</code>, it is a layout element that can selectively hide or show content. Any components that are defined inside of a <code>with gr.Accordion('label'):</code> will be hidden or shown when the accordion's toggle icon is clicked.</p> <p>Learn more about Tabs and Accordions in the docs.</p>"},{"location":"03_building-with-blocks/02_controlling-layout/#visibility","title":"Visibility","text":"<p>Both Components and Layout elements have a <code>visible</code> argument that can set initially and also updated. Setting <code>gr.Column(visible=...)</code> on a Column can be used to show or hide a set of Components.</p> <p>$code_blocks_form $demo_blocks_form</p>"},{"location":"03_building-with-blocks/02_controlling-layout/#variable-number-of-outputs","title":"Variable Number of Outputs","text":"<p>By adjusting the visibility of components in a dynamic way, it is possible to create demos with Gradio that support a variable numbers of outputs. Here's a very simple example where the number of output textboxes is controlled by an input slider:</p> <p>$code_variable_outputs $demo_variable_outputs</p>"},{"location":"03_building-with-blocks/02_controlling-layout/#defining-and-rendering-components-separately","title":"Defining and Rendering Components Separately","text":"<p>In some cases, you might want to define components before you actually render them in your UI. For instance, you might want to show an examples section using <code>gr.Examples</code> above the corresponding <code>gr.Textbox</code> input. Since <code>gr.Examples</code> requires as a parameter the input component object, you will need to first define the input component, but then render it later, after you have defined the <code>gr.Examples</code> object.</p> <p>The solution to this is to define the <code>gr.Textbox</code> outside of the <code>gr.Blocks()</code> scope and use the component's <code>.render()</code> method wherever you'd like it placed in the UI.</p> <p>Here's a full code example:</p> <pre><code>input_textbox = gr.Textbox()\n\nwith gr.Blocks() as demo:\n    gr.Examples([\"hello\", \"bonjour\", \"merhaba\"], input_textbox)\n    input_textbox.render()\n</code></pre>"},{"location":"03_building-with-blocks/03_state-in-blocks/","title":"State in Blocks","text":"<p>We covered State in Interfaces, this guide takes a look at state in Blocks, which works mostly the same.</p>"},{"location":"03_building-with-blocks/03_state-in-blocks/#global-state","title":"Global State","text":"<p>Global state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.</p>"},{"location":"03_building-with-blocks/03_state-in-blocks/#session-state","title":"Session State","text":"<p>Gradio supports session state, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is not shared between different users of your model. To store data in a session state, you need to do three things:</p> <ol> <li>Create a <code>gr.State()</code> object. If there is a default value to this stateful object, pass that into the constructor.</li> <li>In the event listener, put the <code>State</code> object as an input and output.</li> <li>In the event listener function, add the variable to the input parameters and the return value.</li> </ol> <p>Let's take a look at a game of hangman.</p> <p>$code_hangman $demo_hangman</p> <p>Let's see how we do each of the 3 steps listed above in this game:</p> <ol> <li>We store the used letters in <code>used_letters_var</code>. In the constructor of <code>State</code>, we set the initial value of this to <code>[]</code>, an empty list.</li> <li>In <code>btn.click()</code>, we have a reference to <code>used_letters_var</code> in both the inputs and outputs.</li> <li>In <code>guess_letter</code>, we pass the value of this <code>State</code> to <code>used_letters</code>, and then return an updated value of this <code>State</code> in the return statement.</li> </ol> <p>With more complex apps, you will likely have many State variables storing session state in a single Blocks app.</p> <p>Learn more about <code>State</code> in the docs.</p>"},{"location":"03_building-with-blocks/04_custom-CSS-and-JS/","title":"Custom JS and CSS","text":"<p>This guide covers how to style Blocks with more flexibility, as well as adding Javascript code to event listeners.</p> <p>Warning: The use of query selectors in custom JS and CSS is not guaranteed to work across Gradio versions as the Gradio HTML DOM may change. We recommend using query selectors sparingly.</p>"},{"location":"03_building-with-blocks/04_custom-CSS-and-JS/#custom-css","title":"Custom CSS","text":"<p>Gradio themes are the easiest way to customize the look and feel of your app. You can choose from a variety of themes, or create your own. To do so, pass the <code>theme=</code> kwarg to the <code>Blocks</code> constructor. For example:</p> <pre><code>with gr.Blocks(theme=gr.themes.Glass()):\n    ...\n</code></pre> <p>Gradio comes with a set of prebuilt themes which you can load from <code>gr.themes.*</code>. You can extend these themes or create your own themes from scratch - see the Theming guide for more details.</p> <p>For additional styling ability, you can pass any CSS to your app using the <code>css=</code> kwarg. You can either the filepath to a CSS file, or a string of CSS code.</p> <p>The base class for the Gradio app is <code>gradio-container</code>, so here's an example that changes the background color of the Gradio app:</p> <pre><code>with gr.Blocks(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n</code></pre> <p>If you'd like to reference external files in your css, preface the file path (which can be a relative or absolute path) with <code>\"file=\"</code>, for example:</p> <pre><code>with gr.Blocks(css=\".gradio-container {background: url('file=clouds.jpg')}\") as demo:\n    ...\n</code></pre> <p>Note: By default, files in the host machine are not accessible to users running the Gradio app. As a result, you should make sure that any referenced files (such as <code>clouds.jpg</code> here) are either URLs or allowed via the <code>allow_list</code> parameter in <code>launch()</code>. Read more in our section on Security and File Access.</p>"},{"location":"03_building-with-blocks/04_custom-CSS-and-JS/#the-elem_id-and-elem_classes-arguments","title":"The <code>elem_id</code> and <code>elem_classes</code> Arguments","text":"<p>You can <code>elem_id</code> to add an HTML element <code>id</code> to any component, and <code>elem_classes</code> to add a class or list of classes. This will allow you to select elements more easily with CSS. This approach is also more likely to be stable across Gradio versions as built-in class names or ids may change (however, as mentioned in the warning above, we cannot guarantee complete compatibility between Gradio versions if you use custom CSS as the DOM elements may themselves change).</p> <pre><code>css = \"\"\"\n#warning {background-color: #FFCCCB}\n.feedback textarea {font-size: 24px !important}\n\"\"\"\n\nwith gr.Blocks(css=css) as demo:\n    box1 = gr.Textbox(value=\"Good Job\", elem_classes=\"feedback\")\n    box2 = gr.Textbox(value=\"Failure\", elem_id=\"warning\", elem_classes=\"feedback\")\n</code></pre> <p>The CSS <code>#warning</code> ruleset will only target the second Textbox, while the <code>.feedback</code> ruleset will target both. Note that when targeting classes, you might need to put the <code>!important</code> selector to override the default Gradio styles.</p>"},{"location":"03_building-with-blocks/04_custom-CSS-and-JS/#custom-js","title":"Custom JS","text":"<p>Event listeners have a <code>_js</code> argument that can take a Javascript function as a string and treat it just like a Python event listener function. You can pass both a Javascript function and a Python function (in which case the Javascript function is run first) or only Javascript (and set the Python <code>fn</code> to <code>None</code>). Take a look at the code below:</p> <p>$code_blocks_js_methods $demo_blocks_js_methods</p>"},{"location":"03_building-with-blocks/05_using-blocks-like-functions/","title":"Using Gradio Blocks Like Functions","text":"<p>Tags: TRANSLATION, HUB, SPACES</p> <p>Prerequisite: This Guide builds on the Blocks Introduction. Make sure to read that guide first.</p>"},{"location":"03_building-with-blocks/05_using-blocks-like-functions/#introduction","title":"Introduction","text":"<p>Did you know that apart from being a full-stack machine learning demo, a Gradio Blocks app is also a regular-old python function!?</p> <p>This means that if you have a gradio Blocks (or Interface) app called <code>demo</code>, you can use <code>demo</code> like you would any python function.</p> <p>So doing something like <code>output = demo(\"Hello\", \"friend\")</code> will run the first event defined in <code>demo</code> on the inputs \"Hello\" and \"friend\" and store it in the variable <code>output</code>.</p> <p>If I put you to sleep \ud83e\udd71, please bear with me! By using apps like functions, you can seamlessly compose Gradio apps. The following section will show how.</p>"},{"location":"03_building-with-blocks/05_using-blocks-like-functions/#treating-blocks-like-functions","title":"Treating Blocks like functions","text":"<p>Let's say we have the following demo that translates english text to german text.</p> <p>$code_english_translator</p> <p>I already went ahead and hosted it in Hugging Face spaces at gradio/english_translator.</p> <p>You can see the demo below as well:</p> <p>$demo_english_translator</p> <p>Now, let's say you have an app that generates english text, but you wanted to additionally generate german text.</p> <p>You could either:</p> <ol> <li> <p>Copy the source code of my english-to-german translation and paste it in your app.</p> </li> <li> <p>Load my english-to-german translation in your app and treat it like a normal python function.</p> </li> </ol> <p>Option 1 technically always works, but it often introduces unwanted complexity.</p> <p>Option 2 lets you borrow the functionality you want without tightly coupling our apps.</p> <p>All you have to do is call the <code>Blocks.load</code> class method in your source file. After that, you can use my translation app like a regular python function!</p> <p>The following code snippet and demo shows how to use <code>Blocks.load</code>.</p> <p>Note that the variable <code>english_translator</code> is my english to german app, but its used in <code>generate_text</code> like a regular function.</p> <p>$code_generate_english_german</p> <p>$demo_generate_english_german</p>"},{"location":"03_building-with-blocks/05_using-blocks-like-functions/#how-to-control-which-function-in-the-app-to-use","title":"How to control which function in the app to use","text":"<p>If the app you are loading defines more than one function, you can specify which function to use with the <code>fn_index</code> and <code>api_name</code> parameters.</p> <p>In the code for our english to german demo, you'll see the following line:</p> <pre><code>translate_btn.click(translate, inputs=english, outputs=german, api_name=\"translate-to-german\")\n</code></pre> <p>The <code>api_name</code> gives this function a unique name in our app. You can use this name to tell gradio which function in the upstream space you want to use:</p> <pre><code>english_generator(text, api_name=\"translate-to-german\")[0][\"generated_text\"]\n</code></pre> <p>You can also use the <code>fn_index</code> parameter. Imagine my app also defined an english to spanish translation function. In order to use it in our text generation app, we would use the following code:</p> <pre><code>english_generator(text, fn_index=1)[0][\"generated_text\"]\n</code></pre> <p>Functions in gradio spaces are zero-indexed, so since the spanish translator would be the second function in my space, you would use index 1.</p>"},{"location":"03_building-with-blocks/05_using-blocks-like-functions/#parting-remarks","title":"Parting Remarks","text":"<p>We showed how treating a Blocks app like a regular python helps you compose functionality across different apps. Any Blocks app can be treated like a function, but a powerful pattern is to <code>load</code> an app hosted on Hugging Face Spaces prior to treating it like a function in your own app. You can also load models hosted on the Hugging Face Model Hub - see the Using Hugging Face Integrations guide for an example.</p>"},{"location":"03_building-with-blocks/05_using-blocks-like-functions/#happy-building","title":"Happy building! \u2692\ufe0f","text":""},{"location":"04_chatbots/01_creating-a-chatbot-fast/","title":"How to Create a Chatbot with Gradio","text":"<p>Tags: NLP, TEXT, CHAT</p>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#introduction","title":"Introduction","text":"<p>Chatbots are a popular application of large language models. Using <code>gradio</code>, you can easily build a demo of your chatbot model and share that with your users, or try it yourself using an intuitive chatbot UI.</p> <p>This tutorial uses <code>gr.ChatInterface()</code>, which is a high-level abstraction that allows you to create your chatbot UI fast, often with a single line of code. The chatbot interface that we create will look something like this:</p> <p>$demo_chatinterface_streaming_echo</p> <p>We'll start with a couple of simple examples, and then show how to use <code>gr.ChatInterface()</code> with real language models from several popular APIs and libraries, including <code>langchain</code>, <code>openai</code>, and Hugging Face.</p> <p>Prerequisites: please make sure you are using the latest version version of Gradio:</p> <pre><code>$ pip install --upgrade gradio\n</code></pre>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#defining-a-chat-function","title":"Defining a chat function","text":"<p>When working with <code>gr.ChatInterface()</code>, the first thing you should do is define your chat function. Your chat function should take two arguments: <code>message</code> and then <code>history</code> (the arguments can be named anything, but must be in this order).</p> <ul> <li><code>message</code>: a <code>str</code> representing the user's input.</li> <li><code>history</code>: a <code>list</code> of <code>list</code> representing the conversations up until that point. Each inner list consists of two <code>str</code> representing a pair: <code>[user input, bot response]</code>.</li> </ul> <p>Your function should return a single string response, which is the bot's response to the particular user input <code>message</code>. Your function can take into account the <code>history</code> of messages, as well as the current message.</p> <p>Let's take a look at a few examples.</p>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#example-a-chatbot-that-responds-yes-or-no","title":"Example: a chatbot that responds yes or no","text":"<p>Let's write a chat function that responds <code>Yes</code> or <code>No</code> randomly.</p> <p>Here's our chat function:</p> <pre><code>import random\n\ndef random_response(message, history):\n    return random.choice([\"Yes\", \"No\"])\n</code></pre> <p>Now, we can plug this into <code>gr.ChatInterface()</code> and call the <code>.launch()</code> method to create the web interface:</p> <pre><code>import gradio as gr\n\ngr.ChatInterface(random_response).launch()\n</code></pre> <p>That's it! Here's our running demo, try it out:</p> <p>$demo_chatinterface_random_response</p>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#another-example-using-the-users-input-and-history","title":"Another example using the user's input and history","text":"<p>Of course, the previous example was very simplistic, it didn't even take user input or the previous history into account! Here's another simple example showing how to incorporate a user's input as well as the history.</p> <pre><code>import random\nimport gradio as gr\n\ndef alternatingly_agree(message, history):\n    if len(history) % 2 == 0:\n        return f\"Yes, I do think that '{message}'\"\n    else:\n        return \"I don't think so\"\n\ngr.ChatInterface(alternatingly_agree).launch()\n</code></pre>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#streaming-chatbots","title":"Streaming chatbots","text":"<p>If in your chat function, you use <code>yield</code> to generate a sequence of responses, you'll end up with a streaming chatbot. It's that simple!</p> <pre><code>import time\nimport gradio as gr\n\ndef slow_echo(message, history):\n    for i in range(len(message)):\n        time.sleep(0.3)\n        yield \"You typed: \" + message[: i+1]\n\ngr.ChatInterface(slow_echo).queue().launch()\n</code></pre> <p>Notice that we've enabled queuing, which is required to use generator functions. While the response is streaming, the \"Submit\" button turns into a \"Stop\" button that can be used to stop the generator function. You can customize the appearance and behavior of the \"Stop\" button using the <code>stop_btn</code> parameter.</p>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#customizing-your-chatbot","title":"Customizing your chatbot","text":"<p>If you're familiar with Gradio's <code>Interface</code> class, the <code>gr.ChatInterface</code> includes many of the same arguments that you can use to customize the look and feel of your Chatbot. For example, you can:</p> <ul> <li>add a title and description above your chatbot using <code>title</code> and <code>description</code> arguments.</li> <li>add a theme or custom css using <code>theme</code> and <code>css</code> arguments respectively.</li> <li>add <code>examples</code> and even enable <code>cache_examples</code>, which make it easier for users to try it out .</li> <li>You can change the text or disable each of the buttons that appear in the chatbot interface: <code>submit_btn</code>, <code>retry_btn</code>, <code>undo_btn</code>, <code>clear_btn</code>.</li> </ul> <p>If you want to customize the <code>gr.Chatbot</code> or <code>gr.Textbox</code> that compose the <code>ChatInterface</code>, then you can pass in your own chatbot or textbox as well. Here's an example of how we can use these parameters:</p> <pre><code>import gradio as gr\n\ndef yes_man(message, history):\n    if message.endswith(\"?\"):\n        return \"Yes\"\n    else:\n        return \"Ask me anything!\"\n\ngr.ChatInterface(\n    yes_man,\n    chatbot=gr.Chatbot(height=300),\n    textbox=gr.Textbox(placeholder=\"Ask me a yes or no question\", container=False, scale=7),\n    title=\"Yes Man\",\n    description=\"Ask Yes Man any question\",\n    theme=\"soft\",\n    examples=[\"Hello\", \"Am I cool?\", \"Are tomatoes vegetables?\"],\n    cache_examples=True,\n    retry_btn=None,\n    undo_btn=\"Delete Previous\",\n    clear_btn=\"Clear\",\n).launch()\n</code></pre>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#additional-inputs","title":"Additional Inputs","text":"<p>You may want to add additional parameters to your chatbot and expose them to your users through the Chatbot UI. For example, suppose you want to add a textbox for a system prompt, or a slider that sets the number of tokens in the chatbot's response. The <code>ChatInterface</code> class supports an <code>additional_inputs</code> parameter which can be used to add additional input components.</p> <p>The <code>additional_inputs</code> parameters accepts a component or a list of components. You can pass the component instances directly, or use their string shortcuts (e.g. <code>\"textbox\"</code> instead of <code>gr.Textbox()</code>). If you pass in component instances, and they have not already been rendered, then the components will appear underneath the chatbot (and any examples) within a <code>gr.Accordion()</code>. You can set the label of this accordion using the <code>additional_inputs_accordion_name</code> parameter.</p> <p>Here's a complete example:</p> <p>$code_chatinterface_system_prompt</p> <p>If the components you pass into the <code>additional_inputs</code> have already been rendered in a parent <code>gr.Blocks()</code>, then they will not be re-rendered in the accordion. This provides flexibility in deciding where to lay out the input components. In the example below, we position the <code>gr.Textbox()</code> on top of the Chatbot UI, while keeping the slider underneath.</p> <pre><code>import gradio as gr\nimport time\n\ndef echo(message, history, system_prompt, tokens):\n    response = f\"System prompt: {system_prompt}\\n Message: {message}.\"\n    for i in range(min(len(response), int(tokens))):\n        time.sleep(0.05)\n        yield response[: i+1]\n\nwith gr.Blocks() as demo:\n    system_prompt = gr.Textbox(\"You are helpful AI.\", label=\"System Prompt\")\n    slider = gr.Slider(10, 100, render=False)\n\n    gr.ChatInterface(\n        echo, additional_inputs=[system_prompt, slider]\n    )\n\ndemo.queue().launch()\n</code></pre> <p>If you need to create something even more custom, then its best to construct the chatbot UI using the low-level <code>gr.Blocks()</code> API. We have a dedicated guide for that here.</p>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#using-your-chatbot-via-an-api","title":"Using your chatbot via an API","text":"<p>Once you've built your Gradio chatbot and are hosting it on Hugging Face Spaces or somewhere else, then you can query it with a simple API at the <code>/chat</code> endpoint. The endpoint just expects the user's message (and potentially additional inputs if you have set any using the <code>additional_inputs</code> parameter), and will return the response, internally keeping track of the messages sent so far.</p> <p></p> <p>To use the endpoint, you should use either the Gradio Python Client or the Gradio JS client.</p>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#a-langchain-example","title":"A <code>langchain</code> example","text":"<p>Now, let's actually use the <code>gr.ChatInterface</code> with some real large language models. We'll start by using <code>langchain</code> on top of <code>openai</code> to build a general-purpose streaming chatbot application in 19 lines of code. You'll need to have an OpenAI key for this example (keep reading for the free, open-source equivalent!)</p> <pre><code>from langchain.chat_models import ChatOpenAI\nfrom langchain.schema import AIMessage, HumanMessage\nimport openai\nimport gradio as gr\n\nos.envrion[\"OPENAI_API_KEY\"] = \"sk-...\"  # Replace with your key\n\nllm = ChatOpenAI(temperature=1.0, model='gpt-3.5-turbo-0613')\n\ndef predict(message, history):\n    history_langchain_format = []\n    for human, ai in history:\n        history_langchain_format.append(HumanMessage(content=human))\n        history_langchain_format.append(AIMessage(content=ai))\n    history_langchain_format.append(HumanMessage(content=message))\n    gpt_response = llm(history_langchain_format)\n    return gpt_response.content\n\ngr.ChatInterface(predict).launch()\n</code></pre>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#a-streaming-example-using-openai","title":"A streaming example using <code>openai</code>","text":"<p>Of course, we could also use the <code>openai</code> library directy. Here a similar example, but this time with streaming results as well:</p> <pre><code>import openai\nimport gradio as gr\n\nopenai.api_key = \"sk-...\"  # Replace with your key\n\ndef predict(message, history):\n    history_openai_format = []\n    for human, assistant in history:\n        history_openai_format.append({\"role\": \"user\", \"content\": human })\n        history_openai_format.append({\"role\": \"assistant\", \"content\":assistant})\n    history_openai_format.append({\"role\": \"user\", \"content\": message})\n\n    response = openai.ChatCompletion.create(\n        model='gpt-3.5-turbo',\n        messages= history_openai_format,\n        temperature=1.0,\n        stream=True\n    )\n\n    partial_message = \"\"\n    for chunk in response:\n        if len(chunk['choices'][0]['delta']) != 0:\n            partial_message = partial_message + chunk['choices'][0]['delta']['content']\n            yield partial_message\n\ngr.ChatInterface(predict).queue().launch()\n</code></pre>"},{"location":"04_chatbots/01_creating-a-chatbot-fast/#example-using-a-local-open-source-llm-with-hugging-face","title":"Example using a local, open-source LLM with Hugging Face","text":"<p>Of course, in many cases you want to run a chatbot locally. Here's the equivalent example using Together's RedePajama model, from Hugging Face (this requires you to have a GPU with CUDA).</p> <pre><code>import gradio as gr\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, StoppingCriteria, StoppingCriteriaList, TextIteratorStreamer\nfrom threading import Thread\n\ntokenizer = AutoTokenizer.from_pretrained(\"togethercomputer/RedPajama-INCITE-Chat-3B-v1\")\nmodel = AutoModelForCausalLM.from_pretrained(\"togethercomputer/RedPajama-INCITE-Chat-3B-v1\", torch_dtype=torch.float16)\nmodel = model.to('cuda:0')\n\nclass StopOnTokens(StoppingCriteria):\n    def __call__(self, input_ids: torch.LongTensor, scores: torch.FloatTensor, **kwargs) -&gt; bool:\n        stop_ids = [29, 0]\n        for stop_id in stop_ids:\n            if input_ids[0][-1] == stop_id:\n                return True\n        return False\n\ndef predict(message, history):\n\n    history_transformer_format = history + [[message, \"\"]]\n    stop = StopOnTokens()\n\n    messages = \"\".join([\"\".join([\"\\n&lt;human&gt;:\"+item[0], \"\\n&lt;bot&gt;:\"+item[1]])  #curr_system_message +\n                for item in history_transformer_format])\n\n    model_inputs = tokenizer([messages], return_tensors=\"pt\").to(\"cuda\")\n    streamer = TextIteratorStreamer(tokenizer, timeout=10., skip_prompt=True, skip_special_tokens=True)\n    generate_kwargs = dict(\n        model_inputs,\n        streamer=streamer,\n        max_new_tokens=1024,\n        do_sample=True,\n        top_p=0.95,\n        top_k=1000,\n        temperature=1.0,\n        num_beams=1,\n        stopping_criteria=StoppingCriteriaList([stop])\n        )\n    t = Thread(target=model.generate, kwargs=generate_kwargs)\n    t.start()\n\n    partial_message  = \"\"\n    for new_token in streamer:\n        if new_token != '&lt;':\n            partial_message += new_token\n            yield partial_message\n\n\ngr.ChatInterface(predict).queue().launch()\n</code></pre> <p>With those examples, you should be all set to create your own Gradio Chatbot demos soon! For building even more custom Chatbot applications, check out a dedicated guide using the low-level <code>gr.Blocks()</code> API.</p>"},{"location":"04_chatbots/02_creating-a-custom-chatbot-with-blocks/","title":"How to Create a Custom Chatbot with Gradio Blocks","text":"<p>Tags: NLP, TEXT, CHAT Related spaces: https://huggingface.co/spaces/gradio/chatbot_streaming, https://huggingface.co/spaces/project-baize/Baize-7B,</p>"},{"location":"04_chatbots/02_creating-a-custom-chatbot-with-blocks/#introduction","title":"Introduction","text":"<p>Important Note: if you are getting started, we recommend using the <code>gr.ChatInterface</code> to create chatbots -- its a high-level abstraction that makes it possible to create beautiful chatbot applications fast, often with a single line of code. Read more about it here.</p> <p>This tutorial will show how to make chatbot UIs from scratch with Gradio's low-level Blocks API. This will give you full control over your Chatbot UI. You'll start by first creating a a simple chatbot to display text, a second one to stream text responses, and finally a chatbot that can handle media files as well. The chatbot interface that we create will look something like this:</p> <p>$demo_chatbot_streaming</p> <p>Prerequisite: We'll be using the <code>gradio.Blocks</code> class to build our Chatbot demo. You can read the Guide to Blocks first if you are not already familiar with it. Also please make sure you are using the latest version version of Gradio: <code>pip install --upgrade gradio</code>.</p>"},{"location":"04_chatbots/02_creating-a-custom-chatbot-with-blocks/#a-simple-chatbot-demo","title":"A Simple Chatbot Demo","text":"<p>Let's start with recreating the simple demo above. As you may have noticed, our bot simply randomly responds \"How are you?\", \"I love you\", or \"I'm very hungry\" to any input. Here's the code to create this with Gradio:</p> <p>$code_chatbot_simple</p> <p>There are three Gradio components here:</p> <ul> <li>A <code>Chatbot</code>, whose value stores the entire history of the conversation, as a list of response pairs between the user and bot.</li> <li>A <code>Textbox</code> where the user can type their message, and then hit enter/submit to trigger the chatbot response</li> <li>A <code>ClearButton</code> button to clear the Textbox and entire Chatbot history</li> </ul> <p>We have a single function, <code>respond()</code>, which takes in the entire history of the chatbot, appends a random message, waits 1 second, and then returns the updated chat history. The <code>respond()</code> function also clears the textbox when it returns.</p> <p>Of course, in practice, you would replace <code>respond()</code> with your own more complex function, which might call a pretrained model or an API, to generate a response.</p> <p>$demo_chatbot_simple</p>"},{"location":"04_chatbots/02_creating-a-custom-chatbot-with-blocks/#add-streaming-to-your-chatbot","title":"Add Streaming to your Chatbot","text":"<p>There are several ways we can improve the user experience of the chatbot above. First, we can stream responses so the user doesn't have to wait as long for a message to be generated. Second, we can have the user message appear immediately in the chat history, while the chatbot's response is being generated. Here's the code to achieve that:</p> <p>$code_chatbot_streaming</p> <p>You'll notice that when a user submits their message, we now chain three event events with <code>.then()</code>:</p> <ol> <li> <p>The first method <code>user()</code> updates the chatbot with the user message and clears the input field. This method also makes the input field non interactive so that the user can't send another message while the chatbot is responding. Because we want this to happen instantly, we set <code>queue=False</code>, which would skip any queue had it been enabled. The chatbot's history is appended with <code>(user_message, None)</code>, the <code>None</code> signifying that the bot has not responded.</p> </li> <li> <p>The second method, <code>bot()</code> updates the chatbot history with the bot's response. Instead of creating a new message, we just replace the previously-created <code>None</code> message with the bot's response. Finally, we construct the message character by character and <code>yield</code> the intermediate outputs as they are being constructed. Gradio automatically turns any function with the <code>yield</code> keyword into a streaming output interface.</p> </li> <li> <p>The third method makes the input field interactive again so that users can send another message to the bot.</p> </li> </ol> <p>Of course, in practice, you would replace <code>bot()</code> with your own more complex function, which might call a pretrained model or an API, to generate a response.</p> <p>Finally, we enable queuing by running <code>demo.queue()</code>, which is required for streaming intermediate outputs. You can try the improved chatbot by scrolling to the demo at the top of this page.</p>"},{"location":"04_chatbots/02_creating-a-custom-chatbot-with-blocks/#liking-disliking-chat-messages","title":"Liking / Disliking Chat Messages","text":"<p>Once you've created your <code>gr.Chatbot</code>, you can add the ability for users to like or dislike messages. This can be useful if you would like users to vote on a bot's responses or flag inappropriate results. </p> <p>To add this functionality to your Chatbot, simply attach a <code>.like()</code> event to your Chatbot. A chatbot that has the <code>.like()</code> event will automatically feature a thumbs-up icon and a thumbs-down icon next to every bot message. </p> <p>The <code>.like()</code> method requires you to pass in a function that is called when a user clicks on these icons. In your function, you should have an argument whose type is <code>gr.LikeData</code>. Gradio will automatically supply the parameter to this argument with an object that contains information about the liked or disliked message. Here's a simplistic example of how you can have users like or dislike chat messages:</p> <pre><code>import gradio as gr\n\ndef greet(history, input):\n    return history + [(input, \"Hello, \" + input)]\n\ndef vote(data: gr.LikeData):\n    if data.liked:\n        print(\"You upvoted this response: \" + data.value)\n    else:\n        print(\"You downvoted this response: \" + data.value)\n\n\nwith gr.Blocks() as demo:\n    chatbot = gr.Chatbot()\n    textbox = gr.Textbox()\n    textbox.submit(greet, [chatbot, textbox], [chatbot])\n    chatbot.like(vote, None, None)  # Adding this line causes the like/dislike icons to appear in your chatbot\n\ndemo.launch()\n</code></pre>"},{"location":"04_chatbots/02_creating-a-custom-chatbot-with-blocks/#adding-markdown-images-audio-or-videos","title":"Adding Markdown, Images, Audio, or Videos","text":"<p>The <code>gr.Chatbot</code> component supports a subset of markdown including bold, italics, and code. For example, we could write a function that responds to a user's message, with a bold That's cool!, like this:</p> <pre><code>def bot(history):\n    response = \"**That's cool!**\"\n    history[-1][1] = response\n    return history\n</code></pre> <p>In addition, it can handle media files, such as images, audio, and video. To pass in a media file, we must pass in the file as a tuple of two strings, like this: <code>(filepath, alt_text)</code>. The <code>alt_text</code> is optional, so you can also just pass in a tuple with a single element <code>(filepath,)</code>, like this:</p> <pre><code>def add_file(history, file):\n    history = history + [((file.name,), None)]\n    return history\n</code></pre> <p>Putting this together, we can create a multimodal chatbot with a textbox for a user to submit text and an file upload button to submit images / audio / video files. The rest of the code looks pretty much the same as before:</p> <p>$code_chatbot_multimodal $demo_chatbot_multimodal</p> <p>And you're done! That's all the code you need to build an interface for your chatbot model. Finally, we'll end our Guide with some links to Chatbots that are running on Spaces so that you can get an idea of what else is possible:</p> <ul> <li>project-baize/Baize-7B: A stylized chatbot that allows you to stop generation as well as regenerate responses.</li> <li>MAGAer13/mPLUG-Owl: A multimodal chatbot that allows you to upvote and downvote responses.</li> </ul>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/","title":"\ud83d\ude80 Creating Discord Bots from Gradio Apps \ud83d\ude80","text":"<p>Tags: NLP, TEXT, CHAT</p> <p>We're excited to announce that Gradio can now automatically create a discord bot from a deployed app! \ud83e\udd16</p> <p>Discord is a popular communication platform that allows users to chat and interact with each other in real-time. By turning your Gradio app into a Discord bot, you can bring cutting edge AI to your discord server and give your community a whole new way to interact.</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#how-does-it-work","title":"\ud83d\udcbb How does it work? \ud83d\udcbb","text":"<p>With <code>gradio_client</code> version <code>0.3.0</code>, any gradio <code>ChatInterface</code> app on the internet can automatically be deployed as a discord bot via the <code>deploy_discord</code> method of the <code>Client</code> class.</p> <p>Technically, any gradio app that exposes an api route that takes in a single string and outputs a single string can be deployed to discord. In this guide, we will focus on <code>gr.ChatInterface</code> as those apps naturally lend themselves to discord's chat functionality.</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#requirements","title":"\ud83d\udee0\ufe0f Requirements \ud83d\udee0\ufe0f","text":"<p>Make sure you have the latest <code>gradio_client</code> and <code>gradio</code> versions installed.</p> <pre><code>pip install gradio_client&gt;=0.3.0 gradio&gt;=3.38.0\n</code></pre> <p>Also, make sure you have a Hugging Face account and a write access token.</p> <p>\u26a0\ufe0f Tip \u26a0\ufe0f: Make sure you login to the Hugging Face Hub by running <code>huggingface-cli login</code>. This will let you skip passing your token in all subsequent commands in this guide.</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#quickstart","title":"\ud83c\udfc3\u200d\u2640\ufe0f Quickstart \ud83c\udfc3\u200d\u2640\ufe0f","text":""},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#step-1-implementing-our-chatbot","title":"Step 1: Implementing our chatbot","text":"<p>Let's build a very simple Chatbot using <code>ChatInterface</code> that simply repeats the user message. Write the following code into an <code>app.py</code></p> <pre><code>import gradio as gr\n\ndef slow_echo(message, history):\n    return message\n\ndemo = gr.ChatInterface(slow_echo).queue().launch()\n</code></pre>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#step-2-deploying-our-app","title":"Step 2: Deploying our App","text":"<p>In order to create a discord bot for our app, it must be accessible over the internet. In this guide, we will use the <code>gradio deploy</code> command to deploy our chatbot to Hugging Face spaces from the command line. Run the following command.</p> <pre><code>gradio deploy --title echo-chatbot --app-file app.py\n</code></pre> <p>This command will ask you some questions, e.g. requested hardware, requirements, but the default values will suffice for this guide. Note the URL of the space that was created. Mine is https://huggingface.co/spaces/freddyaboulton/echo-chatbot</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#step-3-creating-a-discord-bot","title":"Step 3: Creating a Discord Bot","text":"<p>Turning our space into a discord bot is also a one-liner thanks to the <code>gradio deploy-discord</code>. Run the following command:</p> <pre><code>gradio deploy-discord --src freddyaboulton/echo-chatbot\n</code></pre> <p>\u2757\ufe0f Advanced \u2757\ufe0f: If you already have a discord bot token you can pass it to the <code>deploy-discord</code> command. Don't worry, if you don't have one yet!</p> <pre><code>gradio deploy-discord --src freddyaboulton/echo-chatbot --discord-bot-token &lt;token&gt;\n</code></pre> <p>Note the URL that gets printed out to the console. Mine is https://huggingface.co/spaces/freddyaboulton/echo-chatbot-gradio-discord-bot</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#step-4-getting-a-discord-bot-token","title":"Step 4: Getting a Discord Bot Token","text":"<p>If you didn't have a discord bot token for step 3, go to the URL that got printed in the console and follow the instructions there. Once you obtain a token, run the command again but this time pass in the token:</p> <pre><code>gradio deploy-discord --src freddyaboulton/echo-chatbot --discord-bot-token &lt;token&gt;\n</code></pre>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#step-5-add-the-bot-to-your-server","title":"Step 5: Add the bot to your server","text":"<p>Visit the space of your discord bot. You should see \"Add this bot to your server by clicking this link:\" followed by a URL. Go to that URL and add the bot to your server!</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#step-6-use-your-bot","title":"Step 6: Use your bot!","text":"<p>By default the bot can be called by starting a message with <code>/chat</code>, e.g. <code>/chat &lt;your prompt here&gt;</code>.</p> <p>\u26a0\ufe0f Tip \u26a0\ufe0f: If either of the deployed spaces goes to sleep, the bot will stop working. By default, spaces go to sleep after 48 hours of inactivity. You can upgrade the hardware of your space to prevent it from going to sleep. See this guide for more information.</p> <p></p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#using-the-gradio_clientclient-class","title":"Using the <code>gradio_client.Client</code> Class","text":"<p>You can also create a discord bot from a deployed gradio app with python.</p> <pre><code>import gradio_client as grc\ngrc.Client(\"freddyaboulton/echo-chatbot\").deploy_discord()\n</code></pre>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#using-state-of-the-art-llms","title":"\ud83e\uddbe Using State of The Art LLMs \ud83e\uddbe","text":"<p>We have created an organization on Hugging Face called gradio-discord-bots containing several template spaces that explain how to deploy state of the art LLMs powered by gradio as discord bots.</p> <p>The easiest way to get started is by deploying Meta's Llama 2 LLM with 70 billion parameter. Simply go to this space and follow the instructions.</p> <p>The deployment can be done in one line! \ud83e\udd2f</p> <pre><code>import gradio_client as grc\ngrc.Client(\"ysharma/Explore_llamav2_with_TGI\").deploy_discord(to_id=\"llama2-70b-discord-bot\")\n</code></pre>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#additional-llms","title":"\ud83e\udd9c Additional LLMs \ud83e\udd9c","text":"<p>In addition to Meta's 70 billion Llama 2 model, we have prepared template spaces for the following LLMs and deployment options:</p> <ul> <li>gpt-3.5-turbo, powered by openai. Required OpenAI key.</li> <li>falcon-7b-instruct powered by Hugging Face Inference Endpoints.</li> <li>Llama-2-13b-chat-hf powered by Hugging Face Inference Endpoints.</li> <li>Llama-2-13b-chat-hf powered by Hugging Face transformers.</li> </ul> <p>To deploy any of these models to discord, simply follow the instructions in the linked space for that model.</p>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#deploying-non-chat-gradio-apps-to-discord","title":"Deploying non-chat gradio apps to discord","text":"<p>As mentioned above, you don't need a <code>gr.ChatInterface</code> if you want to deploy your gradio app to discord. All that's needed is an api route that takes in a single string and outputs a single string.</p> <p>The following code will deploy a space that translates english to german as a discord bot.</p> <pre><code>import gradio_client as grc\nclient = grc.Client(\"freddyaboulton/english-to-german\")\nclient.deploy_discord(api_names=['german'])\n</code></pre>"},{"location":"04_chatbots/03_creating-a-discord-bot-from-a-gradio-app/#conclusion","title":"Conclusion","text":"<p>That's it for this guide! We're really excited about this feature. Tag @Gradio on twitter and show us how your discord community interacts with your discord bots.</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/","title":"Custom Components in 5 minutes","text":"<p>Gradio 4.0 introduces Custom Components -- the ability for developers to create their own custom components and use them in Gradio apps. You can publish your components as Python packages so that other users can use them as well. Users will be able to use all of Gradio's existing functions, such as <code>gr.Blocks</code>, <code>gr.Interface</code>, API usage, themes, etc. with Custom Components. This guide will cover how to get started making custom components.</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#installation","title":"Installation","text":"<p>You will need to have:</p> <ul> <li>Python 3.8+ (install here)</li> <li>Node.js v16.14+ (install here)</li> <li>npm 9+ (install here)</li> <li>Gradio 4.0+ (<code>pip install --upgrade gradio</code>)</li> </ul>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#the-workflow","title":"The Workflow","text":"<p>The Custom Components workflow consists of 4 steps: create, dev, build, and publish.</p> <ol> <li>create: creates a template for you to start developing a custom component.</li> <li>dev: launches a development server with a sample app &amp; hot reloading allowing you to easily develop your custom component</li> <li>build: builds a python package containing to your custom component's Python and JavaScript code -- this makes things official!</li> <li>publish: uploads your package to PyPi and/or a sample app to HuggingFace Spaces.</li> </ol> <p>Each of these steps is done via the Custom Component CLI. You can invoke it with <code>gradio cc</code> or <code>gradio component</code></p> <p>Tip: Run <code>gradio cc --help</code> to get a help menu of all available commands. You can also append <code>--help</code> to any command name to bring up a help page for that command, e.g. <code>gradio cc create --help</code>.</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#1-create","title":"1. create","text":"<p>Bootstrap a new template by running the following in any working directory:</p> <pre><code>gradio cc create MyComponent --template SimpleTextbox\n</code></pre> <p>Instead of <code>MyComponent</code>, give your component any name.</p> <p>Instead of <code>SimpleTextbox</code>, you can use any Gradio component as a template. <code>SimpleTextbox</code> is actually a special component that a stripped-down version of the <code>Textbox</code> component that makes it particularly useful when creating your first custom component. Some other components that are good if you are starting out: <code>SimpleDropdown</code> or <code>File</code>.</p> <p>Tip: Run <code>gradio cc show</code> to get a list of available component templates.</p> <p>The <code>create</code> command will:</p> <ol> <li> <p>Create a directory with your component's name in lowercase with the following structure: <pre><code>- backend/ &lt;- The python code for your custom component\n- frontend/ &lt;- The javascript code for your custom component\n- demo/ &lt;- A sample app using your custom component. Modify this to develop your component!\n- pyproject.toml &lt;- Used to build the package and specify package metadata.\n</code></pre></p> </li> <li> <p>Install the component in development mode</p> </li> </ol> <p>Each of the directories will have the code you need to get started developing!</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#2-dev","title":"2. dev","text":"<p>Once you have created your new component, you can start a development server by <code>entering the directory</code> and running</p> <pre><code>gradio cc dev\n</code></pre> <p>You'll see several lines that are printed to the console. The most important one is the one that says:</p> <p>Frontend Server (Go here): http://localhost:7861/</p> <p>The port number might be different for you. Click on that link to launch the demo app in hot reload mode. Now, you can start making changes to the backend and frontend you'll see the results reflected live in the sample app! We'll go through a real example in a later guide.</p> <p>Tip: You don't have to run dev mode from your custom component directory. The first argument to <code>dev</code> mode is the path to the directory. By default it uses the current directory.</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#3-build","title":"3. build","text":"<p>Once you are satisfied with your custom component's implementation, you can <code>build</code> it to use it outside of the development server.</p> <p>From your component directory, run:</p> <pre><code>gradio cc build\n</code></pre> <p>This will create a <code>tar.gz</code> and <code>.whl</code> file in a <code>dist/</code> subdirectory. If you or anyone installs that <code>.whl</code> file (<code>pip install &lt;path-to-whl&gt;</code>) they will be able to use your custom component in any gradio app!</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#4-publish","title":"4. publish","text":"<p>Right now, your package is only available on a <code>.whl</code> file on your computer. You can share that file with the world with the <code>publish</code> command!</p> <p>Simply run the following command from your component directory:</p> <pre><code>gradio cc publish\n</code></pre> <p>This will guide you through the following process:</p> <ol> <li>Upload your distribution files to PyPi. This is optional. If you decide to upload to PyPi, you will need a PyPI username and password. You can get one here.</li> <li>Upload a demo of your component to hugging face spaces. This is also optional.</li> </ol> <p>Here is an example of what publishing looks like:</p>"},{"location":"05_custom-components/01_custom-components-in-five-minutes/#conclusion","title":"Conclusion","text":"<p>Now that you know the high-level workflow of creating custom components, you can go in depth in the next guides! After reading the guides, check out this collection of custom components on the HuggingFace Hub so you can learn from other's code.</p>"},{"location":"05_custom-components/02_key-component-concepts/","title":"Gradio Components: The Key Concepts","text":"<p>In this section, we discuss a few important concepts when it comes to components in Gradio. It's important to understand these concepts when developing your own component. Otherwise, your component may behave very different to other Gradio components!</p> <p>Tip:  You can skip this section if you are familiar with the internals of the Gradio library, such as each component's preprocess and postprocess methods.</p>"},{"location":"05_custom-components/02_key-component-concepts/#interactive-vs-static","title":"Interactive vs Static","text":"<p>Every component in Gradio comes in a <code>static</code> variant, and most come in an <code>interactive</code> version as well. The <code>static</code> version is used when a component is displaying a value, and the user can NOT change that value by interacting with it.  The <code>interactive</code> version is used when the user is able to change the value by interacting with the Gradio UI.</p> <p>Let's see some examples:</p> <p><pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n   gr.Textbox(value=\"Hello\", interactive=True)\n   gr.Textbox(value=\"Hello\", interactive=False)\n\ndemo.launch()\n</code></pre> This will display two textboxes. The only difference: you'll be able to edit the value of the Gradio component on top, and you won't be able to edit the variant on the bottom (i.e. the textbox will be disabled).</p> <p>Perhaps a more interesting example is with the <code>Image</code> component:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n   gr.Image(interactive=True)\n   gr.Image(interactive=False)\n\ndemo.launch()\n</code></pre> <p>The interactive version of the component is much more complex -- you can upload images or snap a picture from your webcam -- while the static version can only be used to display images.</p> <p>Not every component has a distinct interactive version. For example, the <code>gr.AnnotatedImage</code> only appears as a static version since there's no way to interactively change the value of the annotations or the image.</p>"},{"location":"05_custom-components/02_key-component-concepts/#what-you-need-to-remember","title":"What you need to remember","text":"<ul> <li> <p>Gradio will use the interactive version (if available) of a component if that component is used as the input to any event; otherwise, the static version will be used.</p> </li> <li> <p>When you design custom components, you must accept the boolean interactive keyword in the constructor of your Python class. In the frontend, you may accept the <code>interactive</code> property, a <code>bool</code> which represents whether the component should be static or interactive. If you do not use this property in the frontend, the component will appear the same in interactive or static mode.</p> </li> </ul>"},{"location":"05_custom-components/02_key-component-concepts/#the-value-and-how-it-is-preprocessedpostprocessed","title":"The value and how it is preprocessed/postprocessed","text":"<p>The most important attribute of a component is its <code>value</code>. Every component has a <code>value</code>. The value that is typically set by the user in the frontend (if the component is interactive) or displayed to the user (if it is static).  It is also this value that is sent to the backend function when a user triggers an event, or returned by the user's function e.g. at the end of a prediction.</p> <p>So this value is passed around quite a bit, but sometimes the format of the value needs to change between the frontend and backend.  Take a look at this example:</p> <pre><code>import numpy as np\nimport gradio as gr\n\ndef sepia(input_img):\n    sepia_filter = np.array([\n        [0.393, 0.769, 0.189], \n        [0.349, 0.686, 0.168], \n        [0.272, 0.534, 0.131]\n    ])\n    sepia_img = input_img.dot(sepia_filter.T)\n    sepia_img /= sepia_img.max()\n    return sepia_img\n\ndemo = gr.Interface(sepia, gr.Image(shape=(200, 200)), \"image\")\ndemo.launch()\n</code></pre> <p>This will create a Gradio app which has an <code>Image</code> component as the input and the output.  In the frontend, the Image component will actually upload the file to the server and send the filepath but this is converted to a <code>numpy</code> array before it is sent to a user's function.  Conversely, when the user returns a <code>numpy</code> array from their function, the numpy array is converted to a file so that it can be sent to the frontend and displayed by the <code>Image</code> component.</p> <p>Tip: By default, the <code>Image</code> component sends numpy arrays to the python function because it is a common choice for machine learning engineers, though the Image component also supports other formats using the <code>type</code> parameter.  Read the <code>Image</code> docs here to learn more.</p> <p>Each component does two conversions:</p> <ol> <li> <p><code>preprocess</code>: Converts the <code>value</code> from the format sent by the frontend to the format expected by the python function. This usually involves going from a web-friendly JSON structure to a python-native data structure, like a <code>numpy</code> array or <code>PIL</code> image. The <code>Audio</code>, <code>Image</code> components are good examples of <code>preprocess</code> methods.</p> </li> <li> <p><code>postprocess</code>: Converts the value returned by the python function to the format expected by the frontend. This usually involves going from a python-native data-structure, like a <code>PIL</code> image to a JSON structure.</p> </li> </ol>"},{"location":"05_custom-components/02_key-component-concepts/#what-you-need-to-remember_1","title":"What you need to remember","text":"<ul> <li> <p>Every component must implement <code>preprocess</code> and <code>postprocess</code> methods. In the rare event that no conversion needs to happen, simply return the value as-is. <code>Textbox</code> and <code>Number</code> are examples of this. </p> </li> <li> <p>As a component author, YOU control the format of the data displayed in the frontend as well as the format of the data someone using your component will receive. Think of an ergonomic data-structure a python developer will find intuitive, and control the conversion from a Web-friendly JSON data structure (and vice-versa) with <code>preprocess</code> and <code>postprocess.</code></p> </li> </ul>"},{"location":"05_custom-components/02_key-component-concepts/#the-example-version-of-a-component","title":"The \"Example Version\" of a Component","text":"<p>Gradio apps support providing example inputs -- and these are very useful in helping users get started using your Gradio app.  In <code>gr.Interface</code>, you can provide examples using the <code>examples</code> keyword, and in <code>Blocks</code>, you can provide examples using the special <code>gr.Examples</code> component.</p> <p>At the bottom of this screenshot, we show a miniature example image of a cheetah that, when clicked, will populate the same image in the input Image component:</p> <p></p> <p>To enable the example view, you must have the following two files in the top of the <code>frontend</code> directory:</p> <ul> <li><code>Example.svelte</code>: this corresponds to the \"example version\" of your component</li> <li><code>Index.svelte</code>: this corresponds to the \"regular version\"</li> </ul> <p>In the backend, you typically don't need to do anything unless you would like to modify the user-provided <code>value</code> of the examples to something else before it is sent to the frontend. You can do this in the <code>as_example</code> method of the component. </p> <p>The <code>Example.svelte</code> and <code>as_example</code> methods will be covered in greater depth in the dedicated frontend and backend guides.</p>"},{"location":"05_custom-components/02_key-component-concepts/#what-you-need-to-remember_2","title":"What you need to remember","text":"<ul> <li>If you expect your component to be used as input, it is important to define an \"Example\" view.</li> <li>If you don't, Gradio will use a default one but it won't be as informative as it can be!</li> </ul>"},{"location":"05_custom-components/02_key-component-concepts/#conclusion","title":"Conclusion","text":"<p>Now that you know the most important pieces to remember about Gradio components, you can start to design and build your own!</p>"},{"location":"05_custom-components/03_configuration/","title":"Configuring Your Custom Component","text":"<p>The custom components workflow focuses on convention over configuration to reduce the number of decisions you as a developer need to make when developing your custom component. That being said, you can still configure some aspects of the custom component package and directory. This guide will cover how.</p>"},{"location":"05_custom-components/03_configuration/#the-package-name","title":"The Package Name","text":"<p>By default, all custom component packages are called <code>gradio_&lt;component-name&gt;</code> where <code>component-name</code> is the name of the component's python class in lowercase.</p> <p>As an example, let's walkthrough changing the name of a component from <code>gradio_mytextbox</code> to <code>supertextbox</code>. </p> <ol> <li>Modify the <code>name</code> in the <code>pyproject.toml</code> file. </li> </ol> <pre><code>[project]\nname = \"supertextbox\"\n</code></pre> <ol> <li>Change all occurrences of <code>gradio_&lt;component-name&gt;</code> in <code>pyproject.toml</code> to <code>&lt;component-name&gt;</code></li> </ol> <pre><code>[tool.hatch.build]\nartifacts = [\"/backend/supertextbox/templates\", \"*.pyi\"]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"/backend/supertextbox\"]\n</code></pre> <ol> <li>Rename the <code>gradio_&lt;component-name&gt;</code> directory in <code>backend/</code> to <code>&lt;component-name&gt;</code></li> </ol> <pre><code>mv backend/gradio_mytextbox backend/supertextbox\n</code></pre> <p>Tip: Remember to change the import statement in <code>demo/app.py</code>!</p>"},{"location":"05_custom-components/03_configuration/#top-level-python-exports","title":"Top Level Python Exports","text":"<p>By default, only the custom component python class is a top level export.  This means that when users type <code>from gradio_&lt;component-name&gt; import ...</code>, the only class that will be available is the custom component class. To add more classes as top level exports, modify the <code>__all__</code> property in <code>__init__.py</code></p> <pre><code>from .mytextbox import MyTextbox\nfrom .mytextbox import AdditionalClass, additional_function\n\n__all__ = ['MyTextbox', 'AdditionalClass', 'additional_function']\n</code></pre>"},{"location":"05_custom-components/03_configuration/#python-dependencies","title":"Python Dependencies","text":"<p>You can add python dependencies by modifying the <code>dependencies</code> key in <code>pyproject.toml</code></p> <pre><code>dependencies = [\"gradio\", \"numpy\", \"PIL\"]\n</code></pre> <p>Tip: Remember to run <code>gradio cc install</code> when you add dependencies!</p>"},{"location":"05_custom-components/03_configuration/#javascript-dependencies","title":"Javascript Dependencies","text":"<p>You can add JavaScript dependencies by modifying the <code>\"dependencies\"</code> key in <code>frontend/package.json</code></p> <pre><code>\"dependencies\": {\n    \"@gradio/atoms\": \"0.2.0-beta.4\",\n    \"@gradio/statustracker\": \"0.3.0-beta.6\",\n    \"@gradio/utils\": \"0.2.0-beta.4\",\n    \"your-npm-package\": \"&lt;version&gt;\"\n}\n</code></pre>"},{"location":"05_custom-components/03_configuration/#directory-structure","title":"Directory Structure","text":"<p>By default, the CLI will place the Python code in <code>backend</code> and the JavaScript code in <code>frontend</code>. It is not recommended to change this structure since it makes it easy for a potential contributor to look at your source code and know where everything is. However, if you did want to this is what you would have to do:</p> <ol> <li> <p>Place the Python code in the subdirectory of your choosing. Remember to modify the <code>[tool.hatch.build]</code> <code>[tool.hatch.build.targets.wheel]</code> in the <code>pyproject.toml</code> to match!</p> </li> <li> <p>Place the JavaScript code in the subdirectory of your choosing.</p> </li> <li> <p>Add the <code>FRONTEND_DIR</code> property on the component python class. It must be the relative path from the file where the class is defined to the location of the JavaScript directory.</p> </li> </ol> <pre><code>class SuperTextbox(Component):\n    FRONTEND_DIR = \"../../frontend/\"\n</code></pre> <p>The JavaScript and Python directories must be under the same common directory!</p>"},{"location":"05_custom-components/03_configuration/#conclusion","title":"Conclusion","text":"<p>Sticking to the defaults will make it easy for others to understand and contribute to your custom component. After all, the beauty of open source is that anyone can help improve your code! But if you ever need to deviate from the defaults, you know how!</p>"},{"location":"05_custom-components/04_backend/","title":"The Backend \ud83d\udc0d","text":"<p>This guide will cover everything you need to know to implement your custom component's backend processing.</p>"},{"location":"05_custom-components/04_backend/#which-class-to-inherit-from","title":"Which Class to Inherit From","text":"<p>All components inherit from one of three classes <code>Component</code>, <code>FormComponent</code>, or <code>BlockContext</code>. You need to inherit from one so that your component behaves like all other gradio components. When you start from a template with <code>gradio cc create --template</code>, you don't need to worry about which one to choose since the template uses the correct one.  For completeness, and in the event that you need to make your own component from scratch, we explain what each class is for.</p> <ul> <li><code>FormComponent</code>: Use this when you want your component to be grouped together in the same <code>Form</code> layout with other <code>FormComponents</code>. The <code>Slider</code>, <code>Textbox</code>, and <code>Number</code> components are all <code>FormComponents</code>.</li> <li><code>BlockContext</code>: Use this when you want to place other components \"inside\" your component. This enabled <code>with MyComponent() as component:</code> syntax.</li> <li><code>Component</code>: Use this for all other cases.</li> </ul> <p>Tip: If your component supports streaming output, inherit from the <code>StreamingOutput</code> class.</p> <p>Tip: If you inherit from <code>BlockContext</code>, you also need to set the metaclass to be <code>ComponentMeta</code>. See example below.</p> <pre><code>from gradio.blocks import BlockContext\nfrom gradio.component_meta import ComponentMeta\n\nset_documentation_group(\"layout\")\n\n\n@document()\nclass Row(BlockContext, metaclass=ComponentMeta):\n    pass\n</code></pre>"},{"location":"05_custom-components/04_backend/#the-methods-you-need-to-implement","title":"The methods you need to implement","text":"<p>When you inherit from any of these classes, the following methods must be implemented. Otherwise the Python interpreter will raise an error when you instantiate your component!</p>"},{"location":"05_custom-components/04_backend/#preprocess-and-postprocess","title":"<code>preprocess</code> and <code>postprocess</code>","text":"<p>Explained in the Key Concepts guide.  They handle the conversion from the data sent by the frontend to the format expected by the python function.</p> <pre><code>    @abstractmethod\n    def preprocess(self, x: Any) -&gt; Any:\n        \"\"\"\n        Convert from the web-friendly (typically JSON) value in the frontend to the format expected by the python function.\n        \"\"\"\n        return x\n\n    @abstractmethod\n    def postprocess(self, y):\n        \"\"\"\n        Convert from the data returned by the python function to the web-friendly (typically JSON) value expected by the frontend.\n        \"\"\"\n        return y\n</code></pre>"},{"location":"05_custom-components/04_backend/#as_example","title":"<code>as_example</code>","text":"<p>Takes in the original Python value and returns the modified value that should be displayed in the examples preview in the app.  Let's look at the following example from the <code>Radio</code> component.</p> <pre><code>def as_example(self, input_data):\n    return next((c[0] for c in self.choices if c[1] == input_data), None)\n</code></pre> <p>Since <code>self.choices</code> is a list of tuples corresponding to (<code>display_name</code>, <code>value</code>), this converts the value that a user provides to the display value (or if the value is not present in <code>self.choices</code>, it is converted to <code>None</code>).</p> <pre><code>@abstractmethod\ndef as_example(self, y):\n    pass\n</code></pre>"},{"location":"05_custom-components/04_backend/#api_info","title":"<code>api_info</code>","text":"<p>A JSON-schema representation of the value that the <code>preprocess</code> expects.  This powers api usage via the gradio clients.  You do not need to implement this yourself if you components specifies a <code>data_model</code>.  The <code>data_model</code> in the following section.</p> <pre><code>@abstractmethod\ndef api_info(self) -&gt; dict[str, list[str]]:\n    \"\"\"\n    A JSON-schema representation of the value that the `preprocess` expects and the `postprocess` returns.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"05_custom-components/04_backend/#example_inputs","title":"<code>example_inputs</code>","text":"<p>The example inputs for this component displayed in the <code>View API</code> page.  Must be JSON-serializable. If your component expects a file, it is best to use a publicly accessible URL.</p> <pre><code>@abstractmethod\ndef example_inputs(self) -&gt; Any:\n    \"\"\"\n    The example inputs for this component for API usage. Must be JSON-serializable.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"05_custom-components/04_backend/#flag","title":"<code>flag</code>","text":"<p>Write the component's value to a format that can be stored in the <code>csv</code> or <code>json</code> file used for flagging. You do not need to implement this yourself if you components specifies a <code>data_model</code>.  The <code>data_model</code> in the following section.</p> <pre><code>@abstractmethod\ndef flag(self, x: Any | GradioDataModel, flag_dir: str | Path = \"\") -&gt; str:\n    pass\n</code></pre>"},{"location":"05_custom-components/04_backend/#read_from_flag","title":"<code>read_from_flag</code>","text":"<p>Convert from the format stored in the <code>csv</code> or <code>json</code> file used for flagging to the component's python <code>value</code>. You do not need to implement this yourself if you components specifies a <code>data_model</code>.  The <code>data_model</code> in the following section.</p> <pre><code>@abstractmethod\ndef read_from_flag(\n    self,\n    x: Any,\n    flag_dir: str | Path | None = None,\n) -&gt; GradioDataModel | Any:\n    \"\"\"\n    Convert the data from the csv or jsonl file into the component state.\n    \"\"\"\n    return x\n</code></pre>"},{"location":"05_custom-components/04_backend/#the-data_model","title":"The <code>data_model</code>","text":"<p>The <code>data_model</code> is how you define the expected data format your component's value will be stored in the frontend. It specifies the data format your <code>preprocess</code> method expects and the format the <code>postprocess</code> method returns. It is not necessary to define a <code>data_model</code> for your component but it greatly simplifies the process of creating a custom component. If you define a custom component you only need to implement three methods - <code>preprocess</code>, <code>postprocess</code>, and <code>example_inputs</code>!</p> <p>You define a <code>data_model</code> by defining a pydantic model that inherits from either <code>GradioModel</code> or <code>GradioRootModel</code>.</p> <p>This is best explained with an example. Let's look at the core <code>Video</code> component, which stores the video data as a JSON object with two keys <code>video</code> and <code>subtitles</code> which point to separate files.</p> <pre><code>from gradio.data_classes import FileData, GradioModel\n\nclass VideoData(GradioModel):\n    video: FileData\n    subtitles: Optional[FileData] = None\n\nclass Video(Component):\n    data_model = VideoData\n</code></pre> <p>By adding these four lines of code, your component automatically implements the methods needed for API usage, the flagging methods, and example caching methods! It also has the added benefit of self-documenting your code. Anyone who reads your component code will know exactly the data it expects.</p> <p>Tip: If your component expects files to be uploaded from the frontend, your must use the <code>FileData</code> model! It will be explained in the following section. </p> <p>Tip: Read the pydantic docs here.</p> <p>The difference between a <code>GradioModel</code> and a <code>GradioRootModel</code> is that the <code>RootModel</code> will not serialize the data to a dictionary. For example, the <code>Names</code> model will serialize the data to <code>{'names': ['freddy', 'pete']}</code> whereas the <code>NamesRoot</code> model will serialize it to <code>['freddy', 'pete']</code>.</p> <pre><code>from typing import List\n\nclass Names(GradioModel):\n    names: List[str]\n\nclass NamesRoot(GradioRootModel):\n    root: List[str]\n</code></pre> <p>Even if your component does not expect a \"complex\" JSON data structure it can be beneficial to define a <code>GradioRootModel</code> so that you don't have to worry about implementing the API and flagging methods.</p> <p>Tip: Use classes from the Python typing library to type your models. e.g. <code>List</code> instead of <code>list</code>.</p>"},{"location":"05_custom-components/04_backend/#handling-files","title":"Handling Files","text":"<p>If your component expects uploaded files as input, or returns saved files to the frontend, you MUST use the <code>FileData</code> to type the files in your <code>data_model</code>.</p> <p>When you use the <code>FileData</code>:</p> <ul> <li> <p>Gradio knows that it should allow serving this file to the frontend. Gradio automatically blocks requests to serve arbitrary files in the computer running the server.</p> </li> <li> <p>Gradio will automatically place the file in a cache so that duplicate copies of the file don't get saved.</p> </li> <li> <p>The client libraries will automatically know that they should upload input files prior to sending the request. They will also automatically download files.</p> </li> </ul> <p>If you do not use the <code>FileData</code>, your component will not work as expected!</p>"},{"location":"05_custom-components/04_backend/#adding-event-triggers-to-your-component","title":"Adding Event Triggers To Your Component","text":"<p>The events triggers for your component are defined in the <code>EVENTS</code> class attribute. This is a list that contains the string names of the events. Adding an event to this list will automatically add a method with that same name to your component!</p> <p>You can import the <code>Events</code> enum from <code>gradio.events</code> to access commonly used events in the core gradio components.</p> <p>For example, the following code will define <code>text_submit</code>, <code>file_upload</code> and <code>change</code> methods in the <code>MyComponent</code> class.</p> <pre><code>from gradio.events import Events\nfrom gradio.components import FormComponent\n\nclass MyComponent(FormComponent):\n\n    EVENTS = [\n        \"text_submit\",\n        \"file_upload\",\n        Events.change\n    ]\n</code></pre> <p>Tip: Don't forget to also handle these events in the JavaScript code!</p>"},{"location":"05_custom-components/04_backend/#conclusion","title":"Conclusion","text":""},{"location":"05_custom-components/05_frontend/","title":"The Frontend \ud83c\udf10\u2b50\ufe0f","text":"<p>This guide will cover everything you need to know to implement your custom component's frontend.</p> <p>Tip: Gradio components use Svelte. Writing Svelte is fun! If you're not familiar with it, we recommend checking out their interactive guide.</p>"},{"location":"05_custom-components/05_frontend/#the-directory-structure","title":"The directory structure","text":"<p>The frontend code should have, at minimum, three files:</p> <ul> <li><code>Index.svelte</code>: This is the main export and where your component's layout and logic should live.</li> <li><code>Example.svelte</code>: This is where the example view of the component is defined.</li> </ul> <p>Feel free to add additional files and subdirectories.  If you want to export any additional modules, remember to modify the <code>package.json</code> file</p> <pre><code>\"exports\": {\n    \".\": \"./Index.svelte\",\n    \"./example\": \"./Example.svelte\",\n    \"./package.json\": \"./package.json\"\n},\n</code></pre>"},{"location":"05_custom-components/05_frontend/#the-indexsvelte-file","title":"The Index.svelte file","text":"<p>Your component should expose the following props that will be passed down from the parent Gradio application.</p> <pre><code>import type { LoadingStatus } from \"@gradio/statustracker\";\nimport type { Gradio } from \"@gradio/utils\";\n\nexport let gradio: Gradio&lt;{\n    event_1: never;\n    event_2: never;\n}&gt;;\n\nexport let elem_id = \"\";\nexport let elem_classes: string[] = [];\nexport let scale: number | null = null;\nexport let min_width: number | undefined = undefined;\nexport let loading_status: LoadingStatus | undefined = undefined;\nexport let mode: \"static\" | \"interactive\";\n</code></pre> <ul> <li> <p><code>elem_id</code> and <code>elem_classes</code> allow Gradio app developers to target your component with custom CSS and JavaScript from the Python <code>Blocks</code> class.</p> </li> <li> <p><code>scale</code> and <code>min_width</code> allow Gradio app developers to control how much space your component takes up in the UI.</p> </li> <li> <p><code>loading_status</code> is used to display a loading status over the component when it is the output of an event.</p> </li> <li> <p><code>mode</code> is how the parent Gradio app tells your component whether the <code>interactive</code> or <code>static</code> version should be displayed.</p> </li> <li> <p><code>gradio</code>: The <code>gradio</code> object is created by the parent Gradio app. It stores some application-level configuration that will be useful in your component, like internationalization. You must use it to dispatch events from your component.</p> </li> </ul> <p>A minimal <code>Index.svelte</code> file would look like:</p> <pre><code>&lt;script lang=\"ts\"&gt;\n    import type { LoadingStatus } from \"@gradio/statustracker\";\n    import { Block } from \"@gradio/atoms\";\n    import { StatusTracker } from \"@gradio/statustracker\";\n    import type { Gradio } from \"@gradio/utils\";\n\n    export let gradio: Gradio&lt;{\n        event_1: never;\n        event_2: never;\n    }&gt;;\n\n    export let value = \"\";\n    export let elem_id = \"\";\n    export let elem_classes: string[] = [];\n    export let scale: number | null = null;\n    export let min_width: number | undefined = undefined;\n    export let loading_status: LoadingStatus | undefined = undefined;\n    export let mode: \"static\" | \"interactive\";\n&lt;/script&gt;\n\n&lt;Block\n    visible={true}\n    {elem_id}\n    {elem_classes}\n    {scale}\n    {min_width}\n    allow_overflow={false}\n    padding={true}\n&gt;\n    {#if loading_status}\n        &lt;StatusTracker\n            autoscroll={gradio.autoscroll}\n            i18n={gradio.i18n}\n            {...loading_status}\n        /&gt;\n    {/if}\n    &lt;p&gt;{value}&lt;/p&gt;\n&lt;/Block&gt;\n</code></pre>"},{"location":"05_custom-components/05_frontend/#the-examplesvelte-file","title":"The Example.svelte file","text":"<p>The <code>Example.svelte</code> file should expose the following props:</p> <pre><code>    export let value: string;\n    export let type: \"gallery\" | \"table\";\n    export let selected = false;\n    export let samples_dir: string;\n    export let index: number;\n</code></pre> <ul> <li> <p><code>value</code>: The example value that should be displayed.</p> </li> <li> <p><code>type</code>: This is a variable that can be either <code>\"gallery\"</code> or <code>\"table\"</code> depending on how the examples are displayed. The <code>\"gallery\"</code> form is used when the examples correspond to a single input component, while the <code>\"table\"</code> form is used when a user has multiple input components, and the examples need to populate all of them. </p> </li> <li> <p><code>selected</code>: You can also adjust how the examples are displayed if a user \"selects\" a particular example by using the selected variable.</p> </li> <li> <p><code>samples_dir</code>: A URL to prepend to <code>value</code> if your example is fetching a file from the server</p> </li> <li> <p><code>index</code>: The current index of the selected value.</p> </li> <li> <p>Any additional props your \"non-example\" component takes!</p> </li> </ul> <p>This is the <code>Example.svelte</code> file for the code <code>Radio</code> component:</p> <pre><code>&lt;script lang=\"ts\"&gt;\n    export let value: string;\n    export let type: \"gallery\" | \"table\";\n    export let selected = false;\n&lt;/script&gt;\n\n&lt;div\n    class:table={type === \"table\"}\n    class:gallery={type === \"gallery\"}\n    class:selected\n&gt;\n    {value}\n&lt;/div&gt;\n\n&lt;style&gt;\n    .gallery {\n        padding: var(--size-1) var(--size-2);\n    }\n&lt;/style&gt;\n</code></pre>"},{"location":"05_custom-components/05_frontend/#handling-files","title":"Handling Files","text":"<p>If your component deals with files, these files should be uploaded to the backend server.  The <code>@gradio/client</code> npm package provides the <code>upload</code>, <code>prepare_files</code>, and <code>normalise_file</code> utility functions to help you do this.</p> <p>The <code>prepare_files</code> function will convert the browser's <code>File</code> datatype to gradio's internal <code>FileData</code> type. You should use the <code>FileData</code> data in your component to keep track of uploaded files.</p> <p>The <code>upload</code> function will upload an array of <code>FileData</code> values to the server.</p> <p>The <code>normalise_file</code> function will generate the correct URL for your component to fetch the file from and set it to the <code>data</code> property of the <code>FileData.</code></p> <p>Tip: Be sure you call <code>normalise_file</code> whenever your files are updated!</p> <p>Here's an example of loading files from an <code>&lt;input&gt;</code> element when its value changes.</p> <pre><code>&lt;script lang=\"ts\"&gt;\n\n    import { upload, prepare_files, normalise_file, type FileData } from \"@gradio/client\";\n    export let root;\n    export let value;\n    let uploaded_files;\n\n    $: value: normalise_file(uploaded_files, root)\n\n    async function handle_upload(file_data: FileData[]): Promise&lt;void&gt; {\n        await tick();\n        uploaded_files = await upload(file_data, root);\n    }\n\n    async function loadFiles(files: FileList): Promise&lt;void&gt; {\n        let _files: File[] = Array.from(files);\n        if (!files.length) {\n            return;\n        }\n        if (file_count === \"single\") {\n            _files = [files[0]];\n        }\n        let file_data = await prepare_files(_files);\n        await handle_upload(file_data);\n    }\n\n    async function loadFilesFromUpload(e: Event): Promise&lt;void&gt; {\n        const target = e.target;\n\n        if (!target.files) return;\n        await loadFiles(target.files);\n    }\n&lt;/script&gt;\n\n&lt;input\n    type=\"file\"\n    on:change={loadFilesFromUpload}\n    multiple={true}\n/&gt;\n</code></pre> <p>The component exposes a prop named <code>root</code>.  This is passed down by the parent gradio app and it represents the base url that the files will be uploaded to and fetched from.</p> <p>For WASM support, you should get the upload function from the <code>Context</code> and pass that as the third parameter of the <code>upload</code> function.</p> <pre><code>&lt;script lang=\"ts\"&gt;\n    import { getContext } from \"svelte\";\n    const upload_fn = getContext&lt;typeof upload_files&gt;(\"upload_files\");\n\n    async function handle_upload(file_data: FileData[]): Promise&lt;void&gt; {\n        await tick();\n        await upload(file_data, root, upload_fn);\n    }\n&lt;/script&gt;\n</code></pre>"},{"location":"05_custom-components/05_frontend/#leveraging-existing-gradio-components","title":"Leveraging Existing Gradio Components","text":"<p>Most of Gradio's frontend components are published on npm, the javascript package repository. This means that you can use them to save yourself time while incorporating common patterns in your component, like uploading files. For example, the <code>@gradio/upload</code> package has <code>Upload</code> and <code>ModifyUpload</code> components for properly uploading files to the Gradio server.  Here is how you can use them to create a user interface to upload and display PDF files.</p> <pre><code>&lt;script&gt;\n    import { type FileData, normalise_file, Upload, ModifyUpload } from \"@gradio/upload\";\n    import { Empty, UploadText, BlockLabel } from \"@gradio/atoms\";\n&lt;/script&gt;\n\n&lt;BlockLabel Icon={File} label={label || \"PDF\"} /&gt;\n{#if value === null &amp;&amp; interactive}\n    &lt;Upload\n        filetype=\"application/pdf\"\n        on:load={handle_load}\n        {root}\n        &gt;\n        &lt;UploadText type=\"file\" i18n={gradio.i18n} /&gt;\n    &lt;/Upload&gt;\n{:else if value !== null}\n    {#if interactive}\n        &lt;ModifyUpload i18n={gradio.i18n} on:clear={handle_clear}/&gt;\n    {/if}\n    &lt;iframe title={value.orig_name || \"PDF\"} src={value.data} height=\"{height}px\" width=\"100%\"&gt;&lt;/iframe&gt;\n{:else}\n    &lt;Empty size=\"large\"&gt; &lt;File/&gt; &lt;/Empty&gt;   \n{/if}\n</code></pre> <p>You can also combine existing Gradio components to create entirely unique experiences. Like rendering a gallery of chatbot conversations.  The possibilities are endless, please read the documentation on our javascript packages here. We'll be adding more packages and documentation over the coming weeks!</p>"},{"location":"05_custom-components/05_frontend/#matching-gradio-cores-design-system","title":"Matching Gradio Core's Design System","text":"<p>You can explore our component library via Storybook. You'll be able to interact with our components and see them in their various states.</p> <p>For those interested in design customization, we provide the CSS variables consisting of our color palette, radii, spacing, and the icons we use - so you can easily match up your custom component with the style of our core components. This Storybook will be regularly updated with any new additions or changes.</p> <p>Storybook Link</p>"},{"location":"05_custom-components/05_frontend/#conclusion","title":"Conclusion","text":"<p>You now how to create delightful frontends for your components!</p>"},{"location":"05_custom-components/06_frequently-asked-questions/","title":"Frequently Asked Questions","text":""},{"location":"05_custom-components/06_frequently-asked-questions/#what-do-i-need-to-install-before-using-custom-components","title":"What do I need to install before using Custom Components?","text":"<p>Before using Custom Components, make sure you have Python 3.8+, Node.js v16.14+, npm 9+, and Gradio 4.0+ installed.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#what-templates-can-i-use-to-create-my-custom-component","title":"What templates can I use to create my custom component?","text":"<p>Run <code>gradio cc show</code> to see the list of built-in templates. You can also start off from other's custom components! Simply <code>git clone</code> their repository and make your modifications.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#what-is-the-development-server","title":"What is the development server?","text":"<p>When you run <code>gradio cc dev</code>, a development server will load and run a Gradio app of your choosing. This is like when you run <code>python &lt;app-file&gt;.py</code>, however the <code>gradio</code> command will hot reload so you can instantly see your changes. </p>"},{"location":"05_custom-components/06_frequently-asked-questions/#the-development-server-didnt-work-for-me","title":"The development server didn't work for me","text":"<p>Make sure you have your package installed along with any dependencies you have added by running <code>gradio cc install</code>. Make sure there aren't any syntax or import errors in the Python or JavaScript code.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#do-i-need-to-host-my-custom-component-on-huggingface-spaces","title":"Do I need to host my custom component on HuggingFace Spaces?","text":"<p>You can develop and build your custom component without hosting or connecting to HuggingFace. If you would like to share your component with the gradio community, it is recommended to publish your package to PyPi and host a demo on HuggingFace so that anyone can install it or try it out.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#what-methods-are-mandatory-for-implementing-a-custom-component-in-gradio","title":"What methods are mandatory for implementing a custom component in Gradio?","text":"<p>You must implement the <code>preprocess</code>, <code>postprocess</code>, <code>as_example</code>, <code>api_info</code>, <code>example_inputs</code>, <code>flag</code>, and <code>read_from_flag</code> methods. Read more in the backend guide.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#what-is-the-purpose-of-a-data_model-in-gradio-custom-components","title":"What is the purpose of a <code>data_model</code> in Gradio custom components?","text":"<p>A <code>data_model</code> defines the expected data format for your component, simplifying the component development process and self-documenting your code. It streamlines API usage and example caching.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#why-is-it-important-to-use-filedata-for-components-dealing-with-file-uploads","title":"Why is it important to use <code>FileData</code> for components dealing with file uploads?","text":"<p>Utilizing <code>FileData</code> is crucial for components that expect file uploads. It ensures secure file handling, automatic caching, and streamlined client library functionality.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#how-can-i-add-event-triggers-to-my-custom-gradio-component","title":"How can I add event triggers to my custom Gradio component?","text":"<p>You can define event triggers in the <code>EVENTS</code> class attribute by listing the desired event names, which automatically adds corresponding methods to your component.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#can-i-implement-a-custom-gradio-component-without-defining-a-data_model","title":"Can I implement a custom Gradio component without defining a <code>data_model</code>?","text":"<p>Yes, it is possible to create custom components without a <code>data_model</code>, but you are going to have to manually implement <code>api_info</code>, <code>example_inputs</code>, <code>flag</code>, and <code>read_from_flag</code> methods.</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#are-there-sample-custom-components-i-can-learn-from","title":"Are there sample custom components I can learn from?","text":"<p>We have prepared this collection of custom components on the HuggingFace Hub that you can use to get started!</p>"},{"location":"05_custom-components/06_frequently-asked-questions/#how-can-i-find-custom-components-created-by-the-gradio-community","title":"How can I find custom components created by the Gradio community?","text":"<p>We're working on creating a gallery to make it really easy to discover new custom components. In the meantime, you can search for HuggingFace Spaces that are tagged as a <code>gradio-custom-component</code> here</p>"},{"location":"05_custom-components/07_pdf-component-example/","title":"Case Study: A Component to Display PDFs","text":"<p>Let's work through an example of building a custom gradio component for displaying PDF files. This component will come in handy for showcasing document question answering models, which typically work on PDF input. This is a sneak preview of what our finished component will look like:</p> <p></p>"},{"location":"05_custom-components/07_pdf-component-example/#step-0-prerequisites","title":"Step 0: Prerequisites","text":"<p>Make sure you have gradio 4.0 installed as well as node 18+. As of the time of publication, the latest release is 4.1.1. Also, please read the Five Minute Tour of custom components and the Key Concepts guide before starting.</p>"},{"location":"05_custom-components/07_pdf-component-example/#step-1-creating-the-custom-component","title":"Step 1: Creating the custom component","text":"<p>Navigate to a directory of your choosing and run the following command:</p> <pre><code>gradio cc create PDF\n</code></pre> <p>Tip: You should change the name of the component. Some of the screenshots assume the component is callled <code>PDF</code> but the concepts are the same!</p> <p>This will create a subdirectory called <code>pdf</code> in your current working directory. There are three main subdirectories in <code>pdf</code>: <code>frontend</code>, <code>backend</code>, and <code>demo</code>. If you open <code>pdf</code> in your code editor, it will look like this:</p> <p></p> <p>Tip: For this demo we are not templating off a current gradio component. But you can see the list of available templates with <code>gradio cc show</code> and then pass the template name to the <code>--template</code> option, e.g. <code>gradio cc create &lt;Name&gt; --template &lt;foo&gt;</code></p>"},{"location":"05_custom-components/07_pdf-component-example/#step-2-frontend-modify-javascript-dependencies","title":"Step 2: Frontend - modify javascript dependencies","text":"<p>We're going to use the pdfjs javascript library to display the pdfs in the frontend.  Let's start off by adding it to our frontend project's dependencies, as well as adding a couple of other projects we'll need.</p> <p>From within the <code>frontend</code> directory, run <code>npm install @gradio/client @gradio/upload @gradio/icons @gradio/button</code> and <code>npm install --save-dev pdfjs-dist@3.11.174</code>. Also, let's uninstall the <code>@zerodevx/svelte-json-view</code> dependency by running <code>npm uninstall @zerodevx/svelte-json-view</code>.</p> <p>The complete <code>package.json</code> should look like this:</p> <pre><code>{\n  \"name\": \"gradio_pdf\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Gradio component for displaying PDFs\",\n  \"type\": \"module\",\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"private\": false,\n  \"main_changeset\": true,\n  \"exports\": {\n    \".\": \"./Index.svelte\",\n    \"./example\": \"./Example.svelte\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"devDependencies\": {\n    \"pdfjs-dist\": \"3.11.174\"\n  },\n  \"dependencies\": {\n    \"@gradio/atoms\": \"0.2.0\",\n    \"@gradio/statustracker\": \"0.3.0\",\n    \"@gradio/utils\": \"0.2.0\",\n    \"@gradio/client\": \"0.7.1\",\n    \"@gradio/upload\": \"0.3.2\",\n    \"@gradio/icons\": \"0.2.0\",\n    \"@gradio/button\": \"0.2.3\",\n    \"pdfjs-dist\": \"3.11.174\"\n  }\n}\n</code></pre> <p>Tip: Running <code>npm install</code> will install the latest version of the package available. You can install a specific version with <code>npm install package@&lt;version&gt;</code>.  You can find all of the gradio javascript package documentation here. It is recommended you use the same versions as me as the API can change.</p> <p>Navigate to <code>Index.svelte</code> and delete mentions of <code>JSONView</code></p> <pre><code>import { JsonView } from \"@zerodevx/svelte-json-view\";\n</code></pre> <pre><code>&lt;JsonView json={value} /&gt;\n</code></pre>"},{"location":"05_custom-components/07_pdf-component-example/#step-3-frontend-launching-the-dev-server","title":"Step 3: Frontend - Launching the Dev Server","text":"<p>Run the <code>dev</code> command to launch the development server. This will open the demo in <code>demo/app.py</code> in an environment where changes to the <code>frontend</code> and <code>backend</code> directories will reflect instantaneously in the launched app.</p> <p>After launching the dev server, you should see a link printed to your console that says <code>Frontend Server (Go here): ...</code>.</p> <p></p> <p>You should see the following:</p> <p></p> <p>Its not impressive yet but we're ready to start coding!</p>"},{"location":"05_custom-components/07_pdf-component-example/#step-4-frontend-the-basic-skeleton","title":"Step 4: Frontend - The basic skeleton","text":"<p>We're going to start off by first writing the skeleton of our frontend and then adding the pdf rendering logic. Add the following imports and expose the following properties to the top of your file in the <code>&lt;script&gt;</code> tag. You may get some warnings from your code editor that some props are not used. That's ok.</p> <pre><code>    import { tick } from \"svelte\";\n    import type { Gradio } from \"@gradio/utils\";\n    import { Block, BlockLabel } from \"@gradio/atoms\";\n    import { File } from \"@gradio/icons\";\n    import { StatusTracker } from \"@gradio/statustracker\";\n    import type { LoadingStatus } from \"@gradio/statustracker\";\n    import type { FileData } from \"@gradio/client\";\n    import { normalise_file } from \"@gradio/client\";\n    import { Upload, ModifyUpload } from \"@gradio/upload\";\n\n    export let elem_id = \"\";\n    export let elem_classes: string[] = [];\n    export let visible = true;\n    export let value: FileData | null = null;\n    export let container = true;\n    export let scale: number | null = null;\n    export let root: string;\n    export let height: number | null = 500;\n    export let label: string;\n    export let proxy_url: string;\n    export let min_width: number | undefined = undefined;\n    export let loading_status: LoadingStatus;\n    export let gradio: Gradio&lt;{\n        change: never;\n        upload: never;\n    }&gt;;\n\n    let _value = value;\n    let old_value = _value;\n</code></pre> <p>Tip: The `gradio`` object passed in here contains some metadata about the application as well as some utility methods. One of these utilities is a dispatch method. We want to dispatch change and upload events whenever our PDF is changed or updated. This line provides type hints that these are the only events we will be dispatching.</p> <p>We want our frontend component to let users upload a PDF document if there isn't one already loaded. If it is loaded, we want to display it underneath a \"clear\" button that lets our users upload a new document.  We're going to use the <code>Upload</code> and <code>ModifyUpload</code> components that come with the <code>@gradio/upload</code> package to do this. Underneath the <code>&lt;/script&gt;</code> tag, delete all the current code and add the following:</p> <pre><code>&lt;Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}&gt;\n    {#if loading_status}\n        &lt;StatusTracker\n            autoscroll={gradio.autoscroll}\n            i18n={gradio.i18n}\n            {...loading_status}\n        /&gt;\n    {/if}\n    &lt;BlockLabel\n        show_label={label !== null}\n        Icon={File}\n        float={value === null}\n        label={label || \"File\"}\n    /&gt;\n    {#if _value}\n        &lt;ModifyUpload i18n={gradio.i18n} absolute /&gt;\n    {:else}\n        &lt;Upload\n            filetype={\"application/pdf\"}\n            file_count=\"single\"\n            {root}\n        &gt;\n            Upload your PDF\n        &lt;/Upload&gt;\n    {/if}\n&lt;/Block&gt;\n</code></pre> <p>You should see the following when you navigate to your app after saving your current changes:</p> <p></p>"},{"location":"05_custom-components/07_pdf-component-example/#step-5-frontend-nicer-upload-text","title":"Step 5: Frontend - Nicer Upload Text","text":"<p>The <code>Upload your PDF</code> text looks a bit small and barebones.  Lets customize it!</p> <p>Create a new file called <code>PdfUploadText.svelte</code> and copy the following code. Its creating a new div to display our \"upload text\" with some custom styling.</p> <p>Tip: Notice that we're leveraging Gradio core's existing css variables here: <code>var(--size-60)</code> and <code>var(--body-text-color-subdued)</code>. This allows our component to work nicely in light mode and dark mode, as well as with Gradio's built-in themes.</p> <pre><code>&lt;script lang=\"ts\"&gt;\n    import { Upload as UploadIcon } from \"@gradio/icons\";\n    export let hovered = false;\n\n&lt;/script&gt;\n\n&lt;div class=\"wrap\"&gt;\n    &lt;span class=\"icon-wrap\" class:hovered&gt;&lt;UploadIcon /&gt; &lt;/span&gt;\n    Drop PDF\n    &lt;span class=\"or\"&gt;- or -&lt;/span&gt;\n    Click to Upload\n&lt;/div&gt;\n\n&lt;style&gt;\n    .wrap {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        min-height: var(--size-60);\n        color: var(--block-label-text-color);\n        line-height: var(--line-md);\n        height: 100%;\n        padding-top: var(--size-3);\n    }\n\n    .or {\n        color: var(--body-text-color-subdued);\n        display: flex;\n    }\n\n    .icon-wrap {\n        width: 30px;\n        margin-bottom: var(--spacing-lg);\n    }\n\n    @media (--screen-md) {\n        .wrap {\n            font-size: var(--text-lg);\n        }\n    }\n\n    .hovered {\n        color: var(--color-accent);\n    }\n&lt;/style&gt;\n</code></pre> <p>Now import <code>PdfUploadText.svelte</code> in your <code>&lt;script&gt;</code> and pass it to the <code>Upload</code> component!</p> <pre><code>    import PdfUploadText from \"./PdfUploadText.svelte\";\n\n...\n\n    &lt;Upload\n        filetype={\"application/pdf\"}\n        file_count=\"single\"\n        {root}\n    &gt;\n        &lt;PdfUploadText /&gt;\n    &lt;/Upload&gt;\n</code></pre> <p>After saving your code, the frontend should now look like this:</p> <p></p>"},{"location":"05_custom-components/07_pdf-component-example/#step-6-pdf-rendering-logic","title":"Step 6: PDF Rendering logic","text":"<p>This is the most advanced javascript part. It took me a while to figure it out! Do not worry if you have trouble, the important thing is to not be discouraged \ud83d\udcaa Ask for help in the gradio discord if you need and ask for help.</p> <p>With that out of the way, let's start off by importing <code>pdfjs</code> and loading the code of the pdf worker from the mozilla cdn.</p> <pre><code>    import pdfjsLib from \"pdfjs-dist\";\n    ...\n    pdfjsLib.GlobalWorkerOptions.workerSrc =  \"https://cdn.bootcss.com/pdf.js/3.11.174/pdf.worker.js\";\n</code></pre> <p>Also create the following variables:</p> <pre><code>    let pdfDoc;\n    let numPages = 1;\n    let currentPage = 1;\n    let canvasRef;\n</code></pre> <p>Now, we will use <code>pdfjs</code> to render a given page of the PDF onto an <code>html</code> document. Add the following code to <code>Index.svelte</code>:</p> <pre><code>    async function get_doc(value: FileData) {\n        const loadingTask = pdfjsLib.getDocument(value.url);\n        pdfDoc = await loadingTask.promise;\n        numPages = pdfDoc.numPages;\n        render_page();\n    }\n\n    function render_page() {\n    // Render a specific page of the PDF onto the canvas\n        pdfDoc.getPage(currentPage).then(page =&gt; {\n            const ctx  = canvasRef.getContext('2d')\n            ctx.clearRect(0, 0, canvasRef.width, canvasRef.height);\n            let viewport = page.getViewport({ scale: 1 });\n            let scale = height / viewport.height;\n            viewport = page.getViewport({ scale: scale });\n\n            const renderContext = {\n                canvasContext: ctx,\n                viewport,\n            };\n            canvasRef.width = viewport.width;\n            canvasRef.height = viewport.height;\n            page.render(renderContext);\n        });\n    }\n\n    // Compute the url to fetch the file from the backend\n    // whenever a new value is passed in.\n    $: _value = normalise_file(value, root, proxy_url);\n\n    // If the value changes, render the PDF of the currentPage\n    $: if(JSON.stringify(old_value) != JSON.stringify(_value)) {\n        if (_value){\n            get_doc(_value);\n        }\n        old_value = _value;\n        gradio.dispatch(\"change\");\n    }\n</code></pre> <p>Tip: The <code>$:</code> syntax in svelte is how you declare statements to be reactive. Whenever any of the inputs of the statement change, svelte will automatically re-run that statement.</p> <p>Now place the <code>canvas</code> underneath the <code>ModifyUpload</code> component:</p> <pre><code>&lt;div class=\"pdf-canvas\" style=\"height: {height}px\"&gt;\n    &lt;canvas bind:this={canvasRef}&gt;&lt;/canvas&gt;\n&lt;/div&gt;\n</code></pre> <p>And add the following styles to the <code>&lt;style&gt;</code> tag:</p> <pre><code>&lt;style&gt;\n    .pdf-canvas {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n&lt;/style&gt;\n</code></pre>"},{"location":"05_custom-components/07_pdf-component-example/#step-7-handling-the-file-upload-and-clear","title":"Step 7: Handling The File Upload And Clear","text":"<p>Now for the fun part - actually rendering the PDF when the file is uploaded! Add the following functions to the <code>&lt;script&gt;</code> tag:</p> <pre><code>    async function handle_clear() {\n        _value = null;\n        await tick();\n        gradio.dispatch(\"change\");\n    }\n\n    async function handle_upload({detail}: CustomEvent&lt;FileData&gt;): Promise&lt;void&gt; {\n        value = detail;\n        await tick();\n        gradio.dispatch(\"change\");\n        gradio.dispatch(\"upload\");\n    }\n</code></pre> <p>Tip: The <code>gradio.dispatch</code> method is actually what is triggering the <code>change</code> or <code>upload</code> events in the backend. For every event defined in the component's backend, we will explain how to do this in Step 9, there must be at least one <code>gradio.dispatch(\"&lt;event-name&gt;\")</code> call. These are called <code>gradio</code> events and they can be listended from the entire Gradio application. You can dispatch a built-in <code>svelte</code> event with the <code>dispatch</code> function. These events can only be listened to from the component's direct parent. Learn about svelte events from the official documentation.</p> <p>Now we will run these functions whenever the <code>Upload</code> component uploads a file and whenever the <code>ModifyUpload</code> component clears the current file. The <code>&lt;Upload&gt;</code> component dispatches a <code>load</code> event with a payload of type <code>FileData</code> corresponding to the uploaded file. The <code>on:load</code> syntax tells <code>Svelte</code> to automatically run this function in response to the event.</p> <pre><code>    &lt;ModifyUpload i18n={gradio.i18n} on:clear={handle_clear} absolute /&gt;\n\n    ...\n\n    &lt;Upload\n        on:load={handle_upload}\n        filetype={\"application/pdf\"}\n        file_count=\"single\"\n        {root}\n    &gt;\n        &lt;PdfUploadText/&gt;\n    &lt;/Upload&gt;\n</code></pre> <p>Congratulations! You have a working pdf uploader!</p> <p></p>"},{"location":"05_custom-components/07_pdf-component-example/#step-8-adding-buttons-to-navigate-pages","title":"Step 8: Adding buttons to navigate pages","text":"<p>If a user uploads a PDF document with multiple pages, they will only be able to see the first one. Let's add some buttons to help them navigate the page. We will use the <code>BaseButton</code> from <code>@gradio/button</code> so that they look like regular Gradio buttons.</p> <p>Import the <code>BaseButton</code> and add the following functions that will render the next and previous page of the PDF.</p> <pre><code>    import { BaseButton } from \"@gradio/button\";\n\n    ...\n\n    function next_page() {\n        if (currentPage &gt;= numPages) {\n            return;\n        }\n        currentPage++;\n        render_page();\n    }\n\n    function prev_page() {\n        if (currentPage == 1) {\n            return;\n        }\n        currentPage--;\n        render_page();\n    }\n</code></pre> <p>Now we will add them underneath the canvas in a separate <code>&lt;div&gt;</code></p> <pre><code>    ...\n\n    &lt;ModifyUpload i18n={gradio.i18n} on:clear={handle_clear} absolute /&gt;\n    &lt;div class=\"pdf-canvas\" style=\"height: {height}px\"&gt;\n        &lt;canvas bind:this={canvasRef}&gt;&lt;/canvas&gt;\n    &lt;/div&gt;\n    &lt;div class=\"button-row\"&gt;\n        &lt;BaseButton on:click={prev_page}&gt;\n            \u2b05\ufe0f\n        &lt;/BaseButton&gt;\n        &lt;span class=\"page-count\"&gt; {currentPage} / {numPages} &lt;/span&gt;\n        &lt;BaseButton on:click={next_page}&gt;\n            \u27a1\ufe0f\n        &lt;/BaseButton&gt;\n    &lt;/div&gt;\n\n    ...\n\n&lt;style&gt;\n    .button-row {\n        display: flex;\n        flex-direction: row;\n        width: 100%;\n        justify-content: center;\n        align-items: center;\n    }\n\n    .page-count {\n        margin: 0 10px;\n        font-family: var(--font-mono);\n    }\n</code></pre> <p>Congratulations! The frontend is almost complete \ud83c\udf89</p> <p></p>"},{"location":"05_custom-components/07_pdf-component-example/#step-85-the-example-view","title":"Step 8.5: The Example view","text":"<p>We're going to want users of our component to get a preview of the PDF if its used as an <code>example</code> in a <code>gr.Interface</code> or <code>gr.Examples</code>.</p> <p>To do so, we're going to add some of the pdf rendering logic in <code>Index.svelte</code> to <code>Example.svelte</code>.</p> <pre><code>&lt;script lang=\"ts\"&gt;\n    export let value: string;\n    export let samples_dir: string;\n    export let type: \"gallery\" | \"table\";\n    export let selected = false;\n    import pdfjsLib from \"pdfjs-dist\";\n    pdfjsLib.GlobalWorkerOptions.workerSrc =  \"https://cdn.bootcss.com/pdf.js/3.11.174/pdf.worker.js\";\n\n    let pdfDoc;\n    let canvasRef;\n\n    async function get_doc(url: string) {\n        const loadingTask = pdfjsLib.getDocument(url);\n        pdfDoc = await loadingTask.promise;\n        renderPage();\n        }\n\n    function renderPage() {\n        // Render a specific page of the PDF onto the canvas\n            pdfDoc.getPage(1).then(page =&gt; {\n                const ctx  = canvasRef.getContext('2d')\n                ctx.clearRect(0, 0, canvasRef.width, canvasRef.height);\n\n                const viewport = page.getViewport({ scale: 0.2 });\n\n                const renderContext = {\n                    canvasContext: ctx,\n                    viewport\n                };\n                canvasRef.width = viewport.width;\n                canvasRef.height = viewport.height;\n                page.render(renderContext);\n            });\n        }\n\n    $: get_doc(samples_dir + value);\n&lt;/script&gt;\n\n&lt;div\n    class:table={type === \"table\"}\n    class:gallery={type === \"gallery\"}\n    class:selected\n    style=\"justify-content: center; align-items: center; display: flex; flex-direction: column;\"\n&gt;\n    &lt;canvas bind:this={canvasRef}&gt;&lt;/canvas&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n    .gallery {\n        padding: var(--size-1) var(--size-2);\n    }\n&lt;/style&gt;\n</code></pre> <p>Tip: Exercise for the reader - reduce the code duplication between <code>Index.svelte</code> and <code>Example.svelte</code> \ud83d\ude0a</p> <p>You will not be able to render examples until we make some changes to the backend code in the next step!</p>"},{"location":"05_custom-components/07_pdf-component-example/#step-9-the-backend","title":"Step 9: The backend","text":"<p>The backend changes needed are smaller. We're almost done!</p> <p>What we're going to do is: * Add <code>change</code> and <code>upload</code> events to our component. * Add a <code>height</code> property to let users control the height of the PDF. * Set the <code>data_model</code> of our component to be <code>FileData</code>. This is so that Gradio can automatically cache and safely serve any files that are processed by our component. * Modify the <code>preprocess</code> method to return a string corresponding to the path of our uploaded PDF. * Modify the <code>postprocess</code> to turn a path to a PDF created in an event handler to a <code>FileData</code>.</p> <p>When all is said an done, your component's backend code should look like this:</p> <pre><code>from __future__ import annotations\nfrom typing import Any, Callable\n\nfrom gradio.components.base import Component\nfrom gradio.data_classes import FileData\nfrom gradio import processing_utils\n\nclass PDF(Component):\n\n    EVENTS = [\"change\", \"upload\"]\n\n    data_model = FileData\n\n    def __init__(self, value: Any = None, *,\n                 height: int | None = None,\n                 label: str | None = None, info: str | None = None,\n                 show_label: bool | None = None,\n                 container: bool = True,\n                 scale: int | None = None,\n                 min_width: int | None = None,\n                 interactive: bool | None = None,\n                 visible: bool = True,\n                 elem_id: str | None = None,\n                 elem_classes: list[str] | str | None = None,\n                 render: bool = True,\n                 load_fn: Callable[..., Any] | None = None,\n                 every: float | None = None):\n        super().__init__(value, label=label, info=info,\n                         show_label=show_label, container=container,\n                         scale=scale, min_width=min_width,\n                         interactive=interactive, visible=visible,\n                         elem_id=elem_id, elem_classes=elem_classes,\n                         render=render, load_fn=load_fn, every=every)\n        self.height = height\n\n    def preprocess(self, payload: FileData) -&gt; str:\n        return payload.path\n\n    def postprocess(self, value: str | None) -&gt; FileData:\n        if not value:\n            return None\n        return FileData(path=value)\n\n    def example_inputs(self):\n        return \"https://gradio-builds.s3.amazonaws.com/assets/pdf-guide/fw9.pdf\"\n\n    def as_example(self, input_data: str | None) -&gt; str | None:\n        if input_data is None:\n            return None\n        return processing_utils.move_resource_to_block_cache(input_data, self)\n</code></pre>"},{"location":"05_custom-components/07_pdf-component-example/#step-10-add-a-demo-and-publish","title":"Step 10: Add a demo and publish!","text":"<p>To test our backend code, let's add a more complex demo that performs Document Question and Answering with huggingface transformers.</p> <p>In our <code>demo</code> directory, create a <code>requirements.txt</code> file with the following packages</p> <pre><code>torch\ntransformers\npdf2image\npytesseract\n</code></pre> <p>Tip: Remember to install these yourself and restart the dev server! You may need to install extra non-python dependencies for <code>pdf2image</code>. See here. Feel free to write your own demo if you have trouble.</p> <pre><code>import gradio as gr\nfrom gradio_pdf import PDF\nfrom pdf2image import convert_from_path\nfrom transformers import pipeline\nfrom pathlib import Path\n\ndir_ = Path(__file__).parent\n\np = pipeline(\n    \"document-question-answering\",\n    model=\"impira/layoutlm-document-qa\",\n)\n\ndef qa(question: str, doc: str) -&gt; str:\n    img = convert_from_path(doc)[0]\n    output = p(img, question)\n    return sorted(output, key=lambda x: x[\"score\"], reverse=True)[0]['answer']\n\n\ndemo = gr.Interface(\n    qa,\n    [gr.Textbox(label=\"Question\"), PDF(label=\"Document\")],\n    gr.Textbox(),\n)\n\ndemo.launch()\n</code></pre> <p>See our demo in action below!</p> <p>Finally lets build our component with <code>gradio cc build</code> and publish it with the <code>gradio cc publish</code> command! This will guide you through the process of uploading your component to PyPi and HuggingFace Spaces.</p> <p>Tip: You may need to add the following lines to the <code>Dockerfile</code> of your HuggingFace Space.</p> <pre><code>RUN mkdir -p /tmp/cache/\nRUN chmod a+rwx -R /tmp/cache/\nRUN apt-get update &amp;&amp; apt-get install -y poppler-utils tesseract-ocr\n\nENV TRANSFORMERS_CACHE=/tmp/cache/\n</code></pre>"},{"location":"05_custom-components/07_pdf-component-example/#conclusion","title":"Conclusion","text":"<p>In order to use our new component in any gradio 4.0 app, simply install it with pip, e.g. <code>pip install gradio-pdf</code>. Then you can use it like the built-in <code>gr.File()</code> component (except that it will only accept and display PDF files).</p> <p>Here is a simple demo with the Blocks api:</p> <pre><code>import gradio as gr\nfrom gradio_pdf import PDF\n\nwith gr.Blocks() as demo:\n    pdf = PDF(label=\"Upload a PDF\", interactive=True)\n    name = gr.Textbox()\n    pdf.upload(lambda f: f, pdf, name)\n\ndemo.launch()\n</code></pre> <p>I hope you enjoyed this tutorial! The complete source code for our component is here. Please don't hesitate to reach out to the gradio community on the HuggingFace Discord if you get stuck.</p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/","title":"Build a Custom Multimodal Chatbot - Part 1","text":"<p>This is the first in a two part series where we build a custom Multimodal Chatbot component. In part 1, we will modify the Gradio Chatbot component to display text and media files (video, audio, image) in the same message. In part 2, we will build a custom Textbox component that will be able to send multimodal messages (text and media files) to the chatbot.</p> <p>You can follow along with the author of this post as he implements the chatbot component in the following YouTube video!</p> <p>Here's a preview of what our multimodal chatbot component will look like:</p> <p></p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-1-creating-our-project","title":"Part 1 - Creating our project","text":"<p>For this demo we will be tweaking the existing Gradio <code>Chatbot</code> component to display text and media files in the same message. Let's create a new custom component directory by templating off of the <code>Chatbot</code> component source code.</p> <pre><code>gradio cc create MultimodalChatbot --template Chatbot\n</code></pre> <p>And we're ready to go!</p> <p>Tip: Make sure to modify the <code>Author</code> key in the <code>pyproject.toml</code> file.</p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-2a-the-backend-data_model","title":"Part 2a - The backend data_model","text":"<p>Open up the <code>multimodalchatbot.py</code> file in your favorite code editor and let's get started modifying the backend of our component.</p> <p>The first thing we will do is create the <code>data_model</code> of our component. The <code>data_model</code> is the data format that your python component will receive and send to the javascript client running the UI. You can read more about the <code>data_model</code> in the backend guide.</p> <p>For our component, each chatbot message will consist of two keys: a <code>text</code> key that displays the text message and an optional list of media files that can be displayed underneath the text.</p> <p>Import the <code>FileData</code> and <code>GradioModel</code> classes from <code>gradio.data_classes</code> and modify the existing <code>ChatbotData</code> class to look like the following:</p> <pre><code>class FileMessage(GradioModel):\n    file: FileData\n    alt_text: Optional[str] = None\n\n\nclass MultimodalMessage(GradioModel):\n    text: Optional[str] = None\n    files: Optional[List[FileMessage]] = None\n\n\nclass ChatbotData(GradioRootModel):\n    root: List[Tuple[Optional[MultimodalMessage], Optional[MultimodalMessage]]]\n\n\nclass MultimodalChatbot(Component):\n    ...\n    data_model = ChatbotData\n</code></pre> <p>Tip: The <code>data_model</code>s are implemented using <code>Pydantic V2</code>. Read the documentation here.</p> <p>We've done the hardest part already!</p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-2b-the-pre-and-postprocess-methods","title":"Part 2b - The pre and postprocess methods","text":"<p>For the <code>preprocess</code> method, we will keep it simple and pass a list of <code>MultimodalMessage</code>s to the python functions that use this component as input.  This will let users of our component access the chatbot data with <code>.text</code> and <code>.files</code> attributes. This is a design choice that you can modify in your implementation! We can return the list of messages with the <code>root</code> property of the <code>ChatbotData</code> like so:</p> <pre><code>def preprocess(\n    self,\n    payload: ChatbotData | None,\n) -&gt; List[MultimodalMessage] | None:\n    if payload is None:\n        return payload\n    return payload.root\n</code></pre> <p>Tip: Learn about the reasoning behind the <code>preprocess</code> and <code>postprocess</code> methods in the key concepts guide</p> <p>In the <code>postprocess</code> method we will coerce each message returned by the python function to be a <code>MultimodalMessage</code> class.  We will also clean up any indentation in the <code>text</code> field so that it can be properly displayed as markdown in the frontend.</p> <p>We can leave the <code>postprocess</code> method as is and modify the <code>_postprocess_chat_messages</code></p> <pre><code>def _postprocess_chat_messages(\n    self, chat_message: MultimodalMessage | dict | None\n) -&gt; MultimodalMessage | None:\n    if chat_message is None:\n        return None\n    if isinstance(chat_message, dict):\n        chat_message = MultimodalMessage(**chat_message)\n    chat_message.text = inspect.cleandoc(chat_message.text or \"\")\n    for file_ in chat_message.files:\n        file_.file.mime_type = client_utils.get_mimetype(file_.file.path)\n    return chat_message\n</code></pre> <p>Before we wrap up with the backend code, let's modify the <code>example_inputs</code> method to return a valid dictionary representation of the <code>ChatbotData</code>:</p> <pre><code>def example_inputs(self) -&gt; Any:\n    return [[{\"text\": \"Hello!\", \"files\": []}, None]]\n</code></pre> <p>Congrats - the backend is complete!</p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-3a-the-indexsvelte-file","title":"Part 3a - The Index.svelte file","text":"<p>The frontend for the <code>Chatbot</code> component is divided into two parts - the <code>Index.svelte</code> file and the <code>shared/Chatbot.svelte</code> file. The <code>Index.svelte</code> file applies some processing to the data received from the server and then delegates the rendering of the conversation to the <code>shared/Chatbot.svelte</code> file. First we will modify the <code>Index.svelte</code> file to apply processing to the new data type the backend will return.</p> <p>Let's begin by porting our custom types  from our python <code>data_model</code> to typescript. Open <code>frontend/shared/utils.ts</code> and add the following type definitions at the top of the file:</p> <pre><code>export type FileMessage = {\n    file: FileData;\n    alt_text?: string;\n};\n\n\nexport type MultimodalMessage = {\n    text: string;\n    files?: FileMessage[];\n}\n</code></pre> <p>Now let's import them in <code>Index.svelte</code> and modify the type annotations for <code>value</code> and <code>_value</code>.</p> <pre><code>import type { FileMessage, MultimodalMessage } from \"./shared/utils\";\n\nexport let value: [\n    MultimodalMessage | null,\n    MultimodalMessage | null\n][] = [];\n\nlet _value: [\n    MultimodalMessage | null,\n    MultimodalMessage | null\n][];\n</code></pre> <p>We need to normalize each message to make sure each file has a proper URL to fetch its contents from. We also need to format any embedded file links in the <code>text</code> key. Let's add a <code>process_message</code> utility function and apply it whenever the <code>value</code> changes.</p> <pre><code>function process_message(msg: MultimodalMessage | null): MultimodalMessage | null {\n    if (msg === null) {\n        return msg;\n    }\n    msg.text = redirect_src_url(msg.text);\n    msg.files = msg.files.map(normalize_messages);\n    return msg;\n}\n\n$: _value = value\n    ? value.map(([user_msg, bot_msg]) =&gt; [\n            process_message(user_msg),\n            process_message(bot_msg)\n        ])\n    : [];\n</code></pre>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-3b-the-chatbotsvelte-file","title":"Part 3b - the Chatbot.svelte file","text":"<p>Let's begin similarly to the <code>Index.svelte</code> file and let's first modify the type annotations. Import <code>Mulimodal</code> message at the top of the <code>&lt;script&gt;</code> section and use it to type the <code>value</code> and <code>old_value</code> variables.</p> <pre><code>import type { MultimodalMessage } from \"./utils\";\n\nexport let value:\n    | [\n            MultimodalMessage | null,\n            MultimodalMessage | null\n        ][]\n    | null;\nlet old_value:\n    | [\n            MultimodalMessage | null,\n            MultimodalMessage | null\n        ][]\n    | null = null;\n</code></pre> <p>We also need to modify the <code>handle_select</code> and <code>handle_like</code> functions:</p> <pre><code>function handle_select(\n    i: number,\n    j: number,\n    message: MultimodalMessage | null\n): void {\n    dispatch(\"select\", {\n        index: [i, j],\n        value: message\n    });\n}\n\nfunction handle_like(\n    i: number,\n    j: number,\n    message: MultimodalMessage | null,\n    liked: boolean\n): void {\n    dispatch(\"like\", {\n        index: [i, j],\n        value: message,\n        liked: liked\n    });\n}\n</code></pre> <p>Now for the fun part, actually rendering the text and files in the same message!</p> <p>You should see some code like the following that determines whether a file or a markdown message should be displayed depending on the type of the message:</p> <pre><code>{#if typeof message === \"string\"}\n    &lt;Markdown\n        {message}\n        {latex_delimiters}\n        {sanitize_html}\n        {render_markdown}\n        {line_breaks}\n        on:load={scroll}\n    /&gt;\n{:else if message !== null &amp;&amp; message.file?.mime_type?.includes(\"audio\")}\n    &lt;audio\n        data-testid=\"chatbot-audio\"\n        controls\n        preload=\"metadata\"\n        ...\n</code></pre> <p>We will modify this code to always display the text message and then loop through the files and display all of them that are present:</p> <pre><code>&lt;Markdown\n    message={message.text}\n    {latex_delimiters}\n    {sanitize_html}\n    {render_markdown}\n    {line_breaks}\n    on:load={scroll}\n/&gt;\n{#each message.files as file, k}\n    {#if file !== null &amp;&amp; file.file.mime_type?.includes(\"audio\")}\n        &lt;audio\n            data-testid=\"chatbot-audio\"\n            controls\n            preload=\"metadata\"\n            src={file.file?.url}\n            title={file.alt_text}\n            on:play\n            on:pause\n            on:ended\n        /&gt;\n    {:else if message !== null &amp;&amp; file.file?.mime_type?.includes(\"video\")}\n        &lt;video\n            data-testid=\"chatbot-video\"\n            controls\n            src={file.file?.url}\n            title={file.alt_text}\n            preload=\"auto\"\n            on:play\n            on:pause\n            on:ended\n        &gt;\n            &lt;track kind=\"captions\" /&gt;\n        &lt;/video&gt;\n    {:else if message !== null &amp;&amp; file.file?.mime_type?.includes(\"image\")}\n        &lt;img\n            data-testid=\"chatbot-image\"\n            src={file.file?.url}\n            alt={file.alt_text}\n        /&gt;\n    {:else if message !== null &amp;&amp; file.file?.url !== null}\n        &lt;a\n            data-testid=\"chatbot-file\"\n            href={file.file?.url}\n            target=\"_blank\"\n            download={window.__is_colab__\n                ? null\n                : file.file?.orig_name || file.file?.path}\n        &gt;\n            {file.file?.orig_name || file.file?.path}\n        &lt;/a&gt;\n    {:else if pending_message &amp;&amp; j === 1}\n        &lt;Pending {layout} /&gt;\n    {/if}\n{/each}\n</code></pre> <p>We did it! \ud83c\udf89</p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-4-the-demo","title":"Part 4 - The demo","text":"<p>For this tutorial, let's keep the demo simple and just display a static conversation between a hypothetical user and a bot. This demo will show how both the user and the bot can send files.  In part 2 of this tutorial series we will build a fully functional chatbot demo!</p> <p>The demo code will look like the following:</p> <pre><code>import gradio as gr\nfrom gradio_multimodalchatbot import MultimodalChatbot\nfrom gradio.data_classes import FileData\n\nuser_msg1 = {\"text\": \"Hello, what is in this image?\",\n             \"files\": [{\"file\": FileData(path=\"https://gradio-builds.s3.amazonaws.com/diffusion_image/cute_dog.jpg\")}]\n             }\nbot_msg1 = {\"text\": \"It is a very cute dog\",\n            \"files\": []}\n\nuser_msg2 = {\"text\": \"Describe this audio clip please.\",\n             \"files\": [{\"file\": FileData(path=\"cantina.wav\")}]}\nbot_msg2 = {\"text\": \"It is the cantina song from Star Wars\",\n            \"files\": []}\n\nuser_msg3 = {\"text\": \"Give me a video clip please.\",\n             \"files\": []}\nbot_msg3 = {\"text\": \"Here is a video clip of the world\",\n            \"files\": [{\"file\": FileData(path=\"world.mp4\")},\n                      {\"file\": FileData(path=\"cantina.wav\")}]}\n\nconversation = [[user_msg1, bot_msg1], [user_msg2, bot_msg2], [user_msg3, bot_msg3]]\n\nwith gr.Blocks() as demo:\n    MultimodalChatbot(value=conversation, height=800)\n\n\ndemo.launch()\n</code></pre> <p>Tip: Change the filepaths so that they correspond to files on your machine. Also, if you are running in development mode, make sure the files are located in the top level of your custom component directory.</p>"},{"location":"05_custom-components/08_multimodal-chatbot-part1/#part-5-deploying-and-conclusion","title":"Part 5 - Deploying and Conclusion","text":"<p>Let's build and deploy our demo with <code>gradio cc build</code> and <code>gradio cc deploy</code>!</p> <p>You can check out our component deployed to HuggingFace Spaces and all of the source code is available here.</p> <p>See you in the next installment of this series!</p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/","title":"Using Hugging Face Integrations","text":"<p>Related spaces: https://huggingface.co/spaces/gradio/helsinki_translation_en_es Tags: HUB, SPACES, EMBED</p> <p>Contributed by Omar Sanseviero \ud83e\udd99</p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#introduction","title":"Introduction","text":"<p>The Hugging Face Hub is a central platform that has over 190,000 models, 32,000 datasets and 40,000 demos, also known as Spaces. Although Hugging Face is famous for its \ud83e\udd17 transformers and diffusers libraries, the Hub also supports dozens of ML libraries, such as PyTorch, TensorFlow, spaCy, and many others across a variety of domains, from computer vision to reinforcement learning.</p> <p>Gradio has multiple features that make it extremely easy to leverage existing models and Spaces on the Hub. This guide walks through these features.</p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#using-regular-inference-with-pipeline","title":"Using regular inference with <code>pipeline</code>","text":"<p>First, let's build a simple interface that translates text from English to Spanish. Between the over a thousand models shared by the University of Helsinki, there is an existing model, <code>opus-mt-en-es</code>, that does precisely this!</p> <p>The \ud83e\udd17 transformers library has a very easy-to-use abstraction, <code>pipeline()</code> that handles most of the complex code to offer a simple API for common tasks. By specifying the task and an (optional) model, you can use an existing model with few lines:</p> <pre><code>import gradio as gr\n\nfrom transformers import pipeline\n\npipe = pipeline(\"translation\", model=\"Helsinki-NLP/opus-mt-en-es\")\n\ndef predict(text):\n  return pipe(text)[0][\"translation_text\"]\n\ndemo = gr.Interface(\n  fn=predict,\n  inputs='text',\n  outputs='text',\n)\n\ndemo.launch()\n</code></pre> <p>But <code>gradio</code> actually makes it even easier to convert a <code>pipeline</code> to a demo, simply by using the <code>gradio.Interface.from_pipeline</code> methods, which skips the need to specify the input and output components:</p> <pre><code>from transformers import pipeline\nimport gradio as gr\n\npipe = pipeline(\"translation\", model=\"Helsinki-NLP/opus-mt-en-es\")\n\ndemo = gr.Interface.from_pipeline(pipe)\ndemo.launch()\n</code></pre> <p>The previous code produces the following interface, which you can try right here in your browser:</p> <p></p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#using-hugging-face-inference-api","title":"Using Hugging Face Inference API","text":"<p>Hugging Face has a free service called the Inference API, which allows you to send HTTP requests to models in the Hub. For transformers or diffusers-based models, the API can be 2 to 10 times faster than running the inference yourself. The API is free (rate limited), and you can switch to dedicated Inference Endpoints when you want to use it in production.</p> <p>Let's try the same demo as above but using the Inference API instead of loading the model yourself. Given a Hugging Face model supported in the Inference API, Gradio can automatically infer the expected input and output and make the underlying server calls, so you don't have to worry about defining the prediction function. Here is what the code would look like!</p> <pre><code>import gradio as gr\n\ndemo = gr.load(\"Helsinki-NLP/opus-mt-en-es\", src=\"models\")\n\ndemo.launch()\n</code></pre> <p>Notice that we just put specify the model name and state that the <code>src</code> should be <code>models</code> (Hugging Face's Model Hub). There is no need to install any dependencies (except <code>gradio</code>) since you are not loading the model on your computer.</p> <p>You might notice that the first inference takes about 20 seconds. This happens since the Inference API is loading the model in the server. You get some benefits afterward:</p> <ul> <li>The inference will be much faster.</li> <li>The server caches your requests.</li> <li>You get built-in automatic scaling.</li> </ul>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#hosting-your-gradio-demos","title":"Hosting your Gradio demos","text":"<p>Hugging Face Spaces allows anyone to host their Gradio demos freely, and uploading your Gradio demos take a couple of minutes. You can head to hf.co/new-space, select the Gradio SDK, create an <code>app.py</code> file, and voila! You have a demo you can share with anyone else. To learn more, read this guide how to host on Hugging Face Spaces using the website.</p> <p>Alternatively, you can create a Space programmatically, making use of the huggingface_hub client library library. Here's an example:</p> <pre><code>from huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file,\n)\ncreate_repo(name=target_space_name, token=hf_token, repo_type=\"space\", space_sdk=\"gradio\")\nrepo_name = get_full_repo_name(model_id=target_space_name, token=hf_token)\nfile_url = upload_file(\n    path_or_fileobj=\"file.txt\",\n    path_in_repo=\"app.py\",\n    repo_id=repo_name,\n    repo_type=\"space\",\n    token=hf_token,\n)\n</code></pre> <p>Here, <code>create_repo</code> creates a gradio repo with the target name under a specific account using that account's Write Token. <code>repo_name</code> gets the full repo name of the related repo. Finally <code>upload_file</code> uploads a file inside the repo with the name <code>app.py</code>.</p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#embedding-your-space-demo-on-other-websites","title":"Embedding your Space demo on other websites","text":"<p>Throughout this guide, you've seen many embedded Gradio demos. You can also do this on own website! The first step is to create a Hugging Face Space with the demo you want to showcase. Then, follow the steps here to embed the Space on your website.</p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#loading-demos-from-spaces","title":"Loading demos from Spaces","text":"<p>You can also use and remix existing Gradio demos on Hugging Face Spaces. For example, you could take two existing Gradio demos and put them as separate tabs and create a new demo. You can run this new demo locally, or upload it to Spaces, allowing endless possibilities to remix and create new demos!</p> <p>Here's an example that does exactly that:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n  with gr.Tab(\"Translate to Spanish\"):\n    gr.load(\"gradio/helsinki_translation_en_es\", src=\"spaces\")\n  with gr.Tab(\"Translate to French\"):\n    gr.load(\"abidlabs/en2fr\", src=\"spaces\")\n\ndemo.launch()\n</code></pre> <p>Notice that we use <code>gr.load()</code>, the same method we used to load models using the Inference API. However, here we specify that the <code>src</code> is <code>spaces</code> (Hugging Face Spaces).</p>"},{"location":"06_integrating-other-frameworks/01_using-hugging-face-integrations/#recap","title":"Recap","text":"<p>That's it! Let's recap the various ways Gradio and Hugging Face work together:</p> <ol> <li>You can convert a <code>transformers</code> pipeline into a Gradio demo using <code>from_pipeline()</code></li> <li>You can build a demo around the Inference API without having to load the model easily using <code>gr.load()</code></li> <li>You host your Gradio demo on Hugging Face Spaces, either using the GUI or entirely in Python.</li> <li>You can embed Gradio demos that are hosted on Hugging Face Spaces onto your own website.</li> <li>You can load demos from Hugging Face Spaces to remix and create new Gradio demos using <code>gr.load()</code>.</li> </ol> <p>\ud83e\udd17</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/","title":"Using Gradio and Comet","text":"<p>Tags: COMET, SPACES Contributed by the Comet team</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#introduction","title":"Introduction","text":"<p>In this guide we will demonstrate some of the ways you can use Gradio with Comet. We will cover the basics of using Comet with Gradio and show you some of the ways that you can leverage Gradio's advanced features such as Embedding with iFrames and State to build some amazing model evaluation workflows.</p> <p>Here is a list of the topics covered in this guide.</p> <ol> <li>Logging Gradio UI's to your Comet Experiments</li> <li>Embedding Gradio Applications directly into your Comet Projects</li> <li>Embedding Hugging Face Spaces directly into your Comet Projects</li> <li>Logging Model Inferences from your Gradio Application to Comet</li> </ol>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#what-is-comet","title":"What is Comet?","text":"<p>Comet is an MLOps Platform that is designed to help Data Scientists and Teams build better models faster! Comet provides tooling to Track, Explain, Manage, and Monitor your models in a single place! It works with Jupyter Notebooks and Scripts and most importantly it's 100% free!</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#setup","title":"Setup","text":"<p>First, install the dependencies needed to run these examples</p> <pre><code>pip install comet_ml torch torchvision transformers gradio shap requests Pillow\n</code></pre> <p>Next, you will need to sign up for a Comet Account. Once you have your account set up, grab your API Key and configure your Comet credentials</p> <p>If you're running these examples as a script, you can either export your credentials as environment variables</p> <pre><code>export COMET_API_KEY=\"&lt;Your API Key&gt;\"\nexport COMET_WORKSPACE=\"&lt;Your Workspace Name&gt;\"\nexport COMET_PROJECT_NAME=\"&lt;Your Project Name&gt;\"\n</code></pre> <p>or set them in a <code>.comet.config</code> file in your working directory. You file should be formatted in the following way.</p> <pre><code>[comet]\napi_key=&lt;Your API Key&gt;\nworkspace=&lt;Your Workspace Name&gt;\nproject_name=&lt;Your Project Name&gt;\n</code></pre> <p>If you are using the provided Colab Notebooks to run these examples, please run the cell with the following snippet before starting the Gradio UI. Running this cell allows you to interactively add your API key to the notebook.</p> <pre><code>import comet_ml\ncomet_ml.init()\n</code></pre>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#1-logging-gradio-uis-to-your-comet-experiments","title":"1. Logging Gradio UI's to your Comet Experiments","text":"<p>In this example, we will go over how to log your Gradio Applications to Comet and interact with them using the Gradio Custom Panel.</p> <p>Let's start by building a simple Image Classification example using <code>resnet18</code>.</p> <pre><code>import comet_ml\n\nimport requests\nimport torch\nfrom PIL import Image\nfrom torchvision import transforms\n\ntorch.hub.download_url_to_file(\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n\nif torch.cuda.is_available():\n    device = \"cuda\"\nelse:\n    device = \"cpu\"\n\nmodel = torch.hub.load(\"pytorch/vision:v0.6.0\", \"resnet18\", pretrained=True).eval()\nmodel = model.to(device)\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\n\ndef predict(inp):\n    inp = Image.fromarray(inp.astype(\"uint8\"), \"RGB\")\n    inp = transforms.ToTensor()(inp).unsqueeze(0)\n    with torch.no_grad():\n        prediction = torch.nn.functional.softmax(model(inp.to(device))[0], dim=0)\n    return {labels[i]: float(prediction[i]) for i in range(1000)}\n\n\ninputs = gr.Image()\noutputs = gr.Label(num_top_classes=3)\n\nio = gr.Interface(\n    fn=predict, inputs=inputs, outputs=outputs, examples=[\"dog.jpg\"]\n)\nio.launch(inline=False, share=True)\n\nexperiment = comet_ml.Experiment()\nexperiment.add_tag(\"image-classifier\")\n\nio.integrate(comet_ml=experiment)\n</code></pre> <p>The last line in this snippet will log the URL of the Gradio Application to your Comet Experiment. You can find the URL in the Text Tab of your Experiment.</p> <p>Add the Gradio Panel to your Experiment to interact with your application.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#2-embedding-gradio-applications-directly-into-your-comet-projects","title":"2. Embedding Gradio Applications directly into your Comet Projects","text":"<p>If you are permanently hosting your Gradio application, you can embed the UI using the Gradio Panel Extended custom Panel.</p> <p>Go to your Comet Project page, and head over to the Panels tab. Click the <code>+ Add</code> button to bring up the Panels search page.</p> <p></p> <p>Next, search for Gradio Panel Extended in the Public Panels section and click <code>Add</code>.</p> <p></p> <p>Once you have added your Panel, click <code>Edit</code> to access to the Panel Options page and paste in the URL of your Gradio application.</p> <p></p> <p></p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#3-embedding-hugging-face-spaces-directly-into-your-comet-projects","title":"3. Embedding Hugging Face Spaces directly into your Comet Projects","text":"<p>You can also embed Gradio Applications that are hosted on Hugging Faces Spaces into your Comet Projects using the Hugging Face Spaces Panel.</p> <p>Go to your Comet Project page, and head over to the Panels tab. Click the <code>+ Add</code> button to bring up the Panels search page. Next, search for the Hugging Face Spaces Panel in the Public Panels section and click <code>Add</code>.</p> <p></p> <p>Once you have added your Panel, click Edit to access to the Panel Options page and paste in the path of your Hugging Face Space e.g. <code>pytorch/ResNet</code></p> <p></p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#4-logging-model-inferences-to-comet","title":"4. Logging Model Inferences to Comet","text":"<p>In the previous examples, we demonstrated the various ways in which you can interact with a Gradio application through the Comet UI. Additionally, you can also log model inferences, such as SHAP plots, from your Gradio application to Comet.</p> <p>In the following snippet, we're going to log inferences from a Text Generation model. We can persist an Experiment across multiple inference calls using Gradio's State object. This will allow you to log multiple inferences from a model to a single Experiment.</p> <pre><code>import comet_ml\nimport gradio as gr\nimport shap\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\nif torch.cuda.is_available():\n    device = \"cuda\"\nelse:\n    device = \"cpu\"\n\nMODEL_NAME = \"gpt2\"\n\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME)\n\n# set model decoder to true\nmodel.config.is_decoder = True\n# set text-generation params under task_specific_params\nmodel.config.task_specific_params[\"text-generation\"] = {\n    \"do_sample\": True,\n    \"max_length\": 50,\n    \"temperature\": 0.7,\n    \"top_k\": 50,\n    \"no_repeat_ngram_size\": 2,\n}\nmodel = model.to(device)\n\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nexplainer = shap.Explainer(model, tokenizer)\n\n\ndef start_experiment():\n    \"\"\"Returns an APIExperiment object that is thread safe\n    and can be used to log inferences to a single Experiment\n    \"\"\"\n    try:\n        api = comet_ml.API()\n        workspace = api.get_default_workspace()\n        project_name = comet_ml.config.get_config()[\"comet.project_name\"]\n\n        experiment = comet_ml.APIExperiment(\n            workspace=workspace, project_name=project_name\n        )\n        experiment.log_other(\"Created from\", \"gradio-inference\")\n\n        message = f\"Started Experiment: [{experiment.name}]({experiment.url})\"\n\n        return (experiment, message)\n\n    except Exception as e:\n        return None, None\n\n\ndef predict(text, state, message):\n    experiment = state\n\n    shap_values = explainer([text])\n    plot = shap.plots.text(shap_values, display=False)\n\n    if experiment is not None:\n        experiment.log_other(\"message\", message)\n        experiment.log_html(plot)\n\n    return plot\n\n\nwith gr.Blocks() as demo:\n    start_experiment_btn = gr.Button(\"Start New Experiment\")\n    experiment_status = gr.Markdown()\n\n    # Log a message to the Experiment to provide more context\n    experiment_message = gr.Textbox(label=\"Experiment Message\")\n    experiment = gr.State()\n\n    input_text = gr.Textbox(label=\"Input Text\", lines=5, interactive=True)\n    submit_btn = gr.Button(\"Submit\")\n\n    output = gr.HTML(interactive=True)\n\n    start_experiment_btn.click(\n        start_experiment, outputs=[experiment, experiment_status]\n    )\n    submit_btn.click(\n        predict, inputs=[input_text, experiment, experiment_message], outputs=[output]\n    )\n</code></pre> <p>Inferences from this snippet will be saved in the HTML tab of your experiment.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#conclusion","title":"Conclusion","text":"<p>We hope you found this guide useful and that it provides some inspiration to help you build awesome model evaluation workflows with Comet and Gradio.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#how-to-contribute-gradio-demos-on-hf-spaces-on-the-comet-organization","title":"How to contribute Gradio demos on HF spaces on the Comet organization","text":"<ul> <li>Create an account on Hugging Face here.</li> <li>Add Gradio Demo under your username, see this course for setting up Gradio Demo on Hugging Face.</li> <li>Request to join the Comet organization here.</li> </ul>"},{"location":"06_integrating-other-frameworks/Gradio-and-Comet/#additional-resources","title":"Additional Resources","text":"<ul> <li>Comet Documentation</li> </ul>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/","title":"Gradio and ONNX on Hugging Face","text":"<p>Related spaces: https://huggingface.co/spaces/onnx/EfficientNet-Lite4 Tags: ONNX, SPACES Contributed by Gradio and the ONNX team</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#introduction","title":"Introduction","text":"<p>In this Guide, we'll walk you through:</p> <ul> <li>Introduction of ONNX, ONNX model zoo, Gradio, and Hugging Face Spaces</li> <li>How to setup a Gradio demo for EfficientNet-Lite4</li> <li>How to contribute your own Gradio demos for the ONNX organization on Hugging Face</li> </ul> <p>Here's an example of an ONNX model.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#what-is-the-onnx-model-zoo","title":"What is the ONNX Model Zoo?","text":"<p>Open Neural Network Exchange (ONNX) is an open standard format for representing machine learning models. ONNX is supported by a community of partners who have implemented it in many frameworks and tools. For example, if you have trained a model in TensorFlow or PyTorch, you can convert it to ONNX easily, and from there run it on a variety of devices using an engine/compiler like ONNX Runtime.</p> <p>The ONNX Model Zoo is a collection of pre-trained, state-of-the-art models in the ONNX format contributed by community members. Accompanying each model are Jupyter notebooks for model training and running inference with the trained model. The notebooks are written in Python and include links to the training dataset as well as references to the original paper that describes the model architecture.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#what-are-hugging-face-spaces-gradio","title":"What are Hugging Face Spaces &amp; Gradio?","text":""},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#gradio","title":"Gradio","text":"<p>Gradio lets users demo their machine learning models as a web app all in python code. Gradio wraps a python function into a user interface and the demos can be launched inside jupyter notebooks, colab notebooks, as well as embedded in your own website and hosted on Hugging Face Spaces for free.</p> <p>Get started here</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#hugging-face-spaces","title":"Hugging Face Spaces","text":"<p>Hugging Face Spaces is a free hosting option for Gradio demos. Spaces comes with 3 SDK options: Gradio, Streamlit and Static HTML demos. Spaces can be public or private and the workflow is similar to github repos. There are over 2000+ spaces currently on Hugging Face. Learn more about spaces here.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#hugging-face-models","title":"Hugging Face Models","text":"<p>Hugging Face Model Hub also supports ONNX models and ONNX models can be filtered through the ONNX tag</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#how-did-hugging-face-help-the-onnx-model-zoo","title":"How did Hugging Face help the ONNX Model Zoo?","text":"<p>There are a lot of Jupyter notebooks in the ONNX Model Zoo for users to test models. Previously, users needed to download the models themselves and run those notebooks locally for testing. With Hugging Face, the testing process can be much simpler and more user-friendly. Users can easily try certain ONNX Model Zoo model on Hugging Face Spaces and run a quick demo powered by Gradio with ONNX Runtime, all on cloud without downloading anything locally. Note, there are various runtimes for ONNX, e.g., ONNX Runtime, MXNet.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#what-is-the-role-of-onnx-runtime","title":"What is the role of ONNX Runtime?","text":"<p>ONNX Runtime is a cross-platform inference and training machine-learning accelerator. It makes live Gradio demos with ONNX Model Zoo model on Hugging Face possible.</p> <p>ONNX Runtime inference can enable faster customer experiences and lower costs, supporting models from deep learning frameworks such as PyTorch and TensorFlow/Keras as well as classical machine learning libraries such as scikit-learn, LightGBM, XGBoost, etc. ONNX Runtime is compatible with different hardware, drivers, and operating systems, and provides optimal performance by leveraging hardware accelerators where applicable alongside graph optimizations and transforms. For more information please see the official website.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#setting-up-a-gradio-demo-for-efficientnet-lite4","title":"Setting up a Gradio Demo for EfficientNet-Lite4","text":"<p>EfficientNet-Lite 4 is the largest variant and most accurate of the set of EfficientNet-Lite models. It is an integer-only quantized model that produces the highest accuracy of all of the EfficientNet models. It achieves 80.4% ImageNet top-1 accuracy, while still running in real-time (e.g. 30ms/image) on a Pixel 4 CPU. To learn more read the model card</p> <p>Here we walk through setting up a example demo for EfficientNet-Lite4 using Gradio</p> <p>First we import our dependencies and download and load the efficientnet-lite4 model from the onnx model zoo. Then load the labels from the labels_map.txt file. We then setup our preprocessing functions, load the model for inference, and setup the inference function. Finally, the inference function is wrapped into a gradio interface for a user to interact with. See the full code below.</p> <pre><code>import numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport cv2\nimport json\nimport gradio as gr\nfrom huggingface_hub import hf_hub_download\nfrom onnx import hub\nimport onnxruntime as ort\n\n# loads ONNX model from ONNX Model Zoo\nmodel = hub.load(\"efficientnet-lite4\")\n# loads the labels text file\nlabels = json.load(open(\"labels_map.txt\", \"r\"))\n\n# sets image file dimensions to 224x224 by resizing and cropping image from center\ndef pre_process_edgetpu(img, dims):\n    output_height, output_width, _ = dims\n    img = resize_with_aspectratio(img, output_height, output_width, inter_pol=cv2.INTER_LINEAR)\n    img = center_crop(img, output_height, output_width)\n    img = np.asarray(img, dtype='float32')\n    # converts jpg pixel value from [0 - 255] to float array [-1.0 - 1.0]\n    img -= [127.0, 127.0, 127.0]\n    img /= [128.0, 128.0, 128.0]\n    return img\n\n# resizes the image with a proportional scale\ndef resize_with_aspectratio(img, out_height, out_width, scale=87.5, inter_pol=cv2.INTER_LINEAR):\n    height, width, _ = img.shape\n    new_height = int(100. * out_height / scale)\n    new_width = int(100. * out_width / scale)\n    if height &gt; width:\n        w = new_width\n        h = int(new_height * height / width)\n    else:\n        h = new_height\n        w = int(new_width * width / height)\n    img = cv2.resize(img, (w, h), interpolation=inter_pol)\n    return img\n\n# crops the image around the center based on given height and width\ndef center_crop(img, out_height, out_width):\n    height, width, _ = img.shape\n    left = int((width - out_width) / 2)\n    right = int((width + out_width) / 2)\n    top = int((height - out_height) / 2)\n    bottom = int((height + out_height) / 2)\n    img = img[top:bottom, left:right]\n    return img\n\n\nsess = ort.InferenceSession(model)\n\ndef inference(img):\n  img = cv2.imread(img)\n  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n  img = pre_process_edgetpu(img, (224, 224, 3))\n\n  img_batch = np.expand_dims(img, axis=0)\n\n  results = sess.run([\"Softmax:0\"], {\"images:0\": img_batch})[0]\n  result = reversed(results[0].argsort()[-5:])\n  resultdic = {}\n  for r in result:\n      resultdic[labels[str(r)]] = float(results[0][r])\n  return resultdic\n\ntitle = \"EfficientNet-Lite4\"\ndescription = \"EfficientNet-Lite 4 is the largest variant and most accurate of the set of EfficientNet-Lite model. It is an integer-only quantized model that produces the highest accuracy of all of the EfficientNet models. It achieves 80.4% ImageNet top-1 accuracy, while still running in real-time (e.g. 30ms/image) on a Pixel 4 CPU.\"\nexamples = [['catonnx.jpg']]\ngr.Interface(inference, gr.Image(type=\"filepath\"), \"label\", title=title, description=description, examples=examples).launch()\n</code></pre>"},{"location":"06_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#how-to-contribute-gradio-demos-on-hf-spaces-using-onnx-models","title":"How to contribute Gradio demos on HF spaces using ONNX models","text":"<ul> <li>Add model to the onnx model zoo</li> <li>Create an account on Hugging Face here.</li> <li>See list of models left to add to ONNX organization, please refer to the table with the Models list</li> <li>Add Gradio Demo under your username, see this blog post for setting up Gradio Demo on Hugging Face.</li> <li>Request to join ONNX Organization here.</li> <li>Once approved transfer model from your username to ONNX organization</li> <li>Add a badge for model in model table, see examples in Models list</li> </ul>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/","title":"Gradio and W&amp;B Integration","text":"<p>Related spaces: https://huggingface.co/spaces/akhaliq/JoJoGAN Tags: WANDB, SPACES Contributed by Gradio team</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#introduction","title":"Introduction","text":"<p>In this Guide, we'll walk you through:</p> <ul> <li>Introduction of Gradio, and Hugging Face Spaces, and Wandb</li> <li>How to setup a Gradio demo using the Wandb integration for JoJoGAN</li> <li>How to contribute your own Gradio demos after tracking your experiments on wandb to the Wandb organization on Hugging Face</li> </ul>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#what-is-wandb","title":"What is Wandb?","text":"<p>Weights and Biases (W&amp;B) allows data scientists and machine learning scientists to track their machine learning experiments at every stage, from training to production. Any metric can be aggregated over samples and shown in panels in a customizable and searchable dashboard, like below:</p> <p></p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#what-are-hugging-face-spaces-gradio","title":"What are Hugging Face Spaces &amp; Gradio?","text":""},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#gradio","title":"Gradio","text":"<p>Gradio lets users demo their machine learning models as a web app, all in a few lines of Python. Gradio wraps any Python function (such as a machine learning model's inference function) into a user interface and the demos can be launched inside jupyter notebooks, colab notebooks, as well as embedded in your own website and hosted on Hugging Face Spaces for free.</p> <p>Get started here</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#hugging-face-spaces","title":"Hugging Face Spaces","text":"<p>Hugging Face Spaces is a free hosting option for Gradio demos. Spaces comes with 3 SDK options: Gradio, Streamlit and Static HTML demos. Spaces can be public or private and the workflow is similar to github repos. There are over 2000+ spaces currently on Hugging Face. Learn more about spaces here.</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#setting-up-a-gradio-demo-for-jojogan","title":"Setting up a Gradio Demo for JoJoGAN","text":"<p>Now, let's walk you through how to do this on your own. We'll make the assumption that you're new to W&amp;B and Gradio for the purposes of this tutorial.</p> <p>Let's get started!</p> <ol> <li>Create a W&amp;B account</li> </ol> <p>Follow these quick instructions to create your free account if you don\u2019t have one already. It shouldn't take more than a couple minutes. Once you're done (or if you've already got an account), next, we'll run a quick colab.</p> <ol> <li>Open Colab Install Gradio and W&amp;B</li> </ol> <p>We'll be following along with the colab provided in the JoJoGAN repo with some minor modifications to use Wandb and Gradio more effectively.</p> <p></p> <p>Install Gradio and Wandb at the top:</p> <pre><code>pip install gradio wandb\n</code></pre> <ol> <li>Finetune StyleGAN and W&amp;B experiment tracking</li> </ol> <p>This next step will open a W&amp;B dashboard to track your experiments and a gradio panel showing pretrained models to choose from a drop down menu from a Gradio Demo hosted on Huggingface Spaces. Here's the code you need for that:</p> <pre><code>alpha =  1.0\nalpha = 1-alpha\n\npreserve_color = True\nnum_iter = 100\nlog_interval = 50\n\n\nsamples = []\ncolumn_names = [\"Reference (y)\", \"Style Code(w)\", \"Real Face Image(x)\"]\n\nwandb.init(project=\"JoJoGAN\")\nconfig = wandb.config\nconfig.num_iter = num_iter\nconfig.preserve_color = preserve_color\nwandb.log(\n{\"Style reference\": [wandb.Image(transforms.ToPILImage()(target_im))]},\nstep=0)\n\n# load discriminator for perceptual loss\ndiscriminator = Discriminator(1024, 2).eval().to(device)\nckpt = torch.load('models/stylegan2-ffhq-config-f.pt', map_location=lambda storage, loc: storage)\ndiscriminator.load_state_dict(ckpt[\"d\"], strict=False)\n\n# reset generator\ndel generator\ngenerator = deepcopy(original_generator)\n\ng_optim = optim.Adam(generator.parameters(), lr=2e-3, betas=(0, 0.99))\n\n# Which layers to swap for generating a family of plausible real images -&gt; fake image\nif preserve_color:\n    id_swap = [9,11,15,16,17]\nelse:\n    id_swap = list(range(7, generator.n_latent))\n\nfor idx in tqdm(range(num_iter)):\n    mean_w = generator.get_latent(torch.randn([latents.size(0), latent_dim]).to(device)).unsqueeze(1).repeat(1, generator.n_latent, 1)\n    in_latent = latents.clone()\n    in_latent[:, id_swap] = alpha*latents[:, id_swap] + (1-alpha)*mean_w[:, id_swap]\n\n    img = generator(in_latent, input_is_latent=True)\n\n    with torch.no_grad():\n        real_feat = discriminator(targets)\n    fake_feat = discriminator(img)\n\n    loss = sum([F.l1_loss(a, b) for a, b in zip(fake_feat, real_feat)])/len(fake_feat)\n\n\n    wandb.log({\"loss\": loss}, step=idx)\n    if idx % log_interval == 0:\n        generator.eval()\n        my_sample = generator(my_w, input_is_latent=True)\n        generator.train()\n        my_sample = transforms.ToPILImage()(utils.make_grid(my_sample, normalize=True, range=(-1, 1)))\n        wandb.log(\n        {\"Current stylization\": [wandb.Image(my_sample)]},\n        step=idx)\n    table_data = [\n            wandb.Image(transforms.ToPILImage()(target_im)),\n            wandb.Image(img),\n            wandb.Image(my_sample),\n        ]\n    samples.append(table_data)\n\n    g_optim.zero_grad()\n    loss.backward()\n    g_optim.step()\n\nout_table = wandb.Table(data=samples, columns=column_names)\nwandb.log({\"Current Samples\": out_table})\n</code></pre> <p>alpha = 1.0 alpha = 1-alpha</p> <p>preserve_color = True num_iter = 100 log_interval = 50</p> <p>samples = [] column_names = [\"Referece (y)\", \"Style Code(w)\", \"Real Face Image(x)\"]</p> <p>wandb.init(project=\"JoJoGAN\") config = wandb.config config.num_iter = num_iter config.preserve_color = preserve_color wandb.log( {\"Style reference\": [wandb.Image(transforms.ToPILImage()(target_im))]}, step=0)</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#load-discriminator-for-perceptual-loss","title":"load discriminator for perceptual loss","text":"<p>discriminator = Discriminator(1024, 2).eval().to(device) ckpt = torch.load('models/stylegan2-ffhq-config-f.pt', map_location=lambda storage, loc: storage) discriminator.load_state_dict(ckpt[\"d\"], strict=False)</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#reset-generator","title":"reset generator","text":"<p>del generator generator = deepcopy(original_generator)</p> <p>g_optim = optim.Adam(generator.parameters(), lr=2e-3, betas=(0, 0.99))</p>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#which-layers-to-swap-for-generating-a-family-of-plausible-real-images-fake-image","title":"Which layers to swap for generating a family of plausible real images -&gt; fake image","text":"<p>if preserve_color: id_swap = [9,11,15,16,17] else: id_swap = list(range(7, generator.n_latent))</p> <p>for idx in tqdm(range(num_iter)): mean_w = generator.get_latent(torch.randn([latents.size(0), latent_dim]).to(device)).unsqueeze(1).repeat(1, generator.n_latent, 1) in_latent = latents.clone() in_latent[:, id_swap] = alphalatents[:, id_swap] + (1-alpha)mean_w[:, id_swap]</p> <pre><code>img = generator(in_latent, input_is_latent=True)\n\nwith torch.no_grad():\n    real_feat = discriminator(targets)\nfake_feat = discriminator(img)\n\nloss = sum([F.l1_loss(a, b) for a, b in zip(fake_feat, real_feat)])/len(fake_feat)\n\n\nwandb.log({\"loss\": loss}, step=idx)\nif idx % log_interval == 0:\n    generator.eval()\n    my_sample = generator(my_w, input_is_latent=True)\n    generator.train()\n    my_sample = transforms.ToPILImage()(utils.make_grid(my_sample, normalize=True, range=(-1, 1)))\n    wandb.log(\n    {\"Current stylization\": [wandb.Image(my_sample)]},\n    step=idx)\ntable_data = [\n        wandb.Image(transforms.ToPILImage()(target_im)),\n        wandb.Image(img),\n        wandb.Image(my_sample),\n    ]\nsamples.append(table_data)\n\ng_optim.zero_grad()\nloss.backward()\ng_optim.step()\n</code></pre> <p>out_table = wandb.Table(data=samples, columns=column_names) wandb.log({\"Current Samples\": out_table})</p> <pre><code>4. Save, Download, and Load Model\n\n    Here's how to save and download your model.\n\n```python\n\nfrom PIL import Image\nimport torch\ntorch.backends.cudnn.benchmark = True\nfrom torchvision import transforms, utils\nfrom util import *\nimport math\nimport random\nimport numpy as np\nfrom torch import nn, autograd, optim\nfrom torch.nn import functional as F\nfrom tqdm import tqdm\nimport lpips\nfrom model import *\nfrom e4e_projection import projection as e4e_projection\n\nfrom copy import deepcopy\nimport imageio\n\nimport os\nimport sys\nimport torchvision.transforms as transforms\nfrom argparse import Namespace\nfrom e4e.models.psp import pSp\nfrom util import *\nfrom huggingface_hub import hf_hub_download\nfrom google.colab import files\n\ntorch.save({\"g\": generator.state_dict()}, \"your-model-name.pt\")\n\nfiles.download('your-model-name.pt')\n\nlatent_dim = 512\ndevice=\"cuda\"\nmodel_path_s = hf_hub_download(repo_id=\"akhaliq/jojogan-stylegan2-ffhq-config-f\", filename=\"stylegan2-ffhq-config-f.pt\")\noriginal_generator = Generator(1024, latent_dim, 8, 2).to(device)\nckpt = torch.load(model_path_s, map_location=lambda storage, loc: storage)\noriginal_generator.load_state_dict(ckpt[\"g_ema\"], strict=False)\nmean_latent = original_generator.mean_latent(10000)\n\ngenerator = deepcopy(original_generator)\n\nckpt = torch.load(\"/content/JoJoGAN/your-model-name.pt\", map_location=lambda storage, loc: storage)\ngenerator.load_state_dict(ckpt[\"g\"], strict=False)\ngenerator.eval()\n\nplt.rcParams['figure.dpi'] = 150\n\n\n\ntransform = transforms.Compose(\n    [\n        transforms.Resize((1024, 1024)),\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n    ]\n)\n\n\ndef inference(img):\n    img.save('out.jpg')\n    aligned_face = align_face('out.jpg')\n\n    my_w = e4e_projection(aligned_face, \"out.pt\", device).unsqueeze(0)\n    with torch.no_grad():\n        my_sample = generator(my_w, input_is_latent=True)\n\n\n    npimage = my_sample[0].cpu().permute(1, 2, 0).detach().numpy()\n    imageio.imwrite('filename.jpeg', npimage)\n    return 'filename.jpeg'\n</code></pre> <ol> <li>Build a Gradio Demo</li> </ol> <pre><code>import gradio as gr\n\ntitle = \"JoJoGAN\"\ndescription = \"Gradio Demo for JoJoGAN: One Shot Face Stylization. To use it, simply upload your image, or click one of the examples to load them. Read more at the links below.\"\n\ndemo = gr.Interface(\n    inference,\n    gr.Image(type=\"pil\"),\n    gr.Image(type=\"file\"),\n    title=title,\n    description=description\n)\n\ndemo.launch(share=True)\n</code></pre> <ol> <li>Integrate Gradio into your W&amp;B Dashboard</li> </ol> <p>The last step\u2014integrating your Gradio demo with your W&amp;B dashboard\u2014is just one extra line:</p> <pre><code>demo.integrate(wandb=wandb)\n</code></pre> <pre><code>Once you call integrate, a demo will be created and you can integrate it into your dashboard or report\n\nOutside of W&amp;B with Web components, using the gradio-app tags allows anyone can embed Gradio demos on HF spaces directly into their blogs, websites, documentation, etc.:\n</code></pre> <pre><code>&lt;gradio-app space=\"akhaliq/JoJoGAN\"&gt; &lt;/gradio-app&gt;\n</code></pre> <ol> <li>(Optional) Embed W&amp;B plots in your Gradio App</li> </ol> <p>It's also possible to embed W&amp;B plots within Gradio apps. To do so, you can create a W&amp;B Report of your plots and    embed them within your Gradio app within a <code>gr.HTML</code> block.</p> <p>The Report will need to be public and you will need to wrap the URL within an iFrame like this:</p> <pre><code>import gradio as gr\n\ndef wandb_report(url):\n    iframe = f'&lt;iframe src={url} style=\"border:none;height:1024px;width:100%\"&gt;'\n    return gr.HTML(iframe)\n\nwith gr.Blocks() as demo:\n    report_url = 'https://wandb.ai/_scott/pytorch-sweeps-demo/reports/loss-22-10-07-16-00-17---VmlldzoyNzU2NzAx'\n    report = wandb_report(report_url)\n\ndemo.launch(share=True)\n</code></pre>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#conclusion","title":"Conclusion","text":"<p>We hope you enjoyed this brief demo of embedding a Gradio demo to a W&amp;B report! Thanks for making it to the end. To recap:</p> <ul> <li> <p>Only one single reference image is needed for fine-tuning JoJoGAN which usually takes about 1 minute on a GPU in colab. After training, style can be applied to any input image. Read more in the paper.</p> </li> <li> <p>W&amp;B tracks experiments with just a few lines of code added to a colab and you can visualize, sort, and understand your experiments in a single, centralized dashboard.</p> </li> <li> <p>Gradio, meanwhile, demos the model in a user friendly interface to share anywhere on the web.</p> </li> </ul>"},{"location":"06_integrating-other-frameworks/Gradio-and-Wandb-Integration/#how-to-contribute-gradio-demos-on-hf-spaces-on-the-wandb-organization","title":"How to contribute Gradio demos on HF spaces on the Wandb organization","text":"<ul> <li>Create an account on Hugging Face here.</li> <li>Add Gradio Demo under your username, see this course for setting up Gradio Demo on Hugging Face.</li> <li>Request to join wandb organization here.</li> <li>Once approved transfer model from your username to Wandb organization</li> </ul>"},{"location":"06_integrating-other-frameworks/image-classification-in-pytorch/","title":"Image Classification in PyTorch","text":"<p>Related spaces: https://huggingface.co/spaces/abidlabs/pytorch-image-classifier, https://huggingface.co/spaces/pytorch/ResNet, https://huggingface.co/spaces/pytorch/ResNext, https://huggingface.co/spaces/pytorch/SqueezeNet Tags: VISION, RESNET, PYTORCH</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-pytorch/#introduction","title":"Introduction","text":"<p>Image classification is a central task in computer vision. Building better classifiers to classify what object is present in a picture is an active area of research, as it has applications stretching from autonomous vehicles to medical imaging.</p> <p>Such models are perfect to use with Gradio's image input component, so in this tutorial we will build a web demo to classify images using Gradio. We will be able to build the whole web application in Python, and it will look like the demo on the bottom of the page.</p> <p>Let's get started!</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-pytorch/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed. We will be using a pretrained image classification model, so you should also have <code>torch</code> installed.</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-pytorch/#step-1-setting-up-the-image-classification-model","title":"Step 1 \u2014 Setting up the Image Classification Model","text":"<p>First, we will need an image classification model. For this tutorial, we will use a pretrained Resnet-18 model, as it is easily downloadable from PyTorch Hub. You can use a different pretrained model or train your own.</p> <pre><code>import torch\n\nmodel = torch.hub.load('pytorch/vision:v0.6.0', 'resnet18', pretrained=True).eval()\n</code></pre> <p>Because we will be using the model for inference, we have called the <code>.eval()</code> method.</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-pytorch/#step-2-defining-a-predict-function","title":"Step 2 \u2014 Defining a <code>predict</code> function","text":"<p>Next, we will need to define a function that takes in the user input, which in this case is an image, and returns the prediction. The prediction should be returned as a dictionary whose keys are class name and values are confidence probabilities. We will load the class names from this text file.</p> <p>In the case of our pretrained model, it will look like this:</p> <pre><code>import requests\nfrom PIL import Image\nfrom torchvision import transforms\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef predict(inp):\n  inp = transforms.ToTensor()(inp).unsqueeze(0)\n  with torch.no_grad():\n    prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)\n    confidences = {labels[i]: float(prediction[i]) for i in range(1000)}\n  return confidences\n</code></pre> <p>Let's break this down. The function takes one parameter:</p> <ul> <li><code>inp</code>: the input image as a <code>PIL</code> image</li> </ul> <p>Then, the function converts the image to a PIL Image and then eventually a PyTorch <code>tensor</code>, passes it through the model, and returns:</p> <ul> <li><code>confidences</code>: the predictions, as a dictionary whose keys are class labels and whose values are confidence probabilities</li> </ul>"},{"location":"06_integrating-other-frameworks/image-classification-in-pytorch/#step-3-creating-a-gradio-interface","title":"Step 3 \u2014 Creating a Gradio Interface","text":"<p>Now that we have our predictive function set up, we can create a Gradio Interface around it.</p> <p>In this case, the input component is a drag-and-drop image component. To create this input, we use <code>Image(type=\"pil\")</code> which creates the component and handles the preprocessing to convert that to a <code>PIL</code> image.</p> <p>The output component will be a <code>Label</code>, which displays the top labels in a nice form. Since we don't want to show all 1,000 class labels, we will customize it to show only the top 3 images by constructing it as <code>Label(num_top_classes=3)</code>.</p> <p>Finally, we'll add one more parameter, the <code>examples</code>, which allows us to prepopulate our interfaces with a few predefined examples. The code for Gradio looks like this:</p> <pre><code>import gradio as gr\n\ngr.Interface(fn=predict,\n             inputs=gr.Image(type=\"pil\"),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"lion.jpg\", \"cheetah.jpg\"]).launch()\n</code></pre> <p>This produces the following interface, which you can try right here in your browser (try uploading your own examples!):</p> <p> <p>And you're done! That's all the code you need to build a web demo for an image classifier. If you'd like to share with others, try setting <code>share=True</code> when you <code>launch()</code> the Interface!</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-tensorflow/","title":"Image Classification in TensorFlow and Keras","text":"<p>Related spaces: https://huggingface.co/spaces/abidlabs/keras-image-classifier Tags: VISION, MOBILENET, TENSORFLOW</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-tensorflow/#introduction","title":"Introduction","text":"<p>Image classification is a central task in computer vision. Building better classifiers to classify what object is present in a picture is an active area of research, as it has applications stretching from traffic control systems to satellite imaging.</p> <p>Such models are perfect to use with Gradio's image input component, so in this tutorial we will build a web demo to classify images using Gradio. We will be able to build the whole web application in Python, and it will look like the demo on the bottom of the page.</p> <p>Let's get started!</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-tensorflow/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed. We will be using a pretrained Keras image classification model, so you should also have <code>tensorflow</code> installed.</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-tensorflow/#step-1-setting-up-the-image-classification-model","title":"Step 1 \u2014 Setting up the Image Classification Model","text":"<p>First, we will need an image classification model. For this tutorial, we will use a pretrained Mobile Net model, as it is easily downloadable from Keras. You can use a different pretrained model or train your own.</p> <pre><code>import tensorflow as tf\n\ninception_net = tf.keras.applications.MobileNetV2()\n</code></pre> <p>This line automatically downloads the MobileNet model and weights using the Keras library.</p>"},{"location":"06_integrating-other-frameworks/image-classification-in-tensorflow/#step-2-defining-a-predict-function","title":"Step 2 \u2014 Defining a <code>predict</code> function","text":"<p>Next, we will need to define a function that takes in the user input, which in this case is an image, and returns the prediction. The prediction should be returned as a dictionary whose keys are class name and values are confidence probabilities. We will load the class names from this text file.</p> <p>In the case of our pretrained model, it will look like this:</p> <pre><code>import requests\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef classify_image(inp):\n  inp = inp.reshape((-1, 224, 224, 3))\n  inp = tf.keras.applications.mobilenet_v2.preprocess_input(inp)\n  prediction = inception_net.predict(inp).flatten()\n  confidences = {labels[i]: float(prediction[i]) for i in range(1000)}\n  return confidences\n</code></pre> <p>Let's break this down. The function takes one parameter:</p> <ul> <li><code>inp</code>: the input image as a <code>numpy</code> array</li> </ul> <p>Then, the function adds a batch dimension, passes it through the model, and returns:</p> <ul> <li><code>confidences</code>: the predictions, as a dictionary whose keys are class labels and whose values are confidence probabilities</li> </ul>"},{"location":"06_integrating-other-frameworks/image-classification-in-tensorflow/#step-3-creating-a-gradio-interface","title":"Step 3 \u2014 Creating a Gradio Interface","text":"<p>Now that we have our predictive function set up, we can create a Gradio Interface around it.</p> <p>In this case, the input component is a drag-and-drop image component. To create this input, we can use the <code>\"gradio.inputs.Image\"</code> class, which creates the component and handles the preprocessing to convert that to a numpy array. We will instantiate the class with a parameter that automatically preprocesses the input image to be 224 pixels by 224 pixels, which is the size that MobileNet expects.</p> <p>The output component will be a <code>\"label\"</code>, which displays the top labels in a nice form. Since we don't want to show all 1,000 class labels, we will customize it to show only the top 3 images.</p> <p>Finally, we'll add one more parameter, the <code>examples</code>, which allows us to prepopulate our interfaces with a few predefined examples. The code for Gradio looks like this:</p> <pre><code>import gradio as gr\n\ngr.Interface(fn=classify_image,\n             inputs=gr.Image(shape=(224, 224)),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"banana.jpg\", \"car.jpg\"]).launch()\n</code></pre> <p>This produces the following interface, which you can try right here in your browser (try uploading your own examples!):</p> <p> <p>And you're done! That's all the code you need to build a web demo for an image classifier. If you'd like to share with others, try setting <code>share=True</code> when you <code>launch()</code> the Interface!</p>"},{"location":"06_integrating-other-frameworks/image-classification-with-vision-transformers/","title":"Image Classification with Vision Transformers","text":"<p>Related spaces: https://huggingface.co/spaces/abidlabs/vision-transformer Tags: VISION, TRANSFORMERS, HUB</p>"},{"location":"06_integrating-other-frameworks/image-classification-with-vision-transformers/#introduction","title":"Introduction","text":"<p>Image classification is a central task in computer vision. Building better classifiers to classify what object is present in a picture is an active area of research, as it has applications stretching from facial recognition to manufacturing quality control.</p> <p>State-of-the-art image classifiers are based on the transformers architectures, originally popularized for NLP tasks. Such architectures are typically called vision transformers (ViT). Such models are perfect to use with Gradio's image input component, so in this tutorial we will build a web demo to classify images using Gradio. We will be able to build the whole web application in a single line of Python, and it will look like the demo on the bottom of the page.</p> <p>Let's get started!</p>"},{"location":"06_integrating-other-frameworks/image-classification-with-vision-transformers/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed.</p>"},{"location":"06_integrating-other-frameworks/image-classification-with-vision-transformers/#step-1-choosing-a-vision-image-classification-model","title":"Step 1 \u2014 Choosing a Vision Image Classification Model","text":"<p>First, we will need an image classification model. For this tutorial, we will use a model from the Hugging Face Model Hub. The Hub contains thousands of models covering dozens of different machine learning tasks.</p> <p>Expand the Tasks category on the left sidebar and select \"Image Classification\" as our task of interest. You will then see all of the models on the Hub that are designed to classify images.</p> <p>At the time of writing, the most popular one is <code>google/vit-base-patch16-224</code>, which has been trained on ImageNet images at a resolution of 224x224 pixels. We will use this model for our demo.</p>"},{"location":"06_integrating-other-frameworks/image-classification-with-vision-transformers/#step-2-loading-the-vision-transformer-model-with-gradio","title":"Step 2 \u2014 Loading the Vision Transformer Model with Gradio","text":"<p>When using a model from the Hugging Face Hub, we do not need to define the input or output components for the demo. Similarly, we do not need to be concerned with the details of preprocessing or postprocessing. All of these are automatically inferred from the model tags.</p> <p>Besides the import statement, it only takes a single line of Python to load and launch the demo.</p> <p>We use the <code>gr.Interface.load()</code> method and pass in the path to the model including the <code>huggingface/</code> to designate that it is from the Hugging Face Hub.</p> <pre><code>import gradio as gr\n\ngr.Interface.load(\n             \"huggingface/google/vit-base-patch16-224\",\n             examples=[\"alligator.jpg\", \"laptop.jpg\"]).launch()\n</code></pre> <p>Notice that we have added one more parameter, the <code>examples</code>, which allows us to prepopulate our interfaces with a few predefined examples.</p> <p>This produces the following interface, which you can try right here in your browser. When you input an image, it is automatically preprocessed and sent to the Hugging Face Hub API, where it is passed through the model and returned as a human-interpretable prediction. Try uploading your own image!</p> <p> <p>And you're done! In one line of code, you have built a web demo for an image classifier. If you'd like to share with others, try setting <code>share=True</code> when you <code>launch()</code> the Interface!</p>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/","title":"Connecting to a Database","text":"<p>Related spaces: https://huggingface.co/spaces/gradio/chicago-bikeshare-dashboard Tags: TABULAR, PLOTS</p>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#introduction","title":"Introduction","text":"<p>This guide explains how you can use Gradio to connect your app to a database. We will be connecting to a PostgreSQL database hosted on AWS but gradio is completely agnostic to the type of database you are connecting to and where it's hosted. So as long as you can write python code to connect to your data, you can display it in a web UI with gradio \ud83d\udcaa</p>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#overview","title":"Overview","text":"<p>We will be analyzing bike share data from Chicago. The data is hosted on kaggle here. Our goal is to create a dashboard that will enable our business stakeholders to answer the following questions:</p> <ol> <li>Are electric bikes more popular than regular bikes?</li> <li>What are the top 5 most popular departure bike stations?</li> </ol> <p>At the end of this guide, we will have a functioning application that looks like this:</p> <p> </p>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#step-1-creating-your-database","title":"Step 1 - Creating your database","text":"<p>We will be storing our data on a PostgreSQL hosted on Amazon's RDS service. Create an AWS account if you don't already have one and create a PostgreSQL database on the free tier.</p> <p>Important: If you plan to host this demo on HuggingFace Spaces, make sure database is on port 8080. Spaces will block all outgoing connections unless they are made to port 80, 443, or 8080 as noted here. RDS will not let you create a postgreSQL instance on ports 80 or 443.</p> <p>Once your database is created, download the dataset from Kaggle and upload it to your database. For the sake of this demo, we will only upload March 2022 data.</p>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#step-2a-write-your-etl-code","title":"Step 2.a - Write your ETL code","text":"<p>We will be querying our database for the total count of rides split by the type of bicycle (electric, standard, or docked). We will also query for the total count of rides that depart from each station and take the top 5.</p> <p>We will then take the result of our queries and visualize them in with matplotlib.</p> <p>We will use the pandas read_sql method to connect to the database. This requires the <code>psycopg2</code> library to be installed.</p> <p>In order to connect to our database, we will specify the database username, password, and host as environment variables. This will make our app more secure by avoiding storing sensitive information as plain text in our application files.</p> <pre><code>import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\nDB_HOST = os.getenv(\"DB_HOST\")\nPORT = 8080\nDB_NAME = \"bikeshare\"\n\nconnection_string = f\"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}?port={PORT}&amp;dbname={DB_NAME}\"\n\ndef get_count_ride_type():\n    df = pd.read_sql(\n    \"\"\"\n        SELECT COUNT(ride_id) as n, rideable_type\n        FROM rides\n        GROUP BY rideable_type\n        ORDER BY n DESC\n    \"\"\",\n    con=connection_string\n    )\n    fig_m, ax = plt.subplots()\n    ax.bar(x=df['rideable_type'], height=df['n'])\n    ax.set_title(\"Number of rides by bycycle type\")\n    ax.set_ylabel(\"Number of Rides\")\n    ax.set_xlabel(\"Bicycle Type\")\n    return fig_m\n\n\ndef get_most_popular_stations():\n\n    df = pd.read_sql(\n        \"\"\"\n    SELECT COUNT(ride_id) as n, MAX(start_station_name) as station\n    FROM RIDES\n    WHERE start_station_name is NOT NULL\n    GROUP BY start_station_id\n    ORDER BY n DESC\n    LIMIT 5\n    \"\"\",\n    con=connection_string\n    )\n    fig_m, ax = plt.subplots()\n    ax.bar(x=df['station'], height=df['n'])\n    ax.set_title(\"Most popular stations\")\n    ax.set_ylabel(\"Number of Rides\")\n    ax.set_xlabel(\"Station Name\")\n    ax.set_xticklabels(\n        df['station'], rotation=45, ha=\"right\", rotation_mode=\"anchor\"\n    )\n    ax.tick_params(axis=\"x\", labelsize=8)\n    fig_m.tight_layout()\n    return fig_m\n</code></pre> <p>If you were to run our script locally, you could pass in your credentials as environment variables like so</p> <pre><code>DB_USER='username' DB_PASSWORD='password' DB_HOST='host' python app.py\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#step-2c-write-your-gradio-app","title":"Step 2.c - Write your gradio app","text":"<p>We will display or matplotlib plots in two separate <code>gr.Plot</code> components displayed side by side using <code>gr.Row()</code>. Because we have wrapped our function to fetch the data in a <code>demo.load()</code> event trigger, our demo will fetch the latest data dynamically from the database each time the web page loads. \ud83e\ude84</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        bike_type = gr.Plot()\n        station = gr.Plot()\n\n    demo.load(get_count_ride_type, inputs=None, outputs=bike_type)\n    demo.load(get_most_popular_stations, inputs=None, outputs=station)\n\ndemo.launch()\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#step-3-deployment","title":"Step 3 - Deployment","text":"<p>If you run the code above, your app will start running locally. You can even get a temporary shareable link by passing the <code>share=True</code> parameter to <code>launch</code>.</p> <p>But what if you want to a permanent deployment solution? Let's deploy our Gradio app to the free HuggingFace Spaces platform.</p> <p>If you haven't used Spaces before, follow the previous guide here. You will have to add the <code>DB_USER</code>, <code>DB_PASSWORD</code>, and <code>DB_HOST</code> variables as \"Repo Secrets\". You can do this in the \"Settings\" tab.</p> <p></p>"},{"location":"07_tabular-data-science-and-plots/01_connecting-to-a-database/#conclusion","title":"Conclusion","text":"<p>Congratulations! You know how to connect your gradio app to a database hosted on the cloud! \u2601\ufe0f</p> <p>Our dashboard is now running on Spaces. The complete code is here</p> <p>As you can see, gradio gives you the power to connect to your data wherever it lives and display however you want! \ud83d\udd25</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/","title":"Creating a Real-Time Dashboard from BigQuery Data","text":"<p>Tags: TABULAR, DASHBOARD, PLOTS</p> <p>Google BigQuery is a cloud-based service for processing very large data sets. It is a serverless and highly scalable data warehousing solution that enables users to analyze data using SQL-like queries.</p> <p>In this tutorial, we will show you how to query a BigQuery dataset in Python and display the data in a dashboard that updates in real time using <code>gradio</code>. The dashboard will look like this:</p> <p></p> <p>We'll cover the following steps in this Guide:</p> <ol> <li>Setting up your BigQuery credentials</li> <li>Using the BigQuery client</li> <li>Building the real-time dashboard (in just 7 lines of Python)</li> </ol> <p>We'll be working with the New York Times' COVID dataset that is available as a public dataset on BigQuery. The dataset, named <code>covid19_nyt.us_counties</code> contains the latest information about the number of confirmed cases and deaths from COVID across US counties.</p> <p>Prerequisites: This Guide uses Gradio Blocks, so make your are familiar with the Blocks class.</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/#setting-up-your-bigquery-credentials","title":"Setting up your BigQuery Credentials","text":"<p>To use Gradio with BigQuery, you will need to obtain your BigQuery credentials and use them with the BigQuery Python client. If you already have BigQuery credentials (as a <code>.json</code> file), you can skip this section. If not, you can do this for free in just a couple of minutes.</p> <ol> <li> <p>First, log in to your Google Cloud account and go to the Google Cloud Console (https://console.cloud.google.com/)</p> </li> <li> <p>In the Cloud Console, click on the hamburger menu in the top-left corner and select \"APIs &amp; Services\" from the menu. If you do not have an existing project, you will need to create one.</p> </li> <li> <p>Then, click the \"+ Enabled APIs &amp; services\" button, which allows you to enable specific services for your project. Search for \"BigQuery API\", click on it, and click the \"Enable\" button. If you see the \"Manage\" button, then the BigQuery is already enabled, and you're all set.</p> </li> <li> <p>In the APIs &amp; Services menu, click on the \"Credentials\" tab and then click on the \"Create credentials\" button.</p> </li> <li> <p>In the \"Create credentials\" dialog, select \"Service account key\" as the type of credentials to create, and give it a name. Also grant the service account permissions by giving it a role such as \"BigQuery User\", which will allow you to run queries.</p> </li> <li> <p>After selecting the service account, select the \"JSON\" key type and then click on the \"Create\" button. This will download the JSON key file containing your credentials to your computer. It will look something like this:</p> </li> </ol> <pre><code>{\n    \"type\": \"service_account\",\n    \"project_id\": \"your project\",\n    \"private_key_id\": \"your private key id\",\n    \"private_key\": \"private key\",\n    \"client_email\": \"email\",\n    \"client_id\": \"client id\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/email_id\"\n}\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/#using-the-bigquery-client","title":"Using the BigQuery Client","text":"<p>Once you have the credentials, you will need to use the BigQuery Python client to authenticate using your credentials. To do this, you will need to install the BigQuery Python client by running the following command in the terminal:</p> <pre><code>pip install google-cloud-bigquery[pandas]\n</code></pre> <p>You'll notice that we've installed the pandas add-on, which will be helpful for processing the BigQuery dataset as a pandas dataframe. Once the client is installed, you can authenticate using your credentials by running the following code:</p> <pre><code>from google.cloud import bigquery\n\nclient = bigquery.Client.from_service_account_json(\"path/to/key.json\")\n</code></pre> <p>With your credentials authenticated, you can now use the BigQuery Python client to interact with your BigQuery datasets.</p> <p>Here is an example of a function which queries the <code>covid19_nyt.us_counties</code> dataset in BigQuery to show the top 20 counties with the most confirmed cases as of the current day:</p> <pre><code>import numpy as np\n\nQUERY = (\n    'SELECT * FROM `bigquery-public-data.covid19_nyt.us_counties` '\n    'ORDER BY date DESC,confirmed_cases DESC '\n    'LIMIT 20')\n\ndef run_query():\n    query_job = client.query(QUERY)\n    query_result = query_job.result()\n    df = query_result.to_dataframe()\n    # Select a subset of columns\n    df = df[[\"confirmed_cases\", \"deaths\", \"county\", \"state_name\"]]\n    # Convert numeric columns to standard numpy types\n    df = df.astype({\"deaths\": np.int64, \"confirmed_cases\": np.int64})\n    return df\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/#building-the-real-time-dashboard","title":"Building the Real-Time Dashboard","text":"<p>Once you have a function to query the data, you can use the <code>gr.DataFrame</code> component from the Gradio library to display the results in a tabular format. This is a useful way to inspect the data and make sure that it has been queried correctly.</p> <p>Here is an example of how to use the <code>gr.DataFrame</code> component to display the results. By passing in the <code>run_query</code> function to <code>gr.DataFrame</code>, we instruct Gradio to run the function as soon as the page loads and show the results. In addition, you also pass in the keyword <code>every</code> to tell the dashboard to refresh every hour (60*60 seconds).</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.DataFrame(run_query, every=60*60)\n\ndemo.queue().launch()  # Run the demo using queuing\n</code></pre> <p>Perhaps you'd like to add a visualization to our dashboard. You can use the <code>gr.ScatterPlot()</code> component to visualize the data in a scatter plot. This allows you to see the relationship between different variables such as case count and case deaths in the dataset and can be useful for exploring the data and gaining insights. Again, we can do this in real-time by passing in the <code>every</code> parameter.</p> <p>Here is a complete example showing how to use the <code>gr.ScatterPlot</code> to visualize in addition to displaying data with the <code>gr.DataFrame</code></p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \ud83d\udc89 Covid Dashboard (Updated Hourly)\")\n    with gr.Row():\n        gr.DataFrame(run_query, every=60*60)\n        gr.ScatterPlot(run_query, every=60*60, x=\"confirmed_cases\",\n                        y=\"deaths\", tooltip=\"county\", width=500, height=500)\n\ndemo.queue().launch()  # Run the demo with queuing enabled\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/","title":"Create a Dashboard from Supabase Data","text":"<p>Tags: TABULAR, DASHBOARD, PLOTS</p> <p>Supabase is a cloud-based open-source backend that provides a PostgreSQL database, authentication, and other useful features for building web and mobile applications. In this tutorial, you will learn how to read data from Supabase and plot it in real-time on a Gradio Dashboard.</p> <p>Prerequisites: To start, you will need a free Supabase account, which you can sign up for here: https://app.supabase.com/</p> <p>In this end-to-end guide, you will learn how to:</p> <ul> <li>Create tables in Supabase</li> <li>Write data to Supabase using the Supabase Python Client</li> <li>Visualize the data in a real-time dashboard using Gradio</li> </ul> <p>If you already have data on Supabase that you'd like to visualize in a dashboard, you can skip the first two sections and go directly to visualizing the data!</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#create-a-table-in-supabase","title":"Create a table in Supabase","text":"<p>First of all, we need some data to visualize. Following this excellent guide, we'll create fake commerce data and put it in Supabase.</p> <p>1. Start by creating a new project in Supabase. Once you're logged in, click the \"New Project\" button</p> <p>2. Give your project a name and database password. You can also choose a pricing plan (for our purposes, the Free Tier is sufficient!)</p> <p>3. You'll be presented with your API keys while the database spins up (can take up to 2 minutes).</p> <p>4. Click on \"Table Editor\" (the table icon) in the left pane to create a new table. We'll create a single table called <code>Product</code>, with the following schema:</p> <p> product_idint8 inventory_countint8 pricefloat8 product_namevarchar <p></p> <p>5. Click Save to save the table schema.</p> <p>Our table is now ready!</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#write-data-to-supabase","title":"Write data to Supabase","text":"<p>The next step is to write data to a Supabase dataset. We will use the Supabase Python library to do this.</p> <p>6. Install <code>supabase</code> by running the following command in your terminal:</p> <pre><code>pip install supabase\n</code></pre> <p>7. Get your project URL and API key. Click the Settings (gear icon) on the left pane and click 'API'. The URL is listed in the Project URL box, while the API key is listed in Project API keys (with the tags <code>service_role</code>, <code>secret</code>)</p> <p>8. Now, run the following Python script to write some fake data to the table (note you have to put the values of <code>SUPABASE_URL</code> and <code>SUPABASE_SECRET_KEY</code> from step 7):</p> <pre><code>import supabase\n\n# Initialize the Supabase client\nclient = supabase.create_client('SUPABASE_URL', 'SUPABASE_SECRET_KEY')\n\n# Define the data to write\nimport random\n\nmain_list = []\nfor i in range(10):\n    value = {'product_id': i,\n             'product_name': f\"Item {i}\",\n             'inventory_count': random.randint(1, 100),\n             'price': random.random()*100\n            }\n    main_list.append(value)\n\n# Write the data to the table\ndata = client.table('Product').insert(main_list).execute()\n</code></pre> <p>Return to your Supabase dashboard and refresh the page, you should now see 10 rows populated in the <code>Product</code> table!</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#visualize-the-data-in-a-real-time-gradio-dashboard","title":"Visualize the Data in a Real-Time Gradio Dashboard","text":"<p>Finally, we will read the data from the Supabase dataset using the same <code>supabase</code> Python library and create a realtime dashboard using <code>gradio</code>.</p> <p>Note: We repeat certain steps in this section (like creating the Supabase client) in case you did not go through the previous sections. As described in Step 7, you will need the project URL and API Key for your database.</p> <p>9. Write a function that loads the data from the <code>Product</code> table and returns it as a pandas Dataframe:</p> <pre><code>import supabase\nimport pandas as pd\n\nclient = supabase.create_client('SUPABASE_URL', 'SUPABASE_SECRET_KEY')\n\ndef read_data():\n    response = client.table('Product').select(\"*\").execute()\n    df = pd.DataFrame(response.data)\n    return df\n</code></pre> <p>10. Create a small Gradio Dashboard with 2 Barplots that plots the prices and inventories of all of the items every minute and updates in real-time:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as dashboard:\n    with gr.Row():\n        gr.BarPlot(read_data, x=\"product_id\", y=\"price\", title=\"Prices\", every=60)\n        gr.BarPlot(read_data, x=\"product_id\", y=\"inventory_count\", title=\"Inventory\", every=60)\n\ndashboard.queue().launch()\n</code></pre> <p>Notice that by passing in a function to <code>gr.BarPlot()</code>, we have the BarPlot query the database as soon as the web app loads (and then again every 60 seconds because of the <code>every</code> parameter). Your final dashboard should look something like this:</p> <p></p>"},{"location":"07_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#conclusion","title":"Conclusion","text":"<p>That's it! In this tutorial, you learned how to write data to a Supabase dataset, and then read that data and plot the results as bar plots. If you update the data in the Supabase database, you'll notice that the Gradio dashboard will update within a minute.</p> <p>Try adding more plots and visualizations to this example (or with a different dataset) to build a more complex dashboard!</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/","title":"Creating a Real-Time Dashboard from Google Sheets","text":"<p>Tags: TABULAR, DASHBOARD, PLOTS</p> <p>Google Sheets are an easy way to store tabular data in the form of spreadsheets. With Gradio and pandas, it's easy to read data from public or private Google Sheets and then display the data or plot it. In this blog post, we'll build a small real-time dashboard, one that updates when the data in the Google Sheets updates.</p> <p>Building the dashboard itself will just be 9 lines of Python code using Gradio, and our final dashboard will look like this:</p> <p></p> <p>Prerequisites: This Guide uses Gradio Blocks, so make you are familiar with the Blocks class.</p> <p>The process is a little different depending on if you are working with a publicly accessible or a private Google Sheet. We'll cover both, so let's get started!</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#public-google-sheets","title":"Public Google Sheets","text":"<p>Building a dashboard from a public Google Sheet is very easy, thanks to the <code>pandas</code> library:</p> <p>1. Get the URL of the Google Sheets that you want to use. To do this, simply go to the Google Sheets, click on the \"Share\" button in the top-right corner, and then click on the \"Get shareable link\" button. This will give you a URL that looks something like this:</p> <pre><code>https://docs.google.com/spreadsheets/d/1UoKzzRzOCt-FXLLqDKLbryEKEgllGAQUEJ5qtmmQwpU/edit#gid=0\n</code></pre> <p>2. Now, let's modify this URL and then use it to read the data from the Google Sheets into a Pandas DataFrame. (In the code below, replace the <code>URL</code> variable with the URL of your public Google Sheet):</p> <pre><code>import pandas as pd\n\nURL = \"https://docs.google.com/spreadsheets/d/1UoKzzRzOCt-FXLLqDKLbryEKEgllGAQUEJ5qtmmQwpU/edit#gid=0\"\ncsv_url = URL.replace('/edit#gid=', '/export?format=csv&amp;gid=')\n\ndef get_data():\n    return pd.read_csv(csv_url)\n</code></pre> <p>3. The data query is a function, which means that it's easy to display it real-time using the the <code>gr.DataFrame</code> component, or plot it real-time using the <code>gr.LinePlot</code> component (of course, depending on the data, a different plot may be appropriate). To do this, just pass the function into the respective components, and set the <code>every</code> parameter based on how frequently (in seconds) you would like the component to refresh. Here's the Gradio code:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \ud83d\udcc8 Real-Time Line Plot\")\n    with gr.Row():\n        with gr.Column():\n            gr.DataFrame(get_data, every=5)\n        with gr.Column():\n            gr.LinePlot(get_data, every=5, x=\"Date\", y=\"Sales\", y_title=\"Sales ($ millions)\", overlay_point=True, width=500, height=500)\n\ndemo.queue().launch()  # Run the demo with queuing enabled\n</code></pre> <p>And that's it! You have a dashboard that refreshes every 5 seconds, pulling the data from your Google Sheet.</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#private-google-sheets","title":"Private Google Sheets","text":"<p>For private Google Sheets, the process requires a little more work, but not that much! The key difference is that now, you must authenticate yourself to authorize access to the private Google Sheets.</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#authentication","title":"Authentication","text":"<p>To authenticate yourself, obtain credentials from Google Cloud. Here's how to set up google cloud credentials:</p> <p>1. First, log in to your Google Cloud account and go to the Google Cloud Console (https://console.cloud.google.com/)</p> <p>2. In the Cloud Console, click on the hamburger menu in the top-left corner and select \"APIs &amp; Services\" from the menu. If you do not have an existing project, you will need to create one.</p> <p>3. Then, click the \"+ Enabled APIs &amp; services\" button, which allows you to enable specific services for your project. Search for \"Google Sheets API\", click on it, and click the \"Enable\" button. If you see the \"Manage\" button, then Google Sheets is already enabled, and you're all set.</p> <p>4. In the APIs &amp; Services menu, click on the \"Credentials\" tab and then click on the \"Create credentials\" button.</p> <p>5. In the \"Create credentials\" dialog, select \"Service account key\" as the type of credentials to create, and give it a name. Note down the email of the service account</p> <p>6. After selecting the service account, select the \"JSON\" key type and then click on the \"Create\" button. This will download the JSON key file containing your credentials to your computer. It will look something like this:</p> <pre><code>{\n    \"type\": \"service_account\",\n    \"project_id\": \"your project\",\n    \"private_key_id\": \"your private key id\",\n    \"private_key\": \"private key\",\n    \"client_email\": \"email\",\n    \"client_id\": \"client id\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/email_id\"\n}\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#querying","title":"Querying","text":"<p>Once you have the credentials <code>.json</code> file, you can use the following steps to query your Google Sheet:</p> <p>1. Click on the \"Share\" button in the top-right corner of the Google Sheet. Share the Google Sheets with the email address of the service from Step 5 of authentication subsection (this step is important!). Then click on the \"Get shareable link\" button. This will give you a URL that looks something like this:</p> <pre><code>https://docs.google.com/spreadsheets/d/1UoKzzRzOCt-FXLLqDKLbryEKEgllGAQUEJ5qtmmQwpU/edit#gid=0\n</code></pre> <p>2. Install the <code>gspread</code> library, which makes it easy to work with the Google Sheets API in Python by running in the terminal: <code>pip install gspread</code></p> <p>3. Write a function to load the data from the Google Sheet, like this (replace the <code>URL</code> variable with the URL of your private Google Sheet):</p> <pre><code>import gspread\nimport pandas as pd\n\n# Authenticate with Google and get the sheet\nURL = 'https://docs.google.com/spreadsheets/d/1_91Vps76SKOdDQ8cFxZQdgjTJiz23375sAT7vPvaj4k/edit#gid=0'\n\ngc = gspread.service_account(\"path/to/key.json\")\nsh = gc.open_by_url(URL)\nworksheet = sh.sheet1\n\ndef get_data():\n    values = worksheet.get_all_values()\n    df = pd.DataFrame(values[1:], columns=values[0])\n    return df\n</code></pre> <p>4. The data query is a function, which means that it's easy to display it real-time using the the <code>gr.DataFrame</code> component, or plot it real-time using the <code>gr.LinePlot</code> component (of course, depending on the data, a different plot may be appropriate). To do this, we just pass the function into the respective components, and set the <code>every</code> parameter based on how frequently (in seconds) we would like the component to refresh. Here's the Gradio code:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \ud83d\udcc8 Real-Time Line Plot\")\n    with gr.Row():\n        with gr.Column():\n            gr.DataFrame(get_data, every=5)\n        with gr.Column():\n            gr.LinePlot(get_data, every=5, x=\"Date\", y=\"Sales\", y_title=\"Sales ($ millions)\", overlay_point=True, width=500, height=500)\n\ndemo.queue().launch()  # Run the demo with queuing enabled\n</code></pre> <p>You now have a Dashboard that refreshes every 5 seconds, pulling the data from your Google Sheet.</p>"},{"location":"07_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#conclusion","title":"Conclusion","text":"<p>And that's all there is to it! With just a few lines of code, you can use <code>gradio</code> and other libraries to read data from a public or private Google Sheet and then display and plot the data in a real-time dashboard.</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/","title":"How to Use the Plot Component for Maps","text":"<p>Tags: PLOTS, MAPS</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#introduction","title":"Introduction","text":"<p>This guide explains how you can use Gradio to plot geographical data on a map using the <code>gradio.Plot</code> component. The Gradio <code>Plot</code> component works with Matplotlib, Bokeh and Plotly. Plotly is what we will be working with in this guide. Plotly allows developers to easily create all sorts of maps with their geographical data. Take a look here for some examples.</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#overview","title":"Overview","text":"<p>We will be using the New York City Airbnb dataset, which is hosted on kaggle here. I've uploaded it to the Hugging Face Hub as a dataset here for easier use and download. Using this data we will plot Airbnb locations on a map output and allow filtering based on price and location. Below is the demo that we will be building. \u26a1\ufe0f</p> <p>$demo_map_airbnb</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#step-1-loading-csv-data","title":"Step 1 - Loading CSV data \ud83d\udcbe","text":"<p>Let's start by loading the Airbnb NYC data from the Hugging Face Hub.</p> <pre><code>from datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &amp;\n            (df['price'] &gt; min_price) &amp; (df['price'] &lt; max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n</code></pre> <p>In the code above, we first load the csv data into a pandas dataframe. Let's begin by defining a function that we will use as the prediction function for the gradio app. This function will accept the minimum price and maximum price range as well as the list of boroughs to filter the resulting map. We can use the passed in values (<code>min_price</code>, <code>max_price</code>, and list of <code>boroughs</code>) to filter the dataframe and create <code>new_df</code>. Next we will create <code>text_list</code> of the names and prices of each Airbnb to use as labels on the map.</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#step-2-map-figure","title":"Step 2 - Map Figure \ud83c\udf10","text":"<p>Plotly makes it easy to work with maps. Let's take a look below how we can create a map figure.</p> <pre><code>import plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='&lt;b&gt;Name&lt;/b&gt;: %{customdata[0]}&lt;br&gt;&lt;b&gt;Price&lt;/b&gt;: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n</code></pre> <p>Above, we create a scatter plot on mapbox by passing it our list of latitudes and longitudes to plot markers. We also pass in our custom data of names and prices for additional info to appear on every marker we hover over. Next we use <code>update_layout</code> to specify other map settings such as zoom, and centering.</p> <p>More info here on scatter plots using Mapbox and Plotly.</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#step-3-gradio-app","title":"Step 3 - Gradio App \u26a1\ufe0f","text":"<p>We will use two <code>gr.Number</code> components and a <code>gr.CheckboxGroup</code> to allow users of our app to specify price ranges and borough locations. We will then use the <code>gr.Plot</code> component as an output for our Plotly + Mapbox map we created earlier.</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n</code></pre> <p>We layout these components using the <code>gr.Column</code> and <code>gr.Row</code> and we'll also add event triggers for when the demo first loads and when our \"Update Filter\" button is clicked in order to trigger the map to update with our new filters.</p> <p>This is what the full demo code looks like:</p> <p>$code_map_airbnb</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#step-4-deployment","title":"Step 4 - Deployment \ud83e\udd17","text":"<p>If you run the code above, your app will start running locally. You can even get a temporary shareable link by passing the <code>share=True</code> parameter to <code>launch</code>.</p> <p>But what if you want to a permanent deployment solution? Let's deploy our Gradio app to the free HuggingFace Spaces platform.</p> <p>If you haven't used Spaces before, follow the previous guide here.</p>"},{"location":"07_tabular-data-science-and-plots/plot-component-for-maps/#conclusion","title":"Conclusion \ud83c\udf89","text":"<p>And you're all done! That's all the code you need to build a map demo.</p> <p>Here's a link to the demo Map demo and complete code (on Hugging Face Spaces)</p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/","title":"How to Style the Gradio Dataframe","text":"<p>Tags: DATAFRAME, STYLE, COLOR</p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#introduction","title":"Introduction","text":"<p>Data visualization is a crucial aspect of data analysis and machine learning. The Gradio <code>DataFrame</code> component is a popular way to display tabular data (particularly data in the form of a <code>pandas</code> <code>DataFrame</code> object) within a web application. </p> <p>This post will explore the recent enhancements in Gradio that allow users to integrate the styling options of pandas, e.g. adding colors to the DataFrame component, or setting the display precision of numbers. </p> <p></p> <p>Let's dive in!</p> <p>Prerequisites: We'll be using the <code>gradio.Blocks</code> class in our examples. You can read the Guide to Blocks first if you are not already familiar with it. Also please make sure you are using the latest version version of Gradio: <code>pip install --upgrade gradio</code>.</p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#overview","title":"Overview","text":"<p>The Gradio <code>DataFrame</code> component now supports values of the type <code>Styler</code> from the <code>pandas</code> class. This allows us to reuse the rich existing API and documentation of the <code>Styler</code> class instead of inventing a new style format on our own. Here's a complete example of how it looks:</p> <pre><code>import pandas as pd \nimport gradio as gr\n\n# Creating a sample dataframe\ndf = pd.DataFrame({\n    \"A\" : [14, 4, 5, 4, 1], \n    \"B\" : [5, 2, 54, 3, 2], \n    \"C\" : [20, 20, 7, 3, 8], \n    \"D\" : [14, 3, 6, 2, 6], \n    \"E\" : [23, 45, 64, 32, 23]\n}) \n\n# Applying style to highlight the maximum value in each row\nstyler = df.style.highlight_max(color = 'lightgreen', axis = 0)\n\n# Displaying the styled dataframe in Gradio\nwith gr.Blocks() as demo:\n    gr.DataFrame(styler)\n\ndemo.launch()\n</code></pre> <p>The Styler class can be used to apply conditional formatting and styling to dataframes, making them more visually appealing and interpretable. You can highlight certain values, apply gradients, or even use custom CSS to style the DataFrame. The Styler object is applied to a DataFrame and it returns a new object with the relevant styling properties, which can then be previewed directly, or rendered dynamically in a Gradio interface.</p> <p>To read more about the Styler object, read the official <code>pandas</code> documentation at: https://pandas.pydata.org/docs/user_guide/style.html</p> <p>Below, we'll explore a few examples:</p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#highlighting-cells","title":"Highlighting Cells","text":"<p>Ok, so let's revisit the previous example. We start by creating a <code>pd.DataFrame</code> object and then highlight the highest value in each row with a light green color:</p> <pre><code>import pandas as pd \n\n# Creating a sample dataframe\ndf = pd.DataFrame({\n    \"A\" : [14, 4, 5, 4, 1], \n    \"B\" : [5, 2, 54, 3, 2], \n    \"C\" : [20, 20, 7, 3, 8], \n    \"D\" : [14, 3, 6, 2, 6], \n    \"E\" : [23, 45, 64, 32, 23]\n}) \n\n# Applying style to highlight the maximum value in each row\nstyler = df.style.highlight_max(color = 'lightgreen', axis = 0)\n</code></pre> <p>Now, we simply pass this object into the Gradio <code>DataFrame</code> and we can visualize our colorful table of data in 4 lines of python:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Dataframe(styler)\n\ndemo.launch()\n</code></pre> <p>Here's how it looks:</p> <p></p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#font-colors","title":"Font Colors","text":"<p>Apart from highlighting cells, you might want to color specific text within the cells. Here's how you can change text colors for certain columns:</p> <pre><code>import pandas as pd \nimport gradio as gr\n\n# Creating a sample dataframe\ndf = pd.DataFrame({\n    \"A\" : [14, 4, 5, 4, 1], \n    \"B\" : [5, 2, 54, 3, 2], \n    \"C\" : [20, 20, 7, 3, 8], \n    \"D\" : [14, 3, 6, 2, 6], \n    \"E\" : [23, 45, 64, 32, 23]\n}) \n\n# Function to apply text color\ndef highlight_cols(x): \n    df = x.copy() \n    df.loc[:, :] = 'color: purple'\n    df[['B', 'C', 'E']] = 'color: green'\n    return df \n\n# Applying the style function\ns = df.style.apply(highlight_cols, axis = None)\n\n# Displaying the styled dataframe in Gradio\nwith gr.Blocks() as demo:\n    gr.DataFrame(s)\n\ndemo.launch()\n</code></pre> <p>In this script, we define a custom function highlight_cols that changes the text color to purple for all cells, but overrides this for columns B, C, and E with green. Here's how it looks:</p> <p></p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#display-precision","title":"Display Precision","text":"<p>Sometimes, the data you are dealing with might have long floating numbers, and you may want to display only a fixed number of decimals for simplicity. The pandas Styler object allows you to format the precision of numbers displayed. Here's how you can do this:</p> <pre><code>import pandas as pd\nimport gradio as gr\n\n# Creating a sample dataframe with floating numbers\ndf = pd.DataFrame({\n    \"A\" : [14.12345, 4.23456, 5.34567, 4.45678, 1.56789], \n    \"B\" : [5.67891, 2.78912, 54.89123, 3.91234, 2.12345], \n    # ... other columns\n}) \n\n# Setting the precision of numbers to 2 decimal places\ns = df.style.format(\"{:.2f}\")\n\n# Displaying the styled dataframe in Gradio\nwith gr.Blocks() as demo:\n    gr.DataFrame(s)\n\ndemo.launch()\n</code></pre> <p>In this script, the format method of the Styler object is used to set the precision of numbers to two decimal places. Much cleaner now:</p> <p></p>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#note-about-interactivity","title":"Note about Interactivity","text":"<p>One thing to keep in mind is that the gradio <code>DataFrame</code> component only accepts <code>Styler</code> objects when it is non-interactive (i.e. in \"static\" mode). If the <code>DataFrame</code> component is interactive, then the styling information is ignored and instead the raw table values are shown instead. </p> <p>The <code>DataFrame</code> component is by default non-interactive, unless it is used as an input to an event. In which case, you can force the component to be non-interactive by setting the <code>interactive</code> prop like this:</p> <pre><code>c = gr.DataFrame(styler, interactive=False)\n</code></pre>"},{"location":"07_tabular-data-science-and-plots/styling-the-gradio-dataframe/#conclusion","title":"Conclusion \ud83c\udf89","text":"<p>This is just a taste of what's possible using the <code>gradio.DataFrame</code> component with the <code>Styler</code> class from <code>pandas</code>. Try it out and let us know what you think!</p>"},{"location":"07_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/","title":"Using Gradio for Tabular Data Science Workflows","text":"<p>Related spaces: https://huggingface.co/spaces/scikit-learn/gradio-skops-integration, https://huggingface.co/spaces/scikit-learn/tabular-playground, https://huggingface.co/spaces/merve/gradio-analysis-dashboard</p>"},{"location":"07_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#introduction","title":"Introduction","text":"<p>Tabular data science is the most widely used domain of machine learning, with problems ranging from customer segmentation to churn prediction. Throughout various stages of the tabular data science workflow, communicating your work to stakeholders or clients can be cumbersome; which prevents data scientists from focusing on what matters, such as data analysis and model building. Data scientists can end up spending hours building a dashboard that takes in dataframe and returning plots, or returning a prediction or plot of clusters in a dataset. In this guide, we'll go through how to use <code>gradio</code> to improve your data science workflows. We will also talk about how to use <code>gradio</code> and skops to build interfaces with only one line of code!</p>"},{"location":"07_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed.</p>"},{"location":"07_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#lets-create-a-simple-interface","title":"Let's Create a Simple Interface!","text":"<p>We will take a look at how we can create a simple UI that predicts failures based on product information.</p> <pre><code>import gradio as gr\nimport pandas as pd\nimport joblib\nimport datasets\n\n\ninputs = [gr.Dataframe(row_count = (2, \"dynamic\"), col_count=(4,\"dynamic\"), label=\"Input Data\", interactive=1)]\n\noutputs = [gr.Dataframe(row_count = (2, \"dynamic\"), col_count=(1, \"fixed\"), label=\"Predictions\", headers=[\"Failures\"])]\n\nmodel = joblib.load(\"model.pkl\")\n\n# we will give our dataframe as example\ndf = datasets.load_dataset(\"merve/supersoaker-failures\")\ndf = df[\"train\"].to_pandas()\n\ndef infer(input_dataframe):\n  return pd.DataFrame(model.predict(input_dataframe))\n\ngr.Interface(fn = infer, inputs = inputs, outputs = outputs, examples = [[df.head(2)]]).launch()\n</code></pre> <p>Let's break down above code.</p> <ul> <li><code>fn</code>: the inference function that takes input dataframe and returns predictions.</li> <li><code>inputs</code>: the component we take our input with. We define our input as dataframe with 2 rows and 4 columns, which initially will look like an empty dataframe with the aforementioned shape. When the <code>row_count</code> is set to <code>dynamic</code>, you don't have to rely on the dataset you're inputting to pre-defined component.</li> <li><code>outputs</code>: The dataframe component that stores outputs. This UI can take single or multiple samples to infer, and returns 0 or 1 for each sample in one column, so we give <code>row_count</code> as 2 and <code>col_count</code> as 1 above. <code>headers</code> is a list made of header names for dataframe.</li> <li><code>examples</code>: You can either pass the input by dragging and dropping a CSV file, or a pandas DataFrame through examples, which headers will be automatically taken by the interface.</li> </ul> <p>We will now create an example for a minimal data visualization dashboard. You can find a more comprehensive version in the related Spaces.</p> <p></p> <pre><code>import gradio as gr\nimport pandas as pd\nimport datasets\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = datasets.load_dataset(\"merve/supersoaker-failures\")\ndf = df[\"train\"].to_pandas()\ndf.dropna(axis=0, inplace=True)\n\ndef plot(df):\n  plt.scatter(df.measurement_13, df.measurement_15, c = df.loading,alpha=0.5)\n  plt.savefig(\"scatter.png\")\n  df['failure'].value_counts().plot(kind='bar')\n  plt.savefig(\"bar.png\")\n  sns.heatmap(df.select_dtypes(include=\"number\").corr())\n  plt.savefig(\"corr.png\")\n  plots = [\"corr.png\",\"scatter.png\", \"bar.png\"]\n  return plots\n\ninputs = [gr.Dataframe(label=\"Supersoaker Production Data\")]\noutputs = [gr.Gallery(label=\"Profiling Dashboard\", columns=(1,3))]\n\ngr.Interface(plot, inputs=inputs, outputs=outputs, examples=[df.head(100)], title=\"Supersoaker Failures Analysis Dashboard\").launch()\n</code></pre> <p></p> <p>We will use the same dataset we used to train our model, but we will make a dashboard to visualize it this time.</p> <ul> <li><code>fn</code>: The function that will create plots based on data.</li> <li><code>inputs</code>: We use the same <code>Dataframe</code> component we used above.</li> <li><code>outputs</code>: The <code>Gallery</code> component is used to keep our visualizations.</li> <li><code>examples</code>: We will have the dataset itself as the example.</li> </ul>"},{"location":"07_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#easily-load-tabular-data-interfaces-with-one-line-of-code-using-skops","title":"Easily load tabular data interfaces with one line of code using skops","text":"<p><code>skops</code> is a library built on top of <code>huggingface_hub</code> and <code>sklearn</code>. With the recent <code>gradio</code> integration of <code>skops</code>, you can build tabular data interfaces with one line of code!</p> <pre><code>import gradio as gr\n\n# title and description are optional\ntitle = \"Supersoaker Defective Product Prediction\"\ndescription = \"This model predicts Supersoaker production line failures. Drag and drop any slice from dataset or edit values as you wish in below dataframe component.\"\n\ngr.Interface.load(\"huggingface/scikit-learn/tabular-playground\", title=title, description=description).launch()\n</code></pre> <p></p> <p><code>sklearn</code> models pushed to Hugging Face Hub using <code>skops</code> include a <code>config.json</code> file that contains an example input with column names, the task being solved (that can either be <code>tabular-classification</code> or <code>tabular-regression</code>). From the task type, <code>gradio</code> constructs the <code>Interface</code> and consumes column names and the example input to build it. You can refer to skops documentation on hosting models on Hub to learn how to push your models to Hub using <code>skops</code>.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/","title":"Getting Started with the Gradio Python client","text":"<p>Tags: CLIENT, API, SPACES</p> <p>The Gradio Python client makes it very easy to use any Gradio app as an API. As an example, consider this Hugging Face Space that transcribes audio files that are recorded from the microphone.</p> <p></p> <p>Using the <code>gradio_client</code> library, we can easily use the Gradio as an API to transcribe audio files programmatically.</p> <p>Here's the entire code to do it:</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/whisper\")\nclient.predict(\"audio_sample.wav\")\n\n&gt;&gt; \"This is a test of the whisper speech recognition model.\"\n</code></pre> <p>The Gradio client works with any hosted Gradio app, whether it be an image generator, a text summarizer, a stateful chatbot, a tax calculator, or anything else! The Gradio Client is mostly used with apps hosted on Hugging Face Spaces, but your app can be hosted anywhere, such as your own server.</p> <p>Prerequisites: To use the Gradio client, you do not need to know the <code>gradio</code> library in great detail. However, it is helpful to have general familiarity with Gradio's concepts of input and output components.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#installation","title":"Installation","text":"<p>If you already have a recent version of <code>gradio</code>, then the <code>gradio_client</code> is included as a dependency.</p> <p>Otherwise, the lightweight <code>gradio_client</code> package can be installed from pip (or pip3) and is tested to work with Python versions 3.9 or higher:</p> <pre><code>$ pip install gradio_client\n</code></pre>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#connecting-to-a-running-gradio-app","title":"Connecting to a running Gradio App","text":"<p>Start by connecting instantiating a <code>Client</code> object and connecting it to a Gradio app that is running on Hugging Face Spaces or generally anywhere on the web.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#connecting-to-a-hugging-face-space","title":"Connecting to a Hugging Face Space","text":"<pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/en2fr\")  # a Space that translates from English to French\n</code></pre> <p>You can also connect to private Spaces by passing in your HF token with the <code>hf_token</code> parameter. You can get your HF token here: https://huggingface.co/settings/tokens</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/my-private-space\", hf_token=\"...\")\n</code></pre>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#duplicating-a-space-for-private-use","title":"Duplicating a Space for private use","text":"<p>While you can use any public Space as an API, you may get rate limited by Hugging Face if you make too many requests. For unlimited usage of a Space, simply duplicate the Space to create a private Space, and then use it to make as many requests as you'd like!</p> <p>The <code>gradio_client</code> includes a class method: <code>Client.duplicate()</code> to make this process simple (you'll need to pass in your Hugging Face token or be logged in using the Hugging Face CLI):</p> <pre><code>import os\nfrom gradio_client import Client\n\nHF_TOKEN = os.environ.get(\"HF_TOKEN\")\n\nclient = Client.duplicate(\"abidlabs/whisper\", hf_token=HF_TOKEN)\nclient.predict(\"audio_sample.wav\")\n\n&gt;&gt; \"This is a test of the whisper speech recognition model.\"\n</code></pre> <p>If you have previously duplicated a Space, re-running <code>duplicate()</code> will not create a new Space. Instead, the Client will attach to the previously-created Space. So it is safe to re-run the <code>Client.duplicate()</code> method multiple times.</p> <p>Note: if the original Space uses GPUs, your private Space will as well, and your Hugging Face account will get billed based on the price of the GPU. To minimize charges, your Space will automatically go to sleep after 1 hour of inactivity. You can also set the hardware using the <code>hardware</code> parameter of <code>duplicate()</code>.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#connecting-a-general-gradio-app","title":"Connecting a general Gradio app","text":"<p>If your app is running somewhere else, just provide the full URL instead, including the \"http://\" or \"https://\". Here's an example of making predictions to a Gradio app that is running on a share URL:</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"https://bec81a83-5b5c-471e.gradio.live\")\n</code></pre>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#inspecting-the-api-endpoints","title":"Inspecting the API endpoints","text":"<p>Once you have connected to a Gradio app, you can view the APIs that are available to you by calling the <code>Client.view_api()</code> method. For the Whisper Space, we see the following:</p> <pre><code>Client.predict() Usage Info\n---------------------------\nNamed API endpoints: 1\n\n - predict(input_audio, api_name=\"/predict\") -&gt; value_0\n    Parameters:\n     - [Audio] input_audio: str (filepath or URL)\n    Returns:\n     - [Textbox] value_0: str (value)\n</code></pre> <p>This shows us that we have 1 API endpoint in this space, and shows us how to use the API endpoint to make a prediction: we should call the <code>.predict()</code> method (which we will explore below), providing a parameter <code>input_audio</code> of type <code>str</code>, which is a <code>filepath or URL</code>.</p> <p>We should also provide the <code>api_name='/predict'</code> argument to the <code>predict()</code> method. Although this isn't necessary if a Gradio app has only 1 named endpoint, it does allow us to call different endpoints in a single app if they are available. If an app has unnamed API endpoints, these can also be displayed by running <code>.view_api(all_endpoints=True)</code>.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#making-a-prediction","title":"Making a prediction","text":"<p>The simplest way to make a prediction is simply to call the <code>.predict()</code> function with the appropriate arguments:</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/en2fr\", api_name='/predict')\nclient.predict(\"Hello\")\n\n&gt;&gt; Bonjour\n</code></pre> <p>If there are multiple parameters, then you should pass them as separate arguments to <code>.predict()</code>, like this:</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"gradio/calculator\")\nclient.predict(4, \"add\", 5)\n\n&gt;&gt; 9.0\n</code></pre> <p>For certain inputs, such as images, you should pass in the filepath or URL to the file. Likewise, for the corresponding output types, you will get a filepath or URL returned.</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/whisper\")\nclient.predict(\"https://audio-samples.github.io/samples/mp3/blizzard_unconditional/sample-0.mp3\")\n\n&gt;&gt; \"My thought I have nobody by a beauty and will as you poured. Mr. Rochester is serve in that so don't find simpus, and devoted abode, to at might in a r\u2014\"\n</code></pre>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#running-jobs-asynchronously","title":"Running jobs asynchronously","text":"<p>Oe should note that <code>.predict()</code> is a blocking operation as it waits for the operation to complete before returning the prediction.</p> <p>In many cases, you may be better off letting the job run in the background until you need the results of the prediction. You can do this by creating a <code>Job</code> instance using the <code>.submit()</code> method, and then later calling <code>.result()</code> on the job to get the result. For example:</p> <pre><code>from gradio_client import Client\n\nclient = Client(space=\"abidlabs/en2fr\")\njob = client.submit(\"Hello\", api_name=\"/predict\")  # This is not blocking\n\n# Do something else\n\njob.result()  # This is blocking\n\n&gt;&gt; Bonjour\n</code></pre>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#adding-callbacks","title":"Adding callbacks","text":"<p>Alternatively, one can add one or more callbacks to perform actions after the job has completed running, like this:</p> <pre><code>from gradio_client import Client\n\ndef print_result(x):\n    print(\"The translated result is: {x}\")\n\nclient = Client(space=\"abidlabs/en2fr\")\n\njob = client.submit(\"Hello\", api_name=\"/predict\", result_callbacks=[print_result])\n\n# Do something else\n\n&gt;&gt; The translated result is: Bonjour\n</code></pre>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#status","title":"Status","text":"<p>The <code>Job</code> object also allows you to get the status of the running job by calling the <code>.status()</code> method. This returns a <code>StatusUpdate</code> object with the following attributes: <code>code</code> (the status code, one of a set of defined strings representing the status. See the <code>utils.Status</code> class), <code>rank</code> (the current position of this job in the queue), <code>queue_size</code> (the total queue size), <code>eta</code> (estimated time this job will complete), <code>success</code> (a boolean representing whether the job completed successfully), and <code>time</code> (the time that the status was generated).</p> <pre><code>from gradio_client import Client\n\nclient = Client(src=\"gradio/calculator\")\njob = client.submit(5, \"add\", 4, api_name=\"/predict\")\njob.status()\n\n&gt;&gt; &lt;Status.STARTING: 'STARTING'&gt;\n</code></pre> <p>Note: The <code>Job</code> class also has a <code>.done()</code> instance method which returns a boolean indicating whether the job has completed.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#cancelling-jobs","title":"Cancelling Jobs","text":"<p>The <code>Job</code> class also has a <code>.cancel()</code> instance method that cancels jobs that have been queued but not started. For example, if you run:</p> <pre><code>client = Client(\"abidlabs/whisper\")\njob1 = client.submit(\"audio_sample1.wav\")\njob2 = client.submit(\"audio_sample2.wav\")\njob1.cancel()  # will return False, assuming the job has started\njob2.cancel()  # will return True, indicating that the job has been canceled\n</code></pre> <p>If the first job has started processing, then it will not be canceled. If the second job has not yet started, it will be successfully canceled and removed from the queue.</p>"},{"location":"08_client-libraries/01_getting-started-with-the-python-client/#generator-endpoints","title":"Generator Endpoints","text":"<p>Some Gradio API endpoints do not return a single value, rather they return a series of values. You can get the series of values that have been returned at any time from such a generator endpoint by running <code>job.outputs()</code>:</p> <pre><code>from gradio_client import Client\n\nclient = Client(src=\"gradio/count_generator\")\njob = client.submit(3, api_name=\"/count\")\nwhile not job.done():\n    time.sleep(0.1)\njob.outputs()\n\n&gt;&gt; ['0', '1', '2']\n</code></pre> <p>Note that running <code>job.result()</code> on a generator endpoint only gives you the first value returned by the endpoint.</p> <p>The <code>Job</code> object is also iterable, which means you can use it to display the results of a generator function as they are returned from the endpoint. Here's the equivalent example using the <code>Job</code> as a generator:</p> <pre><code>from gradio_client import Client\n\nclient = Client(src=\"gradio/count_generator\")\njob = client.submit(3, api_name=\"/count\")\n\nfor o in job:\n    print(o)\n\n&gt;&gt; 0\n&gt;&gt; 1\n&gt;&gt; 2\n</code></pre> <p>You can also cancel jobs that that have iterative outputs, in which case the job will finish as soon as the current iteration finishes running.</p> <pre><code>from gradio_client import Client\nimport time\n\nclient = Client(\"abidlabs/test-yield\")\njob = client.submit(\"abcdef\")\ntime.sleep(3)\njob.cancel()  # job cancels after 2 iterations\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/","title":"Getting Started with the Gradio JavaScript client","text":"<p>Tags: CLIENT, API, SPACES</p> <p>The Gradio JavaScript client makes it very easy to use any Gradio app as an API. As an example, consider this Hugging Face Space that transcribes audio files that are recorded from the microphone.</p> <p></p> <p>Using the <code>@gradio/client</code> library, we can easily use the Gradio as an API to transcribe audio files programmatically.</p> <p>Here's the entire code to do it:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst response = await fetch(\n    \"https://github.com/audio-samples/audio-samples.github.io/raw/master/samples/wav/ted_speakers/SalmanKhan/sample-1.wav\"\n);\nconst audio_file = await response.blob();\n\nconst app = await client(\"abidlabs/whisper\");\nconst transcription = await app.predict(\"/predict\", [audio_file]);\n\nconsole.log(transcription.data);\n// [ \"I said the same phrase 30 times.\" ]\n</code></pre> <p>The Gradio client works with any hosted Gradio app, whether it be an image generator, a text summarizer, a stateful chatbot, a tax calculator, or anything else! The Gradio Client is mostly used with apps hosted on Hugging Face Spaces, but your app can be hosted anywhere, such as your own server.</p> <p>Prequisites: To use the Gradio client, you do not need to know the <code>gradio</code> library in great detail. However, it is helpful to have general familiarity with Gradio's concepts of input and output components.</p>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#installation","title":"Installation","text":"<p>The lightweight <code>@gradio/client</code> package can be installed from the npm registry with a package manager of your choice and support node version 18 and above:</p> <pre><code>npm i @gradio/client\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#connecting-to-a-running-gradio-app","title":"Connecting to a running Gradio App","text":"<p>Start by connecting instantiating a <code>client</code> instance and connecting it to a Gradio app that is running on Hugging Face Spaces or generally anywhere on the web.</p>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#connecting-to-a-hugging-face-space","title":"Connecting to a Hugging Face Space","text":"<pre><code>import { client } from \"@gradio/client\";\n\nconst app = client(\"abidlabs/en2fr\"); // a Space that translates from English to French\n</code></pre> <p>You can also connect to private Spaces by passing in your HF token with the <code>hf_token</code> property of the options parameter. You can get your HF token here: https://huggingface.co/settings/tokens</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = client(\"abidlabs/my-private-space\", { hf_token=\"hf_...\" })\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#duplicating-a-space-for-private-use","title":"Duplicating a Space for private use","text":"<p>While you can use any public Space as an API, you may get rate limited by Hugging Face if you make too many requests. For unlimited usage of a Space, simply duplicate the Space to create a private Space, and then use it to make as many requests as you'd like!</p> <p>The <code>@gradio/client</code> exports another function, <code>duplicate</code>, to make this process simple (you'll need to pass in your Hugging Face token).</p> <p><code>duplicate</code> is almost identical to <code>client</code>, the only difference is under the hood:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst response = await fetch(\n    \"https://audio-samples.github.io/samples/mp3/blizzard_unconditional/sample-0.mp3\"\n);\nconst audio_file = await response.blob();\n\nconst app = await duplicate(\"abidlabs/whisper\", { hf_token: \"hf_...\" });\nconst transcription = app.predict(\"/predict\", [audio_file]);\n</code></pre> <p>If you have previously duplicated a Space, re-running <code>duplicate</code> will not create a new Space. Instead, the client will attach to the previously-created Space. So it is safe to re-run the <code>duplicate</code> method multiple times with the same space.</p> <p>Note: if the original Space uses GPUs, your private Space will as well, and your Hugging Face account will get billed based on the price of the GPU. To minimize charges, your Space will automatically go to sleep after 5 minutes of inactivity. You can also set the hardware using the <code>hardware</code> and <code>timeout</code> properties of <code>duplicate</code>'s options object like this:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await duplicate(\"abidlabs/whisper\", {\n    hf_token: \"hf_...\",\n    timeout: 60,\n    hardware: \"a10g-small\"\n});\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#connecting-a-general-gradio-app","title":"Connecting a general Gradio app","text":"<p>If your app is running somewhere else, just provide the full URL instead, including the \"http://\" or \"https://\". Here's an example of making predictions to a Gradio app that is running on a share URL:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = client(\"https://bec81a83-5b5c-471e.gradio.live\");\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#inspecting-the-api-endpoints","title":"Inspecting the API endpoints","text":"<p>Once you have connected to a Gradio app, you can view the APIs that are available to you by calling the <code>client</code>'s <code>view_api</code> method.</p> <p>For the Whisper Space, we can do this:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"abidlabs/whisper\");\n\nconst app_info = await app.view_info();\n\nconsole.log(app_info);\n</code></pre> <p>And we will see the following:</p> <pre><code>{\n    \"named_endpoints\": {\n        \"/predict\": {\n            \"parameters\": [\n                {\n                    \"label\": \"text\",\n                    \"component\": \"Textbox\",\n                    \"type\": \"string\"\n                }\n            ],\n            \"returns\": [\n                {\n                    \"label\": \"output\",\n                    \"component\": \"Textbox\",\n                    \"type\": \"string\"\n                }\n            ]\n        }\n    },\n    \"unnamed_endpoints\": {}\n}\n</code></pre> <p>This shows us that we have 1 API endpoint in this space, and shows us how to use the API endpoint to make a prediction: we should call the <code>.predict()</code> method (which we will explore below), providing a parameter <code>input_audio</code> of type <code>string</code>, which is a url to a file.</p> <p>We should also provide the <code>api_name='/predict'</code> argument to the <code>predict()</code> method. Although this isn't necessary if a Gradio app has only 1 named endpoint, it does allow us to call different endpoints in a single app if they are available. If an app has unnamed API endpoints, these can also be displayed by running <code>.view_api(all_endpoints=True)</code>.</p>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#making-a-prediction","title":"Making a prediction","text":"<p>The simplest way to make a prediction is simply to call the <code>.predict()</code> method with the appropriate arguments:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"abidlabs/en2fr\");\nconst result = await app.predict(\"/predict\", [\"Hello\"]);\n</code></pre> <p>If there are multiple parameters, then you should pass them as an array to <code>.predict()</code>, like this:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"gradio/calculator\");\nconst result = await app.predict(\"/predict\", [4, \"add\", 5]);\n</code></pre> <p>For certain inputs, such as images, you should pass in a <code>Buffer</code>, <code>Blob</code> or <code>File</code> depending on what is most convenient. In node, this would be a <code>Buffer</code> or <code>Blob</code>; in a browser environment, this would be a <code>Blob</code> or <code>File</code>.</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst response = await fetch(\n    \"https://audio-samples.github.io/samples/mp3/blizzard_unconditional/sample-0.mp3\"\n);\nconst audio_file = await response.blob();\n\nconst app = await client(\"abidlabs/whisper\");\nconst result = await client.predict(\"/predict\", [audio_file]);\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#using-events","title":"Using events","text":"<p>If the API you are working with can return results over time, or you wish to access information about the status of a job, you can use the event interface for more flexibility. This is especially useful for iterative endpoints or generator endpoints that will produce a series of values over time as discreet responses.</p> <pre><code>import { client } from \"@gradio/client\";\n\nfunction log_result(payload) {\n    const {\n        data: [translation]\n    } = payload;\n\n    console.log(`The translated result is: ${translation}`);\n}\n\nconst app = await client(\"abidlabs/en2fr\");\nconst job = app.submit(\"/predict\", [\"Hello\"]);\n\njob.on(\"data\", log_result);\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#status","title":"Status","text":"<p>The event interface also allows you to get the status of the running job by listening to the <code>\"status\"</code> event. This returns an object with the following attributes: <code>status</code> (a human readbale status of the current job, <code>\"pending\" | \"generating\" | \"complete\" | \"error\"</code>), <code>code</code> (the detailed gradio code for the job), <code>position</code> (the current position of this job in the queue), <code>queue_size</code> (the total queue size), <code>eta</code> (estimated time this job will complete), <code>success</code> (a boolean representing whether the job completed successfully), and <code>time</code> ( as <code>Date</code> object detailing the time that the status was generated).</p> <pre><code>import { client } from \"@gradio/client\";\n\nfunction log_status(status) {\n    console.log(\n        `The current status for this job is: ${JSON.stringify(status, null, 2)}.`\n    );\n}\n\nconst app = await client(\"abidlabs/en2fr\");\nconst job = app.submit(\"/predict\", [\"Hello\"]);\n\njob.on(\"status\", log_status);\n</code></pre>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#cancelling-jobs","title":"Cancelling Jobs","text":"<p>The job instance also has a <code>.cancel()</code> method that cancels jobs that have been queued but not started. For example, if you run:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"abidlabs/en2fr\");\nconst job_one = app.submit(\"/predict\", [\"Hello\"]);\nconst job_two = app.submit(\"/predict\", [\"Friends\"]);\n\njob_one.cancel();\njob_two.cancel();\n</code></pre> <p>If the first job has started processing, then it will not be canceled but the client will no longer listen for updates (throwing away the job). If the second job has not yet started, it will be successfully canceled and removed from the queue.</p>"},{"location":"08_client-libraries/02_getting-started-with-the-js-client/#generator-endpoints","title":"Generator Endpoints","text":"<p>Some Gradio API endpoints do not return a single value, rather they return a series of values. You can listen for these values in real time using the event interface:</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"gradio/count_generator\");\nconst job = app.submit(0, [9]);\n\njob.on(\"data\", (data) =&gt; console.log(data));\n</code></pre> <p>This will log out the values as they are generated by the endpoint.</p> <p>You can also cancel jobs that that have iterative outputs, in which case the job will finish immediately.</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"gradio/count_generator\");\nconst job = app.submit(0, [9]);\n\njob.on(\"data\", (data) =&gt; console.log(data));\n\nsetTimeout(() =&gt; {\n    job.cancel();\n}, 3000);\n</code></pre>"},{"location":"08_client-libraries/fastapi-app-with-the-gradio-client/","title":"Building a FastAPI App with the Gradio Python Client","text":"<p>Tags: CLIENT, API, WEB APP</p> <p>In this blog post, we will demonstrate how to use the <code>gradio_client</code> Python library, which enables developers to make requests to a Gradio app programmatically, by creating an example FastAPI web app. The web app we will be building is called \"Acapellify,\" and it will allow users to upload video files as input and return a version of that video without instrumental music. It will also display a gallery of generated videos.</p> <p>Prerequisites</p> <p>Before we begin, make sure you are running Python 3.9 or later, and have the following libraries installed:</p> <ul> <li><code>gradio_client</code></li> <li><code>fastapi</code></li> <li><code>uvicorn</code></li> </ul> <p>You can install these libraries from <code>pip</code>:</p> <pre><code>$ pip install gradio_client fastapi uvicorn\n</code></pre> <p>You will also need to have ffmpeg installed. You can check to see if you already have ffmpeg by running in your terminal:</p> <pre><code>$ ffmpeg version\n</code></pre> <p>Otherwise, install ffmpeg by following these instructions.</p>"},{"location":"08_client-libraries/fastapi-app-with-the-gradio-client/#step-1-write-the-video-processing-function","title":"Step 1: Write the Video Processing Function","text":"<p>Let's start with what seems like the most complex bit -- using machine learning to remove the music from a video.</p> <p>Luckily for us, there's an existing Space we can use to make this process easier: https://huggingface.co/spaces/abidlabs/music-separation. This Space takes an audio file and produces two separate audio files: one with the instrumental music and one with all other sounds in the original clip. Perfect to use with our client!</p> <p>Open a new Python file, say <code>main.py</code>, and start by importing the <code>Client</code> class from <code>gradio_client</code> and connecting it to this Space:</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/music-separation\")\n\ndef acapellify(audio_path):\n    result = client.predict(audio_path, api_name=\"/predict\")\n    return result[0]\n</code></pre> <p>That's all the code that's needed -- notice that the API endpoints returns two audio files (one without the music, and one with just the music) in a list, and so we just return the first element of the list.</p> <p>Note: since this is a public Space, there might be other users using this Space as well, which might result in a slow experience. You can duplicate this Space with your own Hugging Face token and create a private Space that only you have will have access to and bypass the queue. To do that, simply replace the first two lines above with:</p> <pre><code>from gradio_client import Client\n\nclient = Client.duplicate(\"abidlabs/music-separation\", hf_token=YOUR_HF_TOKEN)\n</code></pre> <p>Everything else remains the same!</p> <p>Now, of course, we are working with video files, so we first need to extract the audio from the video files. For this, we will be using the <code>ffmpeg</code> library, which does a lot of heavy lifting when it comes to working with audio and video files. The most common way to use <code>ffmpeg</code> is through the command line, which we'll call via Python's <code>subprocess</code> module:</p> <p>Our video processing workflow will consist of three steps:</p> <ol> <li>First, we start by taking in a video filepath and extracting the audio using <code>ffmpeg</code>.</li> <li>Then, we pass in the audio file through the <code>acapellify()</code> function above.</li> <li>Finally, we combine the new audio with the original video to produce a final acapellified video.</li> </ol> <p>Here's the complete code in Python, which you can add to your <code>main.py</code> file:</p> <pre><code>import subprocess\n\ndef process_video(video_path):\n    old_audio = os.path.basename(video_path).split(\".\")[0] + \".m4a\"\n    subprocess.run(['ffmpeg', '-y', '-i', video_path, '-vn', '-acodec', 'copy', old_audio])\n\n    new_audio = acapellify(old_audio)\n\n    new_video = f\"acap_{video_path}\"\n    subprocess.call(['ffmpeg', '-y', '-i', video_path, '-i', new_audio, '-map', '0:v', '-map', '1:a', '-c:v', 'copy', '-c:a', 'aac', '-strict', 'experimental', f\"static/{new_video}\"])\n    return new_video\n</code></pre> <p>You can read up on ffmpeg documentation if you'd like to understand all of the command line parameters, as they are beyond the scope of this tutorial.</p>"},{"location":"08_client-libraries/fastapi-app-with-the-gradio-client/#step-2-create-a-fastapi-app-backend-routes","title":"Step 2: Create a FastAPI app (Backend Routes)","text":"<p>Next up, we'll create a simple FastAPI app. If you haven't used FastAPI before, check out the great FastAPI docs. Otherwise, this basic template, which we add to <code>main.py</code>, will look pretty familiar:</p> <pre><code>import os\nfrom fastapi import FastAPI, File, UploadFile, Request\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\n\napp = FastAPI()\nos.makedirs(\"static\", exist_ok=True)\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\nvideos = []\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def home(request: Request):\n    return templates.TemplateResponse(\n        \"home.html\", {\"request\": request, \"videos\": videos})\n\n@app.post(\"/uploadvideo/\")\nasync def upload_video(video: UploadFile = File(...)):\n    new_video = process_video(video.filename)\n    videos.append(new_video)\n    return RedirectResponse(url='/', status_code=303)\n</code></pre> <p>In this example, the FastAPI app has two routes: <code>/</code> and <code>/uploadvideo/</code>.</p> <p>The <code>/</code> route returns an HTML template that displays a gallery of all uploaded videos.</p> <p>The <code>/uploadvideo/</code> route accepts a <code>POST</code> request with an <code>UploadFile</code> object, which represents the uploaded video file. The video file is \"acapellified\" via the <code>process_video()</code> method, and the output video is stored in a list which stores all of the uploaded videos in memory.</p> <p>Note that this is a very basic example and if this were a production app, you will need to add more logic to handle file storage, user authentication, and security considerations.</p>"},{"location":"08_client-libraries/fastapi-app-with-the-gradio-client/#step-3-create-a-fastapi-app-frontend-template","title":"Step 3: Create a FastAPI app (Frontend Template)","text":"<p>Finally, we create the frontend of our web application. First, we create a folder called <code>templates</code> in the same directory as <code>main.py</code>. We then create a template, <code>home.html</code> inside the <code>templates</code> folder. Here is the resulting file structure:</p> <pre><code>\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 home.html\n</code></pre> <p>Write the following as the contents of <code>home.html</code>:</p> <pre><code>&amp;lt;!DOCTYPE html&gt; &amp;lt;html&gt; &amp;lt;head&gt; &amp;lt;title&gt;Video Gallery&amp;lt;/title&gt;\n&amp;lt;style&gt; body { font-family: sans-serif; margin: 0; padding: 0;\nbackground-color: #f5f5f5; } h1 { text-align: center; margin-top: 30px;\nmargin-bottom: 20px; } .gallery { display: flex; flex-wrap: wrap;\njustify-content: center; gap: 20px; padding: 20px; } .video { border: 2px solid\n#ccc; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); border-radius: 5px; overflow:\nhidden; width: 300px; margin-bottom: 20px; } .video video { width: 100%; height:\n200px; } .video p { text-align: center; margin: 10px 0; } form { margin-top:\n20px; text-align: center; } input[type=\"file\"] { display: none; } .upload-btn {\ndisplay: inline-block; background-color: #3498db; color: #fff; padding: 10px\n20px; font-size: 16px; border: none; border-radius: 5px; cursor: pointer; }\n.upload-btn:hover { background-color: #2980b9; } .file-name { margin-left: 10px;\n} &amp;lt;/style&gt; &amp;lt;/head&gt; &amp;lt;body&gt; &amp;lt;h1&gt;Video Gallery&amp;lt;/h1&gt; {% if videos %}\n&amp;lt;div class=\"gallery\"&gt; {% for video in videos %} &amp;lt;div class=\"video\"&gt;\n&amp;lt;video controls&gt; &amp;lt;source src=\"{{ url_for('static', path=video) }}\"\ntype=\"video/mp4\"&gt; Your browser does not support the video tag. &amp;lt;/video&gt;\n&amp;lt;p&gt;{{ video }}&amp;lt;/p&gt; &amp;lt;/div&gt; {% endfor %} &amp;lt;/div&gt; {% else %} &amp;lt;p&gt;No\nvideos uploaded yet.&amp;lt;/p&gt; {% endif %} &amp;lt;form action=\"/uploadvideo/\"\nmethod=\"post\" enctype=\"multipart/form-data\"&gt; &amp;lt;label for=\"video-upload\"\nclass=\"upload-btn\"&gt;Choose video file&amp;lt;/label&gt; &amp;lt;input type=\"file\"\nname=\"video\" id=\"video-upload\"&gt; &amp;lt;span class=\"file-name\"&gt;&amp;lt;/span&gt; &amp;lt;button\ntype=\"submit\" class=\"upload-btn\"&gt;Upload&amp;lt;/button&gt; &amp;lt;/form&gt; &amp;lt;script&gt; //\nDisplay selected file name in the form const fileUpload =\ndocument.getElementById(\"video-upload\"); const fileName =\ndocument.querySelector(\".file-name\"); fileUpload.addEventListener(\"change\", (e)\n=&gt; { fileName.textContent = e.target.files[0].name; }); &amp;lt;/script&gt; &amp;lt;/body&gt;\n&amp;lt;/html&gt;\n</code></pre>"},{"location":"08_client-libraries/fastapi-app-with-the-gradio-client/#step-4-run-your-fastapi-app","title":"Step 4: Run your FastAPI app","text":"<p>Finally, we are ready to run our FastAPI app, powered by the Gradio Python Client!</p> <p>Open up a terminal and navigate to the directory containing <code>main.py</code>. Then run the following command in the terminal:</p> <pre><code>$ uvicorn main:app\n</code></pre> <p>You should see an output that looks like this:</p> <pre><code>Loaded as API: https://abidlabs-music-separation.hf.space \u2714\nINFO:     Started server process [1360]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>And that's it! Start uploading videos and you'll get some \"acapellified\" videos in response (might take seconds to minutes to process depending on the length of your videos). Here's how the UI looks after uploading two videos:</p> <p></p> <p>If you'd like to learn more about how to use the Gradio Python Client in your projects, read the dedicated Guide.</p>"},{"location":"08_client-libraries/gradio-and-llm-agents/","title":"Gradio &amp; LLM Agents \ud83e\udd1d","text":"<p>Large Language Models (LLMs) are very impressive but they can be made even more powerful if we could give them skills to accomplish specialized tasks.</p> <p>The gradio_tools library can turn any Gradio application into a tool that an agent can use to complete its task. For example, an LLM could use a Gradio tool to transcribe a voice recording it finds online and then summarize it for you. Or it could use a different Gradio tool to apply OCR to a document on your Google Drive and then answer questions about it.</p> <p>This guide will show how you can use <code>gradio_tools</code> to grant your LLM Agent access to the cutting edge Gradio applications hosted in the world. Although <code>gradio_tools</code> are compatible with more than one agent framework, we will focus on Langchain Agents in this guide.</p>"},{"location":"08_client-libraries/gradio-and-llm-agents/#some-background","title":"Some background","text":""},{"location":"08_client-libraries/gradio-and-llm-agents/#what-are-agents","title":"What are agents?","text":"<p>A LangChain agent is a Large Language Model (LLM) that takes user input and reports an output based on using one of many tools at its disposal.</p>"},{"location":"08_client-libraries/gradio-and-llm-agents/#what-is-gradio","title":"What is Gradio?","text":"<p>Gradio is the defacto standard framework for building Machine Learning Web Applications and sharing them with the world - all with just python! \ud83d\udc0d</p>"},{"location":"08_client-libraries/gradio-and-llm-agents/#gradio_tools-an-end-to-end-example","title":"gradio_tools - An end-to-end example","text":"<p>To get started with <code>gradio_tools</code>, all you need to do is import and initialize your tools and pass them to the langchain agent!</p> <p>In the following example, we import the <code>StableDiffusionPromptGeneratorTool</code> to create a good prompt for stable diffusion, the <code>StableDiffusionTool</code> to create an image with our improved prompt, the <code>ImageCaptioningTool</code> to caption the generated image, and the <code>TextToVideoTool</code> to create a video from a prompt.</p> <p>We then tell our agent to create an image of a dog riding a skateboard, but to please improve our prompt ahead of time. We also ask it to caption the generated image and create a video for it. The agent can decide which tool to use without us explicitly telling it.</p> <pre><code>import os\n\nif not os.getenv(\"OPENAI_API_KEY\"):\n    raise ValueError(\"OPENAI_API_KEY must be set\")\n\nfrom langchain.agents import initialize_agent\nfrom langchain.llms import OpenAI\nfrom gradio_tools import (StableDiffusionTool, ImageCaptioningTool, StableDiffusionPromptGeneratorTool,\n                          TextToVideoTool)\n\nfrom langchain.memory import ConversationBufferMemory\n\nllm = OpenAI(temperature=0)\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\ntools = [StableDiffusionTool().langchain, ImageCaptioningTool().langchain,\n         StableDiffusionPromptGeneratorTool().langchain, TextToVideoTool().langchain]\n\n\nagent = initialize_agent(tools, llm, memory=memory, agent=\"conversational-react-description\", verbose=True)\noutput = agent.run(input=(\"Please create a photo of a dog riding a skateboard \"\n                          \"but improve my prompt prior to using an image generator.\"\n                          \"Please caption the generated image and create a video for it using the improved prompt.\"))\n</code></pre> <p>You'll note that we are using some pre-built tools that come with <code>gradio_tools</code>. Please see this doc for a complete list of the tools that come with <code>gradio_tools</code>. If you would like to use a tool that's not currently in <code>gradio_tools</code>, it is very easy to add your own. That's what the next section will cover.</p>"},{"location":"08_client-libraries/gradio-and-llm-agents/#gradio_tools-creating-your-own-tool","title":"gradio_tools - creating your own tool","text":"<p>The core abstraction is the <code>GradioTool</code>, which lets you define a new tool for your LLM as long as you implement a standard interface:</p> <pre><code>class GradioTool(BaseTool):\n\n    def __init__(self, name: str, description: str, src: str) -&gt; None:\n\n    @abstractmethod\n    def create_job(self, query: str) -&gt; Job:\n        pass\n\n    @abstractmethod\n    def postprocess(self, output: Tuple[Any] | Any) -&gt; str:\n        pass\n</code></pre> <p>The requirements are:</p> <ol> <li>The name for your tool</li> <li>The description for your tool. This is crucial! Agents decide which tool to use based on their description. Be precise and be sure to include example of what the input and the output of the tool should look like.</li> <li>The url or space id, e.g. <code>freddyaboulton/calculator</code>, of the Gradio application. Based on this value, <code>gradio_tool</code> will create a gradio client instance to query the upstream application via API. Be sure to click the link and learn more about the gradio client library if you are not familiar with it.</li> <li>create_job - Given a string, this method should parse that string and return a job from the client. Most times, this is as simple as passing the string to the <code>submit</code> function of the client. More info on creating jobs here</li> <li>postprocess - Given the result of the job, convert it to a string the LLM can display to the user.</li> <li>Optional - Some libraries, e.g. MiniChain, may need some info about the underlying gradio input and output types used by the tool. By default, this will return gr.Textbox() but    if you'd like to provide more accurate info, implement the <code>_block_input(self, gr)</code> and <code>_block_output(self, gr)</code> methods of the tool. The <code>gr</code> variable is the gradio module (the result of <code>import gradio as gr</code>). It will be    automatically imported by the <code>GradiTool</code> parent class and passed to the <code>_block_input</code> and <code>_block_output</code> methods.</li> </ol> <p>And that's it!</p> <p>Once you have created your tool, open a pull request to the <code>gradio_tools</code> repo! We welcome all contributions.</p>"},{"location":"08_client-libraries/gradio-and-llm-agents/#example-tool-stable-diffusion","title":"Example tool - Stable Diffusion","text":"<p>Here is the code for the StableDiffusion tool as an example:</p> <pre><code>from gradio_tool import GradioTool\nimport os\n\nclass StableDiffusionTool(GradioTool):\n    \"\"\"Tool for calling stable diffusion from llm\"\"\"\n\n    def __init__(\n        self,\n        name=\"StableDiffusion\",\n        description=(\n            \"An image generator. Use this to generate images based on \"\n            \"text input. Input should be a description of what the image should \"\n            \"look like. The output will be a path to an image file.\"\n        ),\n        src=\"gradio-client-demos/stable-diffusion\",\n        hf_token=None,\n    ) -&gt; None:\n        super().__init__(name, description, src, hf_token)\n\n    def create_job(self, query: str) -&gt; Job:\n        return self.client.submit(query, \"\", 9, fn_index=1)\n\n    def postprocess(self, output: str) -&gt; str:\n        return [os.path.join(output, i) for i in os.listdir(output) if not i.endswith(\"json\")][0]\n\n    def _block_input(self, gr) -&gt; \"gr.components.Component\":\n        return gr.Textbox()\n\n    def _block_output(self, gr) -&gt; \"gr.components.Component\":\n        return gr.Image()\n</code></pre> <p>Some notes on this implementation:</p> <ol> <li>All instances of <code>GradioTool</code> have an attribute called <code>client</code> that is a pointed to the underlying gradio client. That is what you should use    in the <code>create_job</code> method.</li> <li><code>create_job</code> just passes the query string to the <code>submit</code> function of the client with some other parameters hardcoded, i.e. the negative prompt string and the guidance scale. We could modify our tool to also accept these values from the input string in a subsequent version.</li> <li>The <code>postprocess</code> method simply returns the first image from the gallery of images created by the stable diffusion space. We use the <code>os</code> module to get the full path of the image.</li> </ol>"},{"location":"08_client-libraries/gradio-and-llm-agents/#conclusion","title":"Conclusion","text":"<p>You now know how to extend the abilities of your LLM with the 1000s of gradio spaces running in the wild! Again, we welcome any contributions to the gradio_tools library. We're excited to see the tools you all build!</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/","title":"Create Your Own Friends with a GAN","text":"<p>Related spaces: https://huggingface.co/spaces/NimaBoscarino/cryptopunks, https://huggingface.co/spaces/nateraw/cryptopunks-generator Tags: GAN, IMAGE, HUB</p> <p>Contributed by Nima Boscarino and Nate Raw</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#introduction","title":"Introduction","text":"<p>It seems that cryptocurrencies, NFTs, and the web3 movement are all the rage these days! Digital assets are being listed on marketplaces for astounding amounts of money, and just about every celebrity is debuting their own NFT collection. While your crypto assets may be taxable, such as in Canada, today we'll explore some fun and tax-free ways to generate your own assortment of procedurally generated CryptoPunks.</p> <p>Generative Adversarial Networks, often known just as GANs, are a specific class of deep-learning models that are designed to learn from an input dataset to create (generate!) new material that is convincingly similar to elements of the original training set. Famously, the website thispersondoesnotexist.com went viral with lifelike, yet synthetic, images of people generated with a model called StyleGAN2. GANs have gained traction in the machine learning world, and are now being used to generate all sorts of images, text, and even music!</p> <p>Today we'll briefly look at the high-level intuition behind GANs, and then we'll build a small demo around a pre-trained GAN to see what all the fuss is about. Here's a peek at what we're going to be putting together.</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed. To use the pretrained model, also install <code>torch</code> and <code>torchvision</code>.</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#gans-a-very-brief-introduction","title":"GANs: a very brief introduction","text":"<p>Originally proposed in Goodfellow et al. 2014, GANs are made up of neural networks which compete with the intention of outsmarting each other. One network, known as the generator, is responsible for generating images. The other network, the discriminator, receives an image at a time from the generator along with a real image from the training data set. The discriminator then has to guess: which image is the fake?</p> <p>The generator is constantly training to create images which are trickier for the discriminator to identify, while the discriminator raises the bar for the generator every time it correctly detects a fake. As the networks engage in this competitive (adversarial!) relationship, the images that get generated improve to the point where they become indistinguishable to human eyes!</p> <p>For a more in-depth look at GANs, you can take a look at this excellent post on Analytics Vidhya or this PyTorch tutorial. For now, though, we'll dive into a demo!</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#step-1-create-the-generator-model","title":"Step 1 \u2014 Create the Generator model","text":"<p>To generate new images with a GAN, you only need the generator model. There are many different architectures that the generator could use, but for this demo we'll use a pretrained GAN generator model with the following architecture:</p> <pre><code>from torch import nn\n\nclass Generator(nn.Module):\n    # Refer to the link below for explanations about nc, nz, and ngf\n    # https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#inputs\n    def __init__(self, nc=4, nz=100, ngf=64):\n        super(Generator, self).__init__()\n        self.network = nn.Sequential(\n            nn.ConvTranspose2d(nz, ngf * 4, 3, 1, 0, bias=False),\n            nn.BatchNorm2d(ngf * 4),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 4, ngf * 2, 3, 2, 1, bias=False),\n            nn.BatchNorm2d(ngf * 2),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 0, bias=False),\n            nn.BatchNorm2d(ngf),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf, nc, 4, 2, 1, bias=False),\n            nn.Tanh(),\n        )\n\n    def forward(self, input):\n        output = self.network(input)\n        return output\n</code></pre> <p>We're taking the generator from this repo by @teddykoker, where you can also see the original discriminator model structure.</p> <p>After instantiating the model, we'll load in the weights from the Hugging Face Hub, stored at nateraw/cryptopunks-gan:</p> <pre><code>from huggingface_hub import hf_hub_download\nimport torch\n\nmodel = Generator()\nweights_path = hf_hub_download('nateraw/cryptopunks-gan', 'generator.pth')\nmodel.load_state_dict(torch.load(weights_path, map_location=torch.device('cpu'))) # Use 'cuda' if you have a GPU available\n</code></pre>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#step-2-defining-a-predict-function","title":"Step 2 \u2014 Defining a <code>predict</code> function","text":"<p>The <code>predict</code> function is the key to making Gradio work! Whatever inputs we choose through the Gradio interface will get passed through our <code>predict</code> function, which should operate on the inputs and generate outputs that we can display with Gradio output components. For GANs it's common to pass random noise into our model as the input, so we'll generate a tensor of random numbers and pass that through the model. We can then use <code>torchvision</code>'s <code>save_image</code> function to save the output of the model as a <code>png</code> file, and return the file name:</p> <pre><code>from torchvision.utils import save_image\n\ndef predict(seed):\n    num_punks = 4\n    torch.manual_seed(seed)\n    z = torch.randn(num_punks, 100, 1, 1)\n    punks = model(z)\n    save_image(punks, \"punks.png\", normalize=True)\n    return 'punks.png'\n</code></pre> <p>We're giving our <code>predict</code> function a <code>seed</code> parameter, so that we can fix the random tensor generation with a seed. We'll then be able to reproduce punks if we want to see them again by passing in the same seed.</p> <p>Note! Our model needs an input tensor of dimensions 100x1x1 to do a single inference, or (BatchSize)x100x1x1 for generating a batch of images. In this demo we'll start by generating 4 punks at a time.</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#step-3-creating-a-gradio-interface","title":"Step 3 \u2014 Creating a Gradio interface","text":"<p>At this point you can even run the code you have with <code>predict(&lt;SOME_NUMBER&gt;)</code>, and you'll find your freshly generated punks in your file system at <code>./punks.png</code>. To make a truly interactive demo, though, we'll build out a simple interface with Gradio. Our goals here are to:</p> <ul> <li>Set a slider input so users can choose the \"seed\" value</li> <li>Use an image component for our output to showcase the generated punks</li> <li>Use our <code>predict()</code> to take the seed and generate the images</li> </ul> <p>With <code>gr.Interface()</code>, we can define all of that with a single function call:</p> <pre><code>import gradio as gr\n\ngr.Interface(\n    predict,\n    inputs=[\n        gr.Slider(0, 1000, label='Seed', default=42),\n    ],\n    outputs=\"image\",\n).launch()\n</code></pre>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#step-4-even-more-punks","title":"Step 4 \u2014 Even more punks!","text":"<p>Generating 4 punks at a time is a good start, but maybe we'd like to control how many we want to make each time. Adding more inputs to our Gradio interface is as simple as adding another item to the <code>inputs</code> list that we pass to <code>gr.Interface</code>:</p> <pre><code>gr.Interface(\n    predict,\n    inputs=[\n        gr.Slider(0, 1000, label='Seed', default=42),\n        gr.Slider(4, 64, label='Number of Punks', step=1, default=10), # Adding another slider!\n    ],\n    outputs=\"image\",\n).launch()\n</code></pre> <p>The new input will be passed to our <code>predict()</code> function, so we have to make some changes to that function to accept a new parameter:</p> <pre><code>def predict(seed, num_punks):\n    torch.manual_seed(seed)\n    z = torch.randn(num_punks, 100, 1, 1)\n    punks = model(z)\n    save_image(punks, \"punks.png\", normalize=True)\n    return 'punks.png'\n</code></pre> <p>When you relaunch your interface, you should see a second slider that'll let you control the number of punks!</p>"},{"location":"09_other-tutorials/create-your-own-friends-with-a-gan/#step-5-polishing-it-up","title":"Step 5 - Polishing it up","text":"<p>Your Gradio app is pretty much good to go, but you can add a few extra things to really make it ready for the spotlight \u2728</p> <p>We can add some examples that users can easily try out by adding this to the <code>gr.Interface</code>:</p> <pre><code>gr.Interface(\n    # ...\n    # keep everything as it is, and then add\n    examples=[[123, 15], [42, 29], [456, 8], [1337, 35]],\n).launch(cache_examples=True) # cache_examples is optional\n</code></pre> <p>The <code>examples</code> parameter takes a list of lists, where each item in the sublists is ordered in the same order that we've listed the <code>inputs</code>. So in our case, <code>[seed, num_punks]</code>. Give it a try!</p> <p>You can also try adding a <code>title</code>, <code>description</code>, and <code>article</code> to the <code>gr.Interface</code>. Each of those parameters accepts a string, so try it out and see what happens \ud83d\udc40 <code>article</code> will also accept HTML, as explored in a previous guide!</p> <p>When you're all done, you may end up with something like this.</p> <p>For reference, here is our full code:</p> <pre><code>import torch\nfrom torch import nn\nfrom huggingface_hub import hf_hub_download\nfrom torchvision.utils import save_image\nimport gradio as gr\n\nclass Generator(nn.Module):\n    # Refer to the link below for explanations about nc, nz, and ngf\n    # https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#inputs\n    def __init__(self, nc=4, nz=100, ngf=64):\n        super(Generator, self).__init__()\n        self.network = nn.Sequential(\n            nn.ConvTranspose2d(nz, ngf * 4, 3, 1, 0, bias=False),\n            nn.BatchNorm2d(ngf * 4),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 4, ngf * 2, 3, 2, 1, bias=False),\n            nn.BatchNorm2d(ngf * 2),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 0, bias=False),\n            nn.BatchNorm2d(ngf),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf, nc, 4, 2, 1, bias=False),\n            nn.Tanh(),\n        )\n\n    def forward(self, input):\n        output = self.network(input)\n        return output\n\nmodel = Generator()\nweights_path = hf_hub_download('nateraw/cryptopunks-gan', 'generator.pth')\nmodel.load_state_dict(torch.load(weights_path, map_location=torch.device('cpu'))) # Use 'cuda' if you have a GPU available\n\ndef predict(seed, num_punks):\n    torch.manual_seed(seed)\n    z = torch.randn(num_punks, 100, 1, 1)\n    punks = model(z)\n    save_image(punks, \"punks.png\", normalize=True)\n    return 'punks.png'\n\ngr.Interface(\n    predict,\n    inputs=[\n        gr.Slider(0, 1000, label='Seed', default=42),\n        gr.Slider(4, 64, label='Number of Punks', step=1, default=10),\n    ],\n    outputs=\"image\",\n    examples=[[123, 15], [42, 29], [456, 8], [1337, 35]],\n).launch(cache_examples=True)\n</code></pre> <p>Congratulations! You've built out your very own GAN-powered CryptoPunks generator, with a fancy Gradio interface that makes it easy for anyone to use. Now you can scour the Hub for more GANs (or train your own) and continue making even more awesome demos \ud83e\udd17</p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/","title":"Custom Machine Learning Interpretations with Blocks","text":"<p>Tags: INTERPRETATION, SENTIMENT ANALYSIS</p> <p>Prerequisite: This Guide requires you to know about Blocks and the interpretation feature of Interfaces. Make sure to read the Guide to Blocks first as well as the interpretation section of the Advanced Interface Features Guide.</p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/#introduction","title":"Introduction","text":"<p>If you have experience working with the Interface class, then you know that interpreting the prediction of your machine learning model is as easy as setting the <code>interpretation</code> parameter to either \"default\" or \"shap\".</p> <p>You may be wondering if it is possible to add the same interpretation functionality to an app built with the Blocks API. Not only is it possible, but the flexibility of Blocks lets you display the interpretation output in ways that are impossible to do with Interfaces!</p> <p>This guide will show how to:</p> <ol> <li>Recreate the behavior of Interfaces's interpretation feature in a Blocks app.</li> <li>Customize how interpretations are displayed in a Blocks app.</li> </ol> <p>Let's get started!</p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/#setting-up-the-blocks-app","title":"Setting up the Blocks app","text":"<p>Let's build a sentiment classification app with the Blocks API. This app will take text as input and output the probability that this text expresses either negative or positive sentiment. We'll have a single input <code>Textbox</code> and a single output <code>Label</code> component. Below is the code for the app as well as the app itself.</p> <pre><code>import gradio as gr\nfrom transformers import pipeline\n\nsentiment_classifier = pipeline(\"text-classification\", return_all_scores=True)\n\ndef classifier(text):\n    pred = sentiment_classifier(text)\n    return {p[\"label\"]: p[\"score\"] for p in pred[0]}\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            input_text = gr.Textbox(label=\"Input Text\")\n            with gr.Row():\n                classify = gr.Button(\"Classify Sentiment\")\n        with gr.Column():\n            label = gr.Label(label=\"Predicted Sentiment\")\n\n    classify.click(classifier, input_text, label)\ndemo.launch()\n</code></pre> <p> </p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/#adding-interpretations-to-the-app","title":"Adding interpretations to the app","text":"<p>Our goal is to present to our users how the words in the input contribute to the model's prediction. This will help our users understand how the model works and also evaluate its effectiveness. For example, we should expect our model to identify the words \"happy\" and \"love\" with positive sentiment - if not it's a sign we made a mistake in training it!</p> <p>For each word in the input, we will compute a score of how much the model's prediction of positive sentiment is changed by that word. Once we have those <code>(word, score)</code> pairs we can use gradio to visualize them for the user.</p> <p>The shap library will help us compute the <code>(word, score)</code> pairs and gradio will take care of displaying the output to the user.</p> <p>The following code computes the <code>(word, score)</code> pairs:</p> <pre><code>def interpretation_function(text):\n    explainer = shap.Explainer(sentiment_classifier)\n    shap_values = explainer([text])\n\n    # Dimensions are (batch size, text size, number of classes)\n    # Since we care about positive sentiment, use index 1\n    scores = list(zip(shap_values.data[0], shap_values.values[0, :, 1]))\n    # Scores contains (word, score) pairs\n\n\n    # Format expected by gr.components.Interpretation\n    return {\"original\": text, \"interpretation\": scores}\n</code></pre> <p>Now, all we have to do is add a button that runs this function when clicked. To display the interpretation, we will use <code>gr.components.Interpretation</code>. This will color each word in the input either red or blue. Red if it contributes to positive sentiment and blue if it contributes to negative sentiment. This is how <code>Interface</code> displays the interpretation output for text.</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            input_text = gr.Textbox(label=\"Input Text\")\n            with gr.Row():\n                classify = gr.Button(\"Classify Sentiment\")\n                interpret = gr.Button(\"Interpret\")\n        with gr.Column():\n            label = gr.Label(label=\"Predicted Sentiment\")\n        with gr.Column():\n            interpretation = gr.components.Interpretation(input_text)\n    classify.click(classifier, input_text, label)\n    interpret.click(interpretation_function, input_text, interpretation)\n\ndemo.launch()\n</code></pre> <p> </p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/#customizing-how-the-interpretation-is-displayed","title":"Customizing how the interpretation is displayed","text":"<p>The <code>gr.components.Interpretation</code> component does a good job of showing how individual words contribute to the sentiment prediction, but what if we also wanted to display the score themselves along with the words?</p> <p>One way to do this would be to generate a bar plot where the words are on the horizontal axis and the bar height corresponds to the shap score.</p> <p>We can do this by modifying our <code>interpretation_function</code> to additionally return a matplotlib bar plot. We will display it with the <code>gr.Plot</code> component in a separate tab.</p> <p>This is how the interpretation function will look:</p> <pre><code>def interpretation_function(text):\n    explainer = shap.Explainer(sentiment_classifier)\n    shap_values = explainer([text])\n    # Dimensions are (batch size, text size, number of classes)\n    # Since we care about positive sentiment, use index 1\n    scores = list(zip(shap_values.data[0], shap_values.values[0, :, 1]))\n\n    scores_desc = sorted(scores, key=lambda t: t[1])[::-1]\n\n    # Filter out empty string added by shap\n    scores_desc = [t for t in scores_desc if t[0] != \"\"]\n\n    fig_m = plt.figure()\n\n    # Select top 5 words that contribute to positive sentiment\n    plt.bar(x=[s[0] for s in scores_desc[:5]],\n            height=[s[1] for s in scores_desc[:5]])\n    plt.title(\"Top words contributing to positive sentiment\")\n    plt.ylabel(\"Shap Value\")\n    plt.xlabel(\"Word\")\n    return {\"original\": text, \"interpretation\": scores}, fig_m\n</code></pre> <p>And this is how the app code will look:</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            input_text = gr.Textbox(label=\"Input Text\")\n            with gr.Row():\n                classify = gr.Button(\"Classify Sentiment\")\n                interpret = gr.Button(\"Interpret\")\n        with gr.Column():\n            label = gr.Label(label=\"Predicted Sentiment\")\n        with gr.Column():\n            with gr.Tabs():\n                with gr.TabItem(\"Display interpretation with built-in component\"):\n                    interpretation = gr.components.Interpretation(input_text)\n                with gr.TabItem(\"Display interpretation with plot\"):\n                    interpretation_plot = gr.Plot()\n\n    classify.click(classifier, input_text, label)\n    interpret.click(interpretation_function, input_text, [interpretation, interpretation_plot])\n\ndemo.launch()\n</code></pre> <p>You can see the demo below!</p> <p> </p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/#beyond-sentiment-classification","title":"Beyond Sentiment Classification","text":"<p>Although we have focused on sentiment classification so far, you can add interpretations to almost any machine learning model. The output must be an <code>gr.Image</code> or <code>gr.Label</code> but the input can be almost anything (<code>gr.Number</code>, <code>gr.Slider</code>, <code>gr.Radio</code>, <code>gr.Image</code>).</p> <p>Here is a demo built with blocks of interpretations for an image classification model:</p> <p> </p>"},{"location":"09_other-tutorials/custom-interpretations-with-blocks/#closing-remarks","title":"Closing remarks","text":"<p>We did a deep dive \ud83e\udd3f into how interpretations work and how you can add them to your Blocks app.</p> <p>We also showed how the Blocks API gives you the power to control how the interpretation is visualized in your app.</p> <p>Adding interpretations is a helpful way to make your users understand and gain trust in your model. Now you have all the tools you need to add them to all of your apps!</p>"},{"location":"09_other-tutorials/developing-faster-with-reload-mode/","title":"Developing Faster with Auto-Reloading","text":"<p>Prerequisite: This Guide requires you to know about Blocks. Make sure to read the Guide to Blocks first.</p> <p>This guide covers auto reloading, reloading in a Python IDE, and using gradio with Jupyter Notebooks.</p>"},{"location":"09_other-tutorials/developing-faster-with-reload-mode/#why-auto-reloading","title":"Why Auto-Reloading?","text":"<p>When you are building a Gradio demo, particularly out of Blocks, you may find it cumbersome to keep re-running your code to test your changes.</p> <p>To make it faster and more convenient to write your code, we've made it easier to \"reload\" your Gradio apps instantly when you are developing in a Python IDE (like VS Code, Sublime Text, PyCharm, or so on) or generally running your Python code from the terminal. We've also developed an analogous \"magic command\" that allows you to re-run cells faster if you use Jupyter Notebooks (or any similar environment like Colab).</p> <p>This short Guide will cover both of these methods, so no matter how you write Python, you'll leave knowing how to build Gradio apps faster.</p>"},{"location":"09_other-tutorials/developing-faster-with-reload-mode/#python-ide-reload","title":"Python IDE Reload \ud83d\udd25","text":"<p>If you are building Gradio Blocks using a Python IDE, your file of code (let's name it <code>run.py</code>) might look something like this:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# Greetings from Gradio!\")\n    inp = gr.Textbox(placeholder=\"What is your name?\")\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: f\"Welcome, {x}!\",\n               inputs=inp,\n               outputs=out)\n\nif __name__ == \"__main__\":\n    demo.launch()\n</code></pre> <p>The problem is that anytime that you want to make a change to your layout, events, or components, you have to close and rerun your app by writing <code>python run.py</code>.</p> <p>Instead of doing this, you can run your code in reload mode by changing 1 word: <code>python</code> to <code>gradio</code>:</p> <p>In the terminal, run <code>gradio run.py</code>. That's it!</p> <p>Now, you'll see that after you'll see something like this:</p> <pre><code>Watching: '/Users/freddy/sources/gradio/gradio', '/Users/freddy/sources/gradio/demo/'\n\nRunning on local URL:  http://127.0.0.1:7860\n</code></pre> <p>The important part here is the line that says <code>Watching...</code> What's happening here is that Gradio will be observing the directory where <code>run.py</code> file lives, and if the file changes, it will automatically rerun the file for you. So you can focus on writing your code, and your Gradio demo will refresh automatically \ud83e\udd73</p> <p>\u26a0\ufe0f Warning: the <code>gradio</code> command does not detect the parameters passed to the <code>launch()</code> methods because the <code>launch()</code> method is never called in reload mode. For example, setting <code>auth</code>, or <code>show_error</code> in <code>launch()</code> will not be reflected in the app.</p> <p>There is one important thing to keep in mind when using the reload mode: Gradio specifically looks for a Gradio Blocks/Interface demo called <code>demo</code> in your code. If you have named your demo something else, you will need to pass in the name of your demo as the 2nd parameter in your code. So if your <code>run.py</code> file looked like this:</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as my_demo:\n    gr.Markdown(\"# Greetings from Gradio!\")\n    inp = gr.Textbox(placeholder=\"What is your name?\")\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: f\"Welcome, {x}!\",\n               inputs=inp,\n               outputs=out)\n\nif __name__ == \"__main__\":\n    my_demo.launch()\n</code></pre> <p>Then you would launch it in reload mode like this: <code>gradio run.py my_demo</code>.</p> <p>\ud83d\udd25 If your application accepts command line arguments, you can pass them in as well. Here's an example:</p> <pre><code>import gradio as gr\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--name\", type=str, default=\"User\")\nargs, unknown = parser.parse_known_args()\n\nwith gr.Blocks() as demo:\n    gr.Markdown(f\"# Greetings {args.name}!\")\n    inp = gr.Textbox()\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: x, inputs=inp, outputs=out)\n\nif __name__ == \"__main__\":\n    demo.launch()\n</code></pre> <p>Which you could run like this: <code>gradio run.py --name Gretel</code></p> <p>As a small aside, this auto-reloading happens if you change your <code>run.py</code> source code or the Gradio source code. Meaning that this can be useful if you decide to contribute to Gradio itself \u2705</p>"},{"location":"09_other-tutorials/developing-faster-with-reload-mode/#jupyter-notebook-magic","title":"Jupyter Notebook Magic \ud83d\udd2e","text":"<p>What about if you use Jupyter Notebooks (or Colab Notebooks, etc.) to develop code? We got something for you too!</p> <p>We've developed a magic command that will create and run a Blocks demo for you. To use this, load the gradio extension at the top of your notebook:</p> <p><code>%load_ext gradio</code></p> <p>Then, in the cell that you are developing your Gradio demo, simply write the magic command <code>%%blocks</code> at the top, and then write the layout and components like you would normally:</p> <pre><code>%%blocks\n\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(f\"# Greetings {args.name}!\")\n    inp = gr.Textbox()\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: x, inputs=inp, outputs=out)\n</code></pre> <p>Notice that:</p> <ul> <li> <p>You do not need to launch your demo \u2014 Gradio does that for you automatically!</p> </li> <li> <p>Every time you rerun the cell, Gradio will re-render your app on the same port and using the same underlying web server. This means you'll see your changes much, much faster than if you were rerunning the cell normally.</p> </li> </ul> <p>Here's what it looks like in a jupyter notebook:</p> <p></p> <p>\ud83e\ude84 This works in colab notebooks too! Here's a colab notebook where you can see the Blocks magic in action. Try making some changes and re-running the cell with the Gradio code!</p> <p>The Notebook Magic is now the author's preferred way of building Gradio demos. Regardless of how you write Python code, we hope either of these methods will give you a much better development experience using Gradio.</p>"},{"location":"09_other-tutorials/developing-faster-with-reload-mode/#next-steps","title":"Next Steps","text":"<p>Now that you know how to develop quickly using Gradio, start building your own!</p> <p>If you are looking for inspiration, try exploring demos other people have built with Gradio, browse public Hugging Face Spaces \ud83e\udd17</p>"},{"location":"09_other-tutorials/gradio-lite/","title":"Gradio-Lite: Serverless Gradio Running Entirely in Your Browser","text":"<p>Tags: SERVERLESS, BROWSER, PYODIDE</p> <p>Gradio is a popular Python library for creating interactive machine learning apps. Traditionally, Gradio applications have relied on server-side infrastructure to run, which can be a hurdle for developers who need to host their applications. </p> <p>Enter Gradio-lite (<code>@gradio/lite</code>): a library that leverages Pyodide to bring Gradio directly to your browser. In this blog post, we'll explore what <code>@gradio/lite</code> is, go over example code, and discuss the benefits it offers for running Gradio applications.</p>"},{"location":"09_other-tutorials/gradio-lite/#what-is-gradiolite","title":"What is <code>@gradio/lite</code>?","text":"<p><code>@gradio/lite</code> is a JavaScript library that enables you to run Gradio applications directly within your web browser. It achieves this by utilizing Pyodide, a Python runtime for WebAssembly, which allows Python code to be executed in the browser environment. With <code>@gradio/lite</code>, you can write regular Python code for your Gradio applications, and they will run seamlessly in the browser without the need for server-side infrastructure.</p>"},{"location":"09_other-tutorials/gradio-lite/#getting-started","title":"Getting Started","text":"<p>Let's build a \"Hello World\" Gradio app in <code>@gradio/lite</code></p>"},{"location":"09_other-tutorials/gradio-lite/#1-import-js-and-css","title":"1. Import JS and CSS","text":"<p>Start by creating a new HTML file, if you don't have one already. Importing the JavaScript and CSS corresponding to the <code>@gradio/lite</code> package by using the following code:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"module\" crossorigin src=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.css\" /&gt;\n    &lt;/head&gt;\n&lt;/html&gt;\n</code></pre> <p>Note that you should generally use the latest version of <code>@gradio/lite</code> that is available. You can see the versions available here.</p>"},{"location":"09_other-tutorials/gradio-lite/#2-create-the-gradio-lite-tags","title":"2. Create the <code>&lt;gradio-lite&gt;</code> tags","text":"<p>Somewhere in the body of your HTML page (wherever you'd like the Gradio app to be rendered), create opening and closing <code>&lt;gradio-lite&gt;</code> tags. </p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"module\" crossorigin src=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;gradio-lite&gt;\n        &lt;/gradio-lite&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note: you can add the <code>theme</code> attribute to the <code>&lt;gradio-lite&gt;</code> tag to force the theme to be dark or light (by default, it respects the system theme). E.g.</p> <pre><code>&lt;gradio-lite theme=\"dark\"&gt;\n...\n&lt;/gradio-lite&gt;\n</code></pre>"},{"location":"09_other-tutorials/gradio-lite/#3-write-your-gradio-app-inside-of-the-tags","title":"3. Write your Gradio app inside of the tags","text":"<p>Now, write your Gradio app as you would normally, in Python! Keep in mind that since this is Python, whitespace and indentations matter. </p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"module\" crossorigin src=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;gradio-lite&gt;\n        import gradio as gr\n\n        def greet(name):\n            return \"Hello, \" + name + \"!\"\n\n        gr.Interface(greet, \"textbox\", \"textbox\").launch()\n        &lt;/gradio-lite&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>And that's it! You should now be able to open your HTML page in the browser and see the Gradio app rendered! Note that it may take a little while for the Gradio app to load initially since Pyodide can take a while to install in your browser.</p> <p>Note on debugging: to see any errors in your Gradio-lite application, open the inspector in your web browser. All errors (including Python errors) will be printed there.</p>"},{"location":"09_other-tutorials/gradio-lite/#more-examples-adding-additional-files-and-requirements","title":"More Examples: Adding Additional Files and Requirements","text":"<p>What if you want to create a Gradio app that spans multiple files? Or that has custom Python requirements? Both are possible with <code>@gradio/lite</code>!</p>"},{"location":"09_other-tutorials/gradio-lite/#multiple-files","title":"Multiple Files","text":"<p>Adding multiple files within a <code>@gradio/lite</code> app is very straightrward: use the <code>&lt;gradio-file&gt;</code> tag. You can have as many <code>&lt;gradio-file&gt;</code> tags as you want, but each one needs to have a <code>name</code> attribute and the entry point to your Gradio app should have the <code>entrypoint</code> attribute.</p> <p>Here's an example:</p> <pre><code>&lt;gradio-lite&gt;\n\n&lt;gradio-file name=\"app.py\" entrypoint&gt;\nimport gradio as gr\nfrom utils import add\n\ndemo = gr.Interface(fn=add, inputs=[\"number\", \"number\"], outputs=\"number\")\n\ndemo.launch()\n&lt;/gradio-file&gt;\n\n&lt;gradio-file name=\"utils.py\" &gt;\ndef add(a, b):\n    return a + b\n&lt;/gradio-file&gt;\n\n&lt;/gradio-lite&gt;      \n</code></pre>"},{"location":"09_other-tutorials/gradio-lite/#additional-requirements","title":"Additional Requirements","text":"<p>If your Gradio app has additional requirements, it is usually possible to install them in the browser using micropip. We've created a wrapper to make this paticularly convenient: simply list your requirements in the same syntax as a <code>requirements.txt</code> and enclose them with <code>&lt;gradio-requirements&gt;</code> tags.</p> <p>Here, we install <code>transformers_js_py</code> to run a text classification model directly in the browser!</p> <pre><code>&lt;gradio-lite&gt;\n\n&lt;gradio-requirements&gt;\ntransformers_js_py\n&lt;/gradio-requirements&gt;\n\n&lt;gradio-file name=\"app.py\" entrypoint&gt;\nfrom transformers_js import import_transformers_js\nimport gradio as gr\n\ntransformers = await import_transformers_js()\npipeline = transformers.pipeline\npipe = await pipeline('sentiment-analysis')\n\nasync def classify(text):\n    return await pipe(text)\n\ndemo = gr.Interface(classify, \"textbox\", \"json\")\ndemo.launch()\n&lt;/gradio-file&gt;\n\n&lt;/gradio-lite&gt;  \n</code></pre> <p>Try it out: You can see this example running in this Hugging Face Static Space, which lets you host static (serverless) web applications for free. Visit the page and you'll be able to run a machine learning model without internet access!</p>"},{"location":"09_other-tutorials/gradio-lite/#benefits-of-using-gradiolite","title":"Benefits of Using <code>@gradio/lite</code>","text":""},{"location":"09_other-tutorials/gradio-lite/#1-serverless-deployment","title":"1. Serverless Deployment","text":"<p>The primary advantage of @gradio/lite is that it eliminates the need for server infrastructure. This simplifies deployment, reduces server-related costs, and makes it easier to share your Gradio applications with others.</p>"},{"location":"09_other-tutorials/gradio-lite/#2-low-latency","title":"2. Low Latency","text":"<p>By running in the browser, @gradio/lite offers low-latency interactions for users. There's no need for data to travel to and from a server, resulting in faster responses and a smoother user experience.</p>"},{"location":"09_other-tutorials/gradio-lite/#3-privacy-and-security","title":"3. Privacy and Security","text":"<p>Since all processing occurs within the user's browser, <code>@gradio/lite</code> enhances privacy and security. User data remains on their device, providing peace of mind regarding data handling.</p>"},{"location":"09_other-tutorials/gradio-lite/#limitations","title":"Limitations","text":"<ul> <li> <p>Currently, the biggest limitation in using <code>@gradio/lite</code> is that your Gradio apps will generally take more time (usually 5-15 seconds) to load initially in the browser. This is because the browser needs to load the Pyodide runtime before it can render Python code. </p> </li> <li> <p>Not every Python package is supported by Pyodide. While <code>gradio</code> and many other popular packages (including <code>numpy</code>, <code>scikit-learn</code>, and <code>transformers-js</code>) can be installed in Pyodide, if your app has many dependencies, its worth checking whether whether the dependencies are included in Pyodide, or can be installed with <code>micropip</code>.</p> </li> </ul>"},{"location":"09_other-tutorials/gradio-lite/#try-it-out","title":"Try it out!","text":"<p>You can immediately try out <code>@gradio/lite</code> by copying and pasting this code in a local <code>index.html</code> file and opening it with your browser:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"module\" crossorigin src=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@gradio/lite/dist/lite.css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;gradio-lite&gt;\n        import gradio as gr\n\n        def greet(name):\n            return \"Hello, \" + name + \"!\"\n\n        gr.Interface(greet, \"textbox\", \"textbox\").launch()\n        &lt;/gradio-lite&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>We've also created a playground on the Gradio website that allows you to interactively edit code and see the results immediately! </p> <p>Playground: https://www.gradio.app/playground</p>"},{"location":"09_other-tutorials/how-to-use-3D-model-component/","title":"How to Use the 3D Model Component","text":"<p>Related spaces: https://huggingface.co/spaces/gradio/Model3D, https://huggingface.co/spaces/gradio/PIFu-Clothed-Human-Digitization, https://huggingface.co/spaces/gradio/dpt-depth-estimation-3d-obj Tags: VISION, IMAGE</p>"},{"location":"09_other-tutorials/how-to-use-3D-model-component/#introduction","title":"Introduction","text":"<p>3D models are becoming more popular in machine learning and make for some of the most fun demos to experiment with. Using <code>gradio</code>, you can easily build a demo of your 3D image model and share it with anyone. The Gradio 3D Model component accepts 3 file types including: .obj, .glb, &amp; .gltf.</p> <p>This guide will show you how to build a demo for your 3D image model in a few lines of code; like the one below. Play around with 3D object by clicking around, dragging and zooming:</p> <p> </p>"},{"location":"09_other-tutorials/how-to-use-3D-model-component/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed.</p>"},{"location":"09_other-tutorials/how-to-use-3D-model-component/#taking-a-look-at-the-code","title":"Taking a Look at the Code","text":"<p>Let's take a look at how to create the minimal interface above. The prediction function in this case will just return the original 3D model mesh, but you can change this function to run inference on your machine learning model. We'll take a look at more complex examples below.</p> <pre><code>import gradio as gr\nimport os\n\n\ndef load_mesh(mesh_file_name):\n    return mesh_file_name\n\n\ndemo = gr.Interface(\n    fn=load_mesh,\n    inputs=gr.Model3D(),\n    outputs=gr.Model3D(\n            clear_color=[0.0, 0.0, 0.0, 0.0],  label=\"3D Model\"),\n    examples=[\n        [os.path.join(os.path.dirname(__file__), \"files/Bunny.obj\")],\n        [os.path.join(os.path.dirname(__file__), \"files/Duck.glb\")],\n        [os.path.join(os.path.dirname(__file__), \"files/Fox.gltf\")],\n        [os.path.join(os.path.dirname(__file__), \"files/face.obj\")],\n    ],\n)\n\nif __name__ == \"__main__\":\n    demo.launch()\n</code></pre> <p>Let's break down the code above:</p> <p><code>load_mesh</code>: This is our 'prediction' function and for simplicity, this function will take in the 3D model mesh and return it.</p> <p>Creating the Interface:</p> <ul> <li><code>fn</code>: the prediction function that is used when the user clicks submit. In our case this is the <code>load_mesh</code> function.</li> <li><code>inputs</code>: create a model3D input component. The input expects an uploaded file as a {str} filepath.</li> <li><code>outputs</code>: create a model3D output component. The output component also expects a file as a {str} filepath.</li> <li><code>clear_color</code>: this is the background color of the 3D model canvas. Expects RGBa values.</li> <li><code>label</code>: the label that appears on the top left of the component.</li> <li><code>examples</code>: list of 3D model files. The 3D model component can accept .obj, .glb, &amp; .gltf file types.</li> <li><code>cache_examples</code>: saves the predicted output for the examples, to save time on inference.</li> </ul>"},{"location":"09_other-tutorials/how-to-use-3D-model-component/#exploring-a-more-complex-model3d-demo","title":"Exploring a more complex Model3D Demo:","text":"<p>Below is a demo that uses the DPT model to predict the depth of an image and then uses 3D Point Cloud to create a 3D object. Take a look at the app.py file for a peek into the code and the model prediction function.  </p> <p>And you're done! That's all the code you need to build an interface for your Model3D model. Here are some references that you may find useful:</p> <ul> <li>Gradio's \"Getting Started\" guide</li> <li>The first 3D Model Demo and complete code (on Hugging Face Spaces)</li> </ul>"},{"location":"09_other-tutorials/named-entity-recognition/","title":"Named-Entity Recognition","text":"<p>Related spaces: https://huggingface.co/spaces/rajistics/biobert_ner_demo, https://huggingface.co/spaces/abidlabs/ner, https://huggingface.co/spaces/rajistics/Financial_Analyst_AI Tags: NER, TEXT, HIGHLIGHT</p>"},{"location":"09_other-tutorials/named-entity-recognition/#introduction","title":"Introduction","text":"<p>Named-entity recognition (NER), also known as token classification or text tagging, is the task of taking a sentence and classifying every word (or \"token\") into different categories, such as names of people or names of locations, or different parts of speech.</p> <p>For example, given the sentence:</p> <p>Does Chicago have any Pakistani restaurants?</p> <p>A named-entity recognition algorithm may identify:</p> <ul> <li>\"Chicago\" as a location</li> <li>\"Pakistani\" as an ethnicity</li> </ul> <p>and so on.</p> <p>Using <code>gradio</code> (specifically the <code>HighlightedText</code> component), you can easily build a web demo of your NER model and share that with the rest of your team.</p> <p>Here is an example of a demo that you'll be able to build:</p> <p>$demo_ner_pipeline</p> <p>This tutorial will show how to take a pretrained NER model and deploy it with a Gradio interface. We will show two different ways to use the <code>HighlightedText</code> component -- depending on your NER model, either of these two ways may be easier to learn!</p>"},{"location":"09_other-tutorials/named-entity-recognition/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed. You will also need a pretrained named-entity recognition model. You can use your own, while in this tutorial, we will use one from the <code>transformers</code> library.</p>"},{"location":"09_other-tutorials/named-entity-recognition/#approach-1-list-of-entity-dictionaries","title":"Approach 1: List of Entity Dictionaries","text":"<p>Many named-entity recognition models output a list of dictionaries. Each dictionary consists of an entity, a \"start\" index, and an \"end\" index. This is, for example, how NER models in the <code>transformers</code> library operate:</p> <pre><code>from transformers import pipeline\nner_pipeline = pipeline(\"ner\")\nner_pipeline(\"Does Chicago have any Pakistani restaurants\")\n</code></pre> <p>Output:</p> <pre><code>[{'entity': 'I-LOC',\n  'score': 0.9988978,\n  'index': 2,\n  'word': 'Chicago',\n  'start': 5,\n  'end': 12},\n {'entity': 'I-MISC',\n  'score': 0.9958592,\n  'index': 5,\n  'word': 'Pakistani',\n  'start': 22,\n  'end': 31}]\n</code></pre> <p>If you have such a model, it is very easy to hook it up to Gradio's <code>HighlightedText</code> component. All you need to do is pass in this list of entities, along with the original text to the model, together as dictionary, with the keys being <code>\"entities\"</code> and <code>\"text\"</code> respectively.</p> <p>Here is a complete example:</p> <p>$code_ner_pipeline $demo_ner_pipeline</p>"},{"location":"09_other-tutorials/named-entity-recognition/#approach-2-list-of-tuples","title":"Approach 2: List of Tuples","text":"<p>An alternative way to pass data into the <code>HighlightedText</code> component is a list of tuples. The first element of each tuple should be the word or words that are being classified into a particular entity. The second element should be the entity label (or <code>None</code> if they should be unlabeled). The <code>HighlightedText</code> component automatically strings together the words and labels to display the entities.</p> <p>In some cases, this can be easier than the first approach. Here is a demo showing this approach using Spacy's parts-of-speech tagger:</p> <p>$code_text_analysis $demo_text_analysis</p> <p>And you're done! That's all you need to know to build a web-based GUI for your NER model.</p> <p>Fun tip: you can share your NER demo instantly with others simply by setting <code>share=True</code> in <code>launch()</code>.</p>"},{"location":"09_other-tutorials/real-time-speech-recognition/","title":"Real Time Speech Recognition","text":"<p>Tags: ASR, SPEECH, STREAMING</p>"},{"location":"09_other-tutorials/real-time-speech-recognition/#introduction","title":"Introduction","text":"<p>Automatic speech recognition (ASR), the conversion of spoken speech to text, is a very important and thriving area of machine learning. ASR algorithms run on practically every smartphone, and are becoming increasingly embedded in professional workflows, such as digital assistants for nurses and doctors. Because ASR algorithms are designed to be used directly by customers and end users, it is important to validate that they are behaving as expected when confronted with a wide variety of speech patterns (different accents, pitches, and background audio conditions).</p> <p>Using <code>gradio</code>, you can easily build a demo of your ASR model and share that with a testing team, or test it yourself by speaking through the microphone on your device.</p> <p>This tutorial will show how to take a pretrained speech-to-text model and deploy it with a Gradio interface. We will start with a full-context model, in which the user speaks the entire audio before the prediction runs. Then we will adapt the demo to make it streaming, meaning that the audio model will convert speech as you speak. </p>"},{"location":"09_other-tutorials/real-time-speech-recognition/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the <code>gradio</code> Python package already installed. You will also need a pretrained speech recognition model. In this tutorial, we will build demos from 2 ASR libraries:</p> <ul> <li>Transformers (for this, <code>pip install transformers</code> and <code>pip install torch</code>)</li> </ul> <p>Make sure you have at least one of these installed so that you can follow along the tutorial. You will also need <code>ffmpeg</code> installed on your system, if you do not already have it, to process files from the microphone.</p> <p>Here's how to build a real time speech recognition (ASR) app:</p> <ol> <li>Set up the Transformers ASR Model</li> <li>Create a Full-Context ASR Demo with Transformers</li> <li>Create a Streaming ASR Demo with Transformers</li> </ol>"},{"location":"09_other-tutorials/real-time-speech-recognition/#1-set-up-the-transformers-asr-model","title":"1. Set up the Transformers ASR Model","text":"<p>First, you will need to have an ASR model that you have either trained yourself or you will need to download a pretrained model. In this tutorial, we will start by using a pretrained ASR model from the model, <code>whisper</code>.</p> <p>Here is the code to load <code>whisper</code> from Hugging Face <code>transformers</code>.</p> <pre><code>from transformers import pipeline\n\np = pipeline(\"automatic-speech-recognition\", model=\"openai/whisper-base.en\")\n</code></pre> <p>That's it!</p>"},{"location":"09_other-tutorials/real-time-speech-recognition/#2-create-a-full-context-asr-demo-with-transformers","title":"2. Create a Full-Context ASR Demo with Transformers","text":"<p>We will start by creating a full-context ASR demo, in which the user speaks the full audio before using the ASR model to run inference. This is very easy with Gradio -- we simply create a function around the <code>pipeline</code> object above.</p> <p>We will use <code>gradio</code>'s built in <code>Audio</code> component, configured to take input from the user's microphone and return a filepath for the recorded audio. The output component will be a plain <code>Textbox</code>.</p> <p>$code_asr $demo_asr</p> <p>The <code>transcribe</code> function takes a single parameter, <code>audio</code>, which is a numpy array of the audio the user recorded. The <code>pipeline</code> object expects this in float32 format, so we convert it first to float32, and then extract the transcribed text.</p>"},{"location":"09_other-tutorials/real-time-speech-recognition/#3-create-a-streaming-asr-demo-with-transformers","title":"3. Create a Streaming ASR Demo with Transformers","text":"<p>To make this a streaming demo, we need to make these changes:</p> <ol> <li>Set <code>streaming=True</code> in the <code>Audio</code> component</li> <li>Set <code>live=True</code> in the <code>Interface</code></li> <li>Add a <code>state</code> to the interface to store the recorded audio of a user</li> </ol> <p>Take a look below.</p> <p>$code_stream_asr</p> <p>Notice now we have a state variable now, because we need to track all the audio history. <code>transcribe</code> gets called whenever there is a new small chunk of audio, but we also need to keep track of all the audio that has been spoken so far in state.  As the interface runs, the <code>transcribe</code> function gets called, with a record of all the previously spoken audio in <code>stream</code>, as well as the new chunk of audio as <code>new_chunk</code>. We return the new full audio so that can be stored back in state, and we also return the transcription. Here we naively append the audio together and simply call the <code>transcriber</code> object on the entire audio. You can imagine more efficient ways of handling this, such as re-processing only the last 5 seconds of audio whenever a new chunk of audio received. </p> <p>$demo_stream_asr</p> <p>Now the ASR model will run inference as you speak! </p>"},{"location":"09_other-tutorials/running-background-tasks/","title":"Running Background Tasks","text":"<p>Related spaces: https://huggingface.co/spaces/freddyaboulton/gradio-google-forms Tags: TASKS, SCHEDULED, TABULAR, DATA</p>"},{"location":"09_other-tutorials/running-background-tasks/#introduction","title":"Introduction","text":"<p>This guide explains how you can run background tasks from your gradio app. Background tasks are operations that you'd like to perform outside the request-response lifecycle of your app either once or on a periodic schedule. Examples of background tasks include periodically synchronizing data to an external database or sending a report of model predictions via email.</p>"},{"location":"09_other-tutorials/running-background-tasks/#overview","title":"Overview","text":"<p>We will be creating a simple \"Google-forms-style\" application to gather feedback from users of the gradio library. We will use a local sqlite database to store our data, but we will periodically synchronize the state of the database with a HuggingFace Dataset so that our user reviews are always backed up. The synchronization will happen in a background task running every 60 seconds.</p> <p>At the end of the demo, you'll have a fully working application like this one:</p> <p> </p>"},{"location":"09_other-tutorials/running-background-tasks/#step-1-write-your-database-logic","title":"Step 1 - Write your database logic \ud83d\udcbe","text":"<p>Our application will store the name of the reviewer, their rating of gradio on a scale of 1 to 5, as well as any comments they want to share about the library. Let's write some code that creates a database table to store this data. We'll also write some functions to insert a review into that table and fetch the latest 10 reviews.</p> <p>We're going to use the <code>sqlite3</code> library to connect to our sqlite database but gradio will work with any library.</p> <p>The code will look like this:</p> <pre><code>DB_FILE = \"./reviews.db\"\ndb = sqlite3.connect(DB_FILE)\n\n# Create table if it doesn't already exist\ntry:\n    db.execute(\"SELECT * FROM reviews\").fetchall()\n    db.close()\nexcept sqlite3.OperationalError:\n    db.execute(\n        '''\n        CREATE TABLE reviews (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n                              name TEXT, review INTEGER, comments TEXT)\n        ''')\n    db.commit()\n    db.close()\n\ndef get_latest_reviews(db: sqlite3.Connection):\n    reviews = db.execute(\"SELECT * FROM reviews ORDER BY id DESC limit 10\").fetchall()\n    total_reviews = db.execute(\"Select COUNT(id) from reviews\").fetchone()[0]\n    reviews = pd.DataFrame(reviews, columns=[\"id\", \"date_created\", \"name\", \"review\", \"comments\"])\n    return reviews, total_reviews\n\n\ndef add_review(name: str, review: int, comments: str):\n    db = sqlite3.connect(DB_FILE)\n    cursor = db.cursor()\n    cursor.execute(\"INSERT INTO reviews(name, review, comments) VALUES(?,?,?)\", [name, review, comments])\n    db.commit()\n    reviews, total_reviews = get_latest_reviews(db)\n    db.close()\n    return reviews, total_reviews\n</code></pre> <p>Let's also write a function to load the latest reviews when the gradio application loads:</p> <pre><code>def load_data():\n    db = sqlite3.connect(DB_FILE)\n    reviews, total_reviews = get_latest_reviews(db)\n    db.close()\n    return reviews, total_reviews\n</code></pre>"},{"location":"09_other-tutorials/running-background-tasks/#step-2-create-a-gradio-app","title":"Step 2 - Create a gradio app \u26a1","text":"<p>Now that we have our database logic defined, we can use gradio create a dynamic web page to ask our users for feedback!</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            name = gr.Textbox(label=\"Name\", placeholder=\"What is your name?\")\n            review = gr.Radio(label=\"How satisfied are you with using gradio?\", choices=[1, 2, 3, 4, 5])\n            comments = gr.Textbox(label=\"Comments\", lines=10, placeholder=\"Do you have any feedback on gradio?\")\n            submit = gr.Button(value=\"Submit Feedback\")\n        with gr.Column():\n            data = gr.Dataframe(label=\"Most recently created 10 rows\")\n            count = gr.Number(label=\"Total number of reviews\")\n    submit.click(add_review, [name, review, comments], [data, count])\n    demo.load(load_data, None, [data, count])\n</code></pre>"},{"location":"09_other-tutorials/running-background-tasks/#step-3-synchronize-with-huggingface-datasets","title":"Step 3 - Synchronize with HuggingFace Datasets \ud83e\udd17","text":"<p>We could call <code>demo.launch()</code> after step 2 and have a fully functioning application. However, our data would be stored locally on our machine. If the sqlite file were accidentally deleted, we'd lose all of our reviews! Let's back up our data to a dataset on the HuggingFace hub.</p> <p>Create a dataset here before proceeding.</p> <p>Now at the top of our script, we'll use the huggingface hub client library to connect to our dataset and pull the latest backup.</p> <pre><code>TOKEN = os.environ.get('HUB_TOKEN')\nrepo = huggingface_hub.Repository(\n    local_dir=\"data\",\n    repo_type=\"dataset\",\n    clone_from=\"&lt;name-of-your-dataset&gt;\",\n    use_auth_token=TOKEN\n)\nrepo.git_pull()\n\nshutil.copyfile(\"./data/reviews.db\", DB_FILE)\n</code></pre> <p>Note that you'll have to get an access token from the \"Settings\" tab of your HuggingFace for the above code to work. In the script, the token is securely accessed via an environment variable.</p> <p></p> <p>Now we will create a background task to synch our local database to the dataset hub every 60 seconds. We will use the AdvancedPythonScheduler to handle the scheduling. However, this is not the only task scheduling library available. Feel free to use whatever you are comfortable with.</p> <p>The function to back up our data will look like this:</p> <pre><code>from apscheduler.schedulers.background import BackgroundScheduler\n\ndef backup_db():\n    shutil.copyfile(DB_FILE, \"./data/reviews.db\")\n    db = sqlite3.connect(DB_FILE)\n    reviews = db.execute(\"SELECT * FROM reviews\").fetchall()\n    pd.DataFrame(reviews).to_csv(\"./data/reviews.csv\", index=False)\n    print(\"updating db\")\n    repo.push_to_hub(blocking=False, commit_message=f\"Updating data at {datetime.datetime.now()}\")\n\n\nscheduler = BackgroundScheduler()\nscheduler.add_job(func=backup_db, trigger=\"interval\", seconds=60)\nscheduler.start()\n</code></pre>"},{"location":"09_other-tutorials/running-background-tasks/#step-4-bonus-deployment-to-huggingface-spaces","title":"Step 4 (Bonus) - Deployment to HuggingFace Spaces","text":"<p>You can use the HuggingFace Spaces platform to deploy this application for free \u2728</p> <p>If you haven't used Spaces before, follow the previous guide here. You will have to use the <code>HUB_TOKEN</code> environment variable as a secret in the Guides.</p>"},{"location":"09_other-tutorials/running-background-tasks/#conclusion","title":"Conclusion","text":"<p>Congratulations! You know how to run background tasks from your gradio app on a schedule \u23f2\ufe0f.</p> <p>Checkout the application running on Spaces here. The complete code is here</p>"},{"location":"09_other-tutorials/running-gradio-on-your-web-server-with-nginx/","title":"Running a Gradio App on your Web Server with Nginx","text":"<p>Tags: DEPLOYMENT, WEB SERVER, NGINX</p>"},{"location":"09_other-tutorials/running-gradio-on-your-web-server-with-nginx/#introduction","title":"Introduction","text":"<p>Gradio is a Python library that allows you to quickly create customizable web apps for your machine learning models and data processing pipelines. Gradio apps can be deployed on Hugging Face Spaces for free.</p> <p>In some cases though, you might want to deploy a Gradio app on your own web server. You might already be using Nginx, a highly performant web server, to serve your website (say <code>https://www.example.com</code>), and you want to attach Gradio to a specific subpath on your website (e.g. <code>https://www.example.com/gradio-demo</code>).</p> <p>In this Guide, we will guide you through the process of running a Gradio app behind Nginx on your own web server to achieve this.</p> <p>Prerequisites</p> <ol> <li>A Linux web server with Nginx installed and Gradio installed</li> <li>A working Gradio app saved as a python file on your web server</li> </ol>"},{"location":"09_other-tutorials/running-gradio-on-your-web-server-with-nginx/#editing-your-nginx-configuration-file","title":"Editing your Nginx configuration file","text":"<ol> <li>Start by editing the Nginx configuration file on your web server. By default, this is located at: <code>/etc/nginx/nginx.conf</code></li> </ol> <p>In the <code>http</code> block, add the following line to include server block configurations from a separate file:</p> <pre><code>include /etc/nginx/sites-enabled/*;\n</code></pre> <ol> <li> <p>Create a new file in the <code>/etc/nginx/sites-available</code> directory (create the directory if it does not already exist), using a filename that represents your app, for example: <code>sudo nano /etc/nginx/sites-available/my_gradio_app</code></p> </li> <li> <p>Paste the following into your file editor:</p> </li> </ol> <pre><code>server {\n    listen 80;\n    server_name example.com www.example.com;  # Change this to your domain name\n\n    location /gradio-demo/ {  # Change this if you'd like to server your Gradio app on a different path\n        proxy_pass http://127.0.0.1:7860/; # Change this if your Gradio app will be running on a different port\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n    }\n}\n</code></pre>"},{"location":"09_other-tutorials/running-gradio-on-your-web-server-with-nginx/#run-your-gradio-app-on-your-web-server","title":"Run your Gradio app on your web server","text":"<ol> <li>Before you launch your Gradio app, you'll need to set the <code>root_path</code> to be the same as the subpath that you specified in your nginx configuration. This is necessary for Gradio to run on any subpath besides the root of the domain.</li> </ol> <p>Here's a simple example of a Gradio app with a custom <code>root_path</code>:</p> <pre><code>import gradio as gr\nimport time\n\ndef test(x):\ntime.sleep(4)\nreturn x\n\ngr.Interface(test, \"textbox\", \"textbox\").queue().launch(root_path=\"/gradio-demo\")\n</code></pre> <ol> <li>Start a <code>tmux</code> session by typing <code>tmux</code> and pressing enter (optional)</li> </ol> <p>It's recommended that you run your Gradio app in a <code>tmux</code> session so that you can keep it running in the background easily</p> <ol> <li>Then, start your Gradio app. Simply type in <code>python</code> followed by the name of your Gradio python file. By default, your app will run on <code>localhost:7860</code>, but if it starts on a different port, you will need to update the nginx configuration file above.</li> </ol>"},{"location":"09_other-tutorials/running-gradio-on-your-web-server-with-nginx/#restart-nginx","title":"Restart Nginx","text":"<ol> <li> <p>If you are in a tmux session, exit by typing CTRL+B (or CMD+B), followed by the \"D\" key.</p> </li> <li> <p>Finally, restart nginx by running <code>sudo systemctl restart nginx</code>.</p> </li> </ol> <p>And that's it! If you visit <code>https://example.com/gradio-demo</code> on your browser, you should see your Gradio app running there</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/","title":"Setting Up a Demo for Maximum Performance","text":"<p>Tags: QUEUE, PERFORMANCE</p> <p>Let's say that your Gradio demo goes viral on social media -- you have lots of users trying it out simultaneously, and you want to provide your users with the best possible experience or, in other words, minimize the amount of time that each user has to wait in the queue to see their prediction.</p> <p>How can you configure your Gradio demo to handle the most traffic? In this Guide, we dive into some of the parameters of Gradio's <code>.queue()</code> method as well as some other related configurations, and discuss how to set these parameters in a way that allows you to serve lots of users simultaneously with minimal latency.</p> <p>This is an advanced guide, so make sure you know the basics of Gradio already, such as how to create and launch a Gradio Interface. Most of the information in this Guide is relevant whether you are hosting your demo on Hugging Face Spaces or on your own server.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#enabling-gradios-queueing-system","title":"Enabling Gradio's Queueing System","text":"<p>By default, a Gradio demo does not use queueing and instead sends prediction requests via a POST request to the server where your Gradio server and Python code are running. However, regular POST requests have two big limitations:</p> <p>(1) They time out -- most browsers raise a timeout error if they do not get a response to a POST request after a short period of time (e.g. 1 min). This can be a problem if your inference function takes longer than 1 minute to run or if many people are trying out your demo at the same time, resulting in increased latency.</p> <p>(2) They do not allow bi-directional communication between the Gradio demo and the Gradio server. This means, for example, that you cannot get a real-time ETA of how long your prediction will take to complete.</p> <p>To address these limitations, any Gradio app can be converted to use websockets instead, simply by adding <code>.queue()</code> before launching an Interface or a Blocks. Here's an example:</p> <pre><code>app = gr.Interface(lambda x:x, \"image\", \"image\")\napp.queue()  # &lt;-- Sets up a queue with default parameters\napp.launch()\n</code></pre> <p>In the demo <code>app</code> above, predictions will now be sent over a websocket instead. Unlike POST requests, websockets do not timeout and they allow bidirectional traffic. On the Gradio server, a queue is set up, which adds each request that comes to a list. When a worker is free, the first available request is passed into the worker for inference. When the inference is complete, the queue sends the prediction back through the websocket to the particular Gradio user who called that prediction.</p> <p>Note: If you host your Gradio app on Hugging Face Spaces, the queue is already enabled by default. You can still call the <code>.queue()</code> method manually in order to configure the queue parameters described below.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#queuing-parameters","title":"Queuing Parameters","text":"<p>There are several parameters that can be used to configure the queue and help reduce latency. Let's go through them one-by-one.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#the-concurrency_limit-parameter","title":"The <code>concurrency_limit</code> parameter","text":"<p>The first parameter we will explore is the <code>concurrency_limit</code> parameter of any event listener, e.g. <code>btn.click(..., concurrency_limit=20)</code> or <code>gr.Interface(..., concurrency_limit=20)</code>. This parameter is used to set the maximum number of worker threads in the Gradio server that can be processing your requests at once. By default, this parameter is set to <code>1</code> but increasing this can linearly multiply the capacity of your server to handle requests.</p> <p>So why not set this parameter much higher? Keep in mind that since requests are processed in parallel, each request will consume memory to store the data and weights for processing. This means that you might get out-of-memory errors if you increase the <code>concurrency_limit</code> too high. You may also start to get diminishing returns if the <code>concurrency_limit</code> is too high because of costs of switching between different worker threads.</p> <p>Recommendation: Increase the <code>concurrency_limit</code> parameter as high as you can while you continue to see performance gains or until you hit memory limits on your machine. You can read about Hugging Face Spaces machine specs here.</p> <p>Note: there is a second parameter which controls the total number of threads that Gradio can generate, across all your events. This is the <code>max_threads</code> parameter in the <code>launch()</code> method. You may want to manually increase this.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#the-max_size-parameter","title":"The <code>max_size</code> parameter","text":"<p>A more blunt way to reduce the wait times is simply to prevent too many people from joining the queue in the first place. You can set the maximum number of requests that the queue processes using the <code>max_size</code> parameter of <code>queue()</code>. If a request arrives when the queue is already of the maximum size, it will not be allowed to join the queue and instead, the user will receive an error saying that the queue is full and to try again. By default, <code>max_size=None</code>, meaning that there is no limit to the number of users that can join the queue.</p> <p>Paradoxically, setting a <code>max_size</code> can often improve user experience because it prevents users from being dissuaded by very long queue wait times. Users who are more interested and invested in your demo will keep trying to join the queue, and will be able to get their results faster.</p> <p>Recommendation: For a better user experience, set a <code>max_size</code> that is reasonable given your expectations of how long users might be willing to wait for a prediction.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#the-max_batch_size-parameter","title":"The <code>max_batch_size</code> parameter","text":"<p>Another way to increase the parallelism of your Gradio demo is to write your function so that it can accept batches of inputs. Most deep learning models can process batches of samples more efficiently than processing individual samples.</p> <p>If you write your function to process a batch of samples, Gradio will automatically batch incoming requests together and pass them into your function as a batch of samples. You need to set <code>batch</code> to <code>True</code> (by default it is <code>False</code>) and set a <code>max_batch_size</code> (by default it is <code>4</code>) based on the maximum number of samples your function is able to handle. These two parameters can be passed into <code>gr.Interface()</code> or to an event in Blocks such as <code>.click()</code>.</p> <p>While setting a batch is conceptually similar to having workers process requests in parallel, it is often faster than setting the <code>concurrency_count</code> for deep learning models. The downside is that you might need to adapt your function a little bit to accept batches of samples instead of individual samples.</p> <p>Here's an example of a function that does not accept a batch of inputs -- it processes a single input at a time:</p> <pre><code>import time\n\ndef trim_words(word, length):\n    return w[:int(length)]\n</code></pre> <p>Here's the same function rewritten to take in a batch of samples:</p> <pre><code>import time\n\ndef trim_words(words, lengths):\n    trimmed_words = []\n    for w, l in zip(words, lengths):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n</code></pre> <p>The second function can be used with <code>batch=True</code> and an appropriate <code>max_batch_size</code> parameter.</p> <p>Recommendation: If possible, write your function to accept batches of samples, and then set <code>batch</code> to <code>True</code> and the <code>max_batch_size</code> as high as possible based on your machine's memory limits.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#the-api_open-parameter","title":"The <code>api_open</code> parameter","text":"<p>When creating a Gradio demo, you may want to restrict all traffic to happen through the user interface as opposed to the programmatic API that is automatically created for your Gradio demo. This is important because when people make requests through the programmatic API, they can potentially bypass users who are waiting in the queue and degrade the experience of these users.</p> <p>Recommendation: set the <code>api_open</code> parameter in <code>queue()</code> to <code>False</code> in your demo to prevent programmatic requests.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#upgrading-your-hardware-gpus-tpus-etc","title":"Upgrading your Hardware (GPUs, TPUs, etc.)","text":"<p>If you have done everything above, and your demo is still not fast enough, you can upgrade the hardware that your model is running on. Changing the model from running on CPUs to running on GPUs will usually provide a 10x-50x increase in inference time for deep learning models.</p> <p>It is particularly straightforward to upgrade your Hardware on Hugging Face Spaces. Simply click on the \"Settings\" tab in your Space and choose the Space Hardware you'd like.</p> <p></p> <p>While you might need to adapt portions of your machine learning inference code to run on a GPU (here's a handy guide if you are using PyTorch), Gradio is completely agnostic to the choice of hardware and will work completely fine if you use it with CPUs, GPUs, TPUs, or any other hardware!</p> <p>Note: your GPU memory is different than your CPU memory, so if you upgrade your hardware, you might need to adjust the value of the <code>concurrency_limit</code> parameter described above.</p>"},{"location":"09_other-tutorials/setting-up-a-demo-for-maximum-performance/#conclusion","title":"Conclusion","text":"<p>Congratulations! You know how to set up a Gradio demo for maximum performance. Good luck on your next viral demo!</p>"},{"location":"09_other-tutorials/theming-guide/","title":"Theming","text":"<p>Tags: THEMES</p>"},{"location":"09_other-tutorials/theming-guide/#introduction","title":"Introduction","text":"<p>Gradio features a built-in theming engine that lets you customize the look and feel of your app. You can choose from a variety of themes, or create your own. To do so, pass the <code>theme=</code> kwarg to the <code>Blocks</code> or <code>Interface</code> constructor. For example:</p> <pre><code>with gr.Blocks(theme=gr.themes.Soft()) as demo:\n    ...\n</code></pre> <p>Gradio comes with a set of prebuilt themes which you can load from <code>gr.themes.*</code>. These are:</p> <ul> <li><code>gr.themes.Base()</code></li> <li><code>gr.themes.Default()</code></li> <li><code>gr.themes.Glass()</code></li> <li><code>gr.themes.Monochrome()</code></li> <li><code>gr.themes.Soft()</code></li> </ul> <p>Each of these themes set values for hundreds of CSS variables. You can use prebuilt themes as a starting point for your own custom themes, or you can create your own themes from scratch. Let's take a look at each approach.</p>"},{"location":"09_other-tutorials/theming-guide/#using-the-theme-builder","title":"Using the Theme Builder","text":"<p>The easiest way to build a theme is using the Theme Builder. To launch the Theme Builder locally, run the following code:</p> <pre><code>import gradio as gr\n\ngr.themes.builder()\n</code></pre> <p>$demo_theme_builder</p> <p>You can use the Theme Builder running on Spaces above, though it runs much faster when you launch it locally via <code>gr.themes.builder()</code>.</p> <p>As you edit the values in the Theme Builder, the app will preview updates in real time. You can download the code to generate the theme you've created so you can use it in any Gradio app.</p> <p>In the rest of the guide, we will cover building themes programmatically.</p>"},{"location":"09_other-tutorials/theming-guide/#extending-themes-via-the-constructor","title":"Extending Themes via the Constructor","text":"<p>Although each theme has hundreds of CSS variables, the values for most these variables are drawn from 8 core variables which can be set through the constructor of each prebuilt theme. Modifying these 8 arguments allows you to quickly change the look and feel of your app.</p>"},{"location":"09_other-tutorials/theming-guide/#core-colors","title":"Core Colors","text":"<p>The first 3 constructor arguments set the colors of the theme and are <code>gradio.themes.Color</code> objects. Internally, these Color objects hold brightness values for the palette of a single hue, ranging from 50, 100, 200..., 800, 900, 950. Other CSS variables are derived from these 3 colors.</p> <p>The 3 color constructor arguments are:</p> <ul> <li><code>primary_hue</code>: This is the color draws attention in your theme. In the default theme, this is set to <code>gradio.themes.colors.orange</code>.</li> <li><code>secondary_hue</code>: This is the color that is used for secondary elements in your theme. In the default theme, this is set to <code>gradio.themes.colors.blue</code>.</li> <li><code>neutral_hue</code>: This is the color that is used for text and other neutral elements in your theme. In the default theme, this is set to <code>gradio.themes.colors.gray</code>.</li> </ul> <p>You could modify these values using their string shortcuts, such as</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(primary_hue=\"red\", secondary_hue=\"pink\")) as demo:\n    ...\n</code></pre> <p>or you could use the <code>Color</code> objects directly, like this:</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(primary_hue=gr.themes.colors.red, secondary_hue=gr.themes.colors.pink)) as demo:\n    ...\n</code></pre> <p>Predefined colors are:</p> <ul> <li><code>slate</code></li> <li><code>gray</code></li> <li><code>zinc</code></li> <li><code>neutral</code></li> <li><code>stone</code></li> <li><code>red</code></li> <li><code>orange</code></li> <li><code>amber</code></li> <li><code>yellow</code></li> <li><code>lime</code></li> <li><code>green</code></li> <li><code>emerald</code></li> <li><code>teal</code></li> <li><code>cyan</code></li> <li><code>sky</code></li> <li><code>blue</code></li> <li><code>indigo</code></li> <li><code>violet</code></li> <li><code>purple</code></li> <li><code>fuchsia</code></li> <li><code>pink</code></li> <li><code>rose</code></li> </ul> <p>You could also create your own custom <code>Color</code> objects and pass them in.</p>"},{"location":"09_other-tutorials/theming-guide/#core-sizing","title":"Core Sizing","text":"<p>The next 3 constructor arguments set the sizing of the theme and are <code>gradio.themes.Size</code> objects. Internally, these Size objects hold pixel size values that range from <code>xxs</code> to <code>xxl</code>. Other CSS variables are derived from these 3 sizes.</p> <ul> <li><code>spacing_size</code>: This sets the padding within and spacing between elements. In the default theme, this is set to <code>gradio.themes.sizes.spacing_md</code>.</li> <li><code>radius_size</code>: This sets the roundedness of corners of elements. In the default theme, this is set to <code>gradio.themes.sizes.radius_md</code>.</li> <li><code>text_size</code>: This sets the font size of text. In the default theme, this is set to <code>gradio.themes.sizes.text_md</code>.</li> </ul> <p>You could modify these values using their string shortcuts, such as</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(spacing_size=\"sm\", radius_size=\"none\")) as demo:\n    ...\n</code></pre> <p>or you could use the <code>Size</code> objects directly, like this:</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(spacing_size=gr.themes.sizes.spacing_sm, radius_size=gr.themes.sizes.radius_none)) as demo:\n    ...\n</code></pre> <p>The predefined size objects are:</p> <ul> <li><code>radius_none</code></li> <li><code>radius_sm</code></li> <li><code>radius_md</code></li> <li><code>radius_lg</code></li> <li><code>spacing_sm</code></li> <li><code>spacing_md</code></li> <li><code>spacing_lg</code></li> <li><code>text_sm</code></li> <li><code>text_md</code></li> <li><code>text_lg</code></li> </ul> <p>You could also create your own custom <code>Size</code> objects and pass them in.</p>"},{"location":"09_other-tutorials/theming-guide/#core-fonts","title":"Core Fonts","text":"<p>The final 2 constructor arguments set the fonts of the theme. You can pass a list of fonts to each of these arguments to specify fallbacks. If you provide a string, it will be loaded as a system font. If you provide a <code>gradio.themes.GoogleFont</code>, the font will be loaded from Google Fonts.</p> <ul> <li><code>font</code>: This sets the primary font of the theme. In the default theme, this is set to <code>gradio.themes.GoogleFont(\"Source Sans Pro\")</code>.</li> <li><code>font_mono</code>: This sets the monospace font of the theme. In the default theme, this is set to <code>gradio.themes.GoogleFont(\"IBM Plex Mono\")</code>.</li> </ul> <p>You could modify these values such as the following:</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(font=[gr.themes.GoogleFont(\"Inconsolata\"), \"Arial\", \"sans-serif\"])) as demo:\n    ...\n</code></pre>"},{"location":"09_other-tutorials/theming-guide/#extending-themes-via-set","title":"Extending Themes via <code>.set()</code>","text":"<p>You can also modify the values of CSS variables after the theme has been loaded. To do so, use the <code>.set()</code> method of the theme object to get access to the CSS variables. For example:</p> <pre><code>theme = gr.themes.Default(primary_hue=\"blue\").set(\n    loader_color=\"#FF0000\",\n    slider_color=\"#FF0000\",\n)\n\nwith gr.Blocks(theme=theme) as demo:\n    ...\n</code></pre> <p>In the example above, we've set the <code>loader_color</code> and <code>slider_color</code> variables to <code>#FF0000</code>, despite the overall <code>primary_color</code> using the blue color palette. You can set any CSS variable that is defined in the theme in this manner.</p> <p>Your IDE type hinting should help you navigate these variables. Since there are so many CSS variables, let's take a look at how these variables are named and organized.</p>"},{"location":"09_other-tutorials/theming-guide/#css-variable-naming-conventions","title":"CSS Variable Naming Conventions","text":"<p>CSS variable names can get quite long, like <code>button_primary_background_fill_hover_dark</code>! However they follow a common naming convention that makes it easy to understand what they do and to find the variable you're looking for. Separated by underscores, the variable name is made up of:</p> <ol> <li>The target element, such as <code>button</code>, <code>slider</code>, or <code>block</code>.</li> <li>The target element type or sub-element, such as <code>button_primary</code>, or <code>block_label</code>.</li> <li>The property, such as <code>button_primary_background_fill</code>, or <code>block_label_border_width</code>.</li> <li>Any relevant state, such as <code>button_primary_background_fill_hover</code>.</li> <li>If the value is different in dark mode, the suffix <code>_dark</code>. For example, <code>input_border_color_focus_dark</code>.</li> </ol> <p>Of course, many CSS variable names are shorter than this, such as <code>table_border_color</code>, or <code>input_shadow</code>.</p>"},{"location":"09_other-tutorials/theming-guide/#css-variable-organization","title":"CSS Variable Organization","text":"<p>Though there are hundreds of CSS variables, they do not all have to have individual values. They draw their values by referencing a set of core variables and referencing each other. This allows us to only have to modify a few variables to change the look and feel of the entire theme, while also getting finer control of individual elements that we may want to modify.</p>"},{"location":"09_other-tutorials/theming-guide/#referencing-core-variables","title":"Referencing Core Variables","text":"<p>To reference one of the core constructor variables, precede the variable name with an asterisk. To reference a core color, use the <code>*primary_</code>, <code>*secondary_</code>, or <code>*neutral_</code> prefix, followed by the brightness value. For example:</p> <pre><code>theme = gr.themes.Default(primary_hue=\"blue\").set(\n    button_primary_background_fill=\"*primary_200\",\n    button_primary_background_fill_hover=\"*primary_300\",\n)\n</code></pre> <p>In the example above, we've set the <code>button_primary_background_fill</code> and <code>button_primary_background_fill_hover</code> variables to <code>*primary_200</code> and <code>*primary_300</code>. These variables will be set to the 200 and 300 brightness values of the blue primary color palette, respectively.</p> <p>Similarly, to reference a core size, use the <code>*spacing_</code>, <code>*radius_</code>, or <code>*text_</code> prefix, followed by the size value. For example:</p> <pre><code>theme = gr.themes.Default(radius_size=\"md\").set(\n    button_primary_border_radius=\"*radius_xl\",\n)\n</code></pre> <p>In the example above, we've set the <code>button_primary_border_radius</code> variable to <code>*radius_xl</code>. This variable will be set to the <code>xl</code> setting of the medium radius size range.</p>"},{"location":"09_other-tutorials/theming-guide/#referencing-other-variables","title":"Referencing Other Variables","text":"<p>Variables can also reference each other. For example, look at the example below:</p> <pre><code>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"#FF0000\",\n    button_primary_border=\"#FF0000\",\n)\n</code></pre> <p>Having to set these values to a common color is a bit tedious. Instead, we can reference the <code>button_primary_background_fill</code> variable in the <code>button_primary_background_fill_hover</code> and <code>button_primary_border</code> variables, using a <code>*</code> prefix.</p> <pre><code>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"*button_primary_background_fill\",\n    button_primary_border=\"*button_primary_background_fill\",\n)\n</code></pre> <p>Now, if we change the <code>button_primary_background_fill</code> variable, the <code>button_primary_background_fill_hover</code> and <code>button_primary_border</code> variables will automatically update as well.</p> <p>This is particularly useful if you intend to share your theme - it makes it easy to modify the theme without having to change every variable.</p> <p>Note that dark mode variables automatically reference each other. For example:</p> <pre><code>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_dark=\"#AAAAAA\",\n    button_primary_border=\"*button_primary_background_fill\",\n    button_primary_border_dark=\"*button_primary_background_fill_dark\",\n)\n</code></pre> <p><code>button_primary_border_dark</code> will draw its value from <code>button_primary_background_fill_dark</code>, because dark mode always draw from the dark version of the variable.</p>"},{"location":"09_other-tutorials/theming-guide/#creating-a-full-theme","title":"Creating a Full Theme","text":"<p>Let's say you want to create a theme from scratch! We'll go through it step by step - you can also see the source of prebuilt themes in the gradio source repo for reference - here's the source for the Monochrome theme.</p> <p>Our new theme class will inherit from <code>gradio.themes.Base</code>, a theme that sets a lot of convenient defaults. Let's make a simple demo that creates a dummy theme called Seafoam, and make a simple app that uses it.</p> <p>$code_theme_new_step_1</p> <p>The Base theme is very barebones, and uses <code>gr.themes.Blue</code> as it primary color - you'll note the primary button and the loading animation are both blue as a result. Let's change the defaults core arguments of our app. We'll overwrite the constructor and pass new defaults for the core constructor arguments.</p> <p>We'll use <code>gr.themes.Emerald</code> as our primary color, and set secondary and neutral hues to <code>gr.themes.Blue</code>. We'll make our text larger using <code>text_lg</code>. We'll use <code>Quicksand</code> as our default font, loaded from Google Fonts.</p> <p>$code_theme_new_step_2</p> <p>See how the primary button and the loading animation are now green? These CSS variables are tied to the <code>primary_hue</code> variable.</p> <p>Let's modify the theme a bit more directly. We'll call the <code>set()</code> method to overwrite CSS variable values explicitly. We can use any CSS logic, and reference our core constructor arguments using the <code>*</code> prefix.</p> <p>$code_theme_new_step_3</p> <p>Look how fun our theme looks now! With just a few variable changes, our theme looks completely different.</p> <p>You may find it helpful to explore the source code of the other prebuilt themes to see how they modified the base theme. You can also find your browser's Inspector useful to select elements from the UI and see what CSS variables are being used in the styles panel.</p>"},{"location":"09_other-tutorials/theming-guide/#sharing-themes","title":"Sharing Themes","text":"<p>Once you have created a theme, you can upload it to the HuggingFace Hub to let others view it, use it, and build off of it!</p>"},{"location":"09_other-tutorials/theming-guide/#uploading-a-theme","title":"Uploading a Theme","text":"<p>There are two ways to upload a theme, via the theme class instance or the command line. We will cover both of them with the previously created <code>seafoam</code> theme.</p> <ul> <li>Via the class instance</li> </ul> <p>Each theme instance has a method called <code>push_to_hub</code> we can use to upload a theme to the HuggingFace hub.</p> <pre><code>seafoam.push_to_hub(repo_name=\"seafoam\",\n                    version=\"0.0.1\",\n                    hf_token=\"&lt;token&gt;\")\n</code></pre> <ul> <li>Via the command line</li> </ul> <p>First save the theme to disk</p> <pre><code>seafoam.dump(filename=\"seafoam.json\")\n</code></pre> <p>Then use the <code>upload_theme</code> command:</p> <pre><code>upload_theme\\\n\"seafoam.json\"\\\n\"seafoam\"\\\n--version \"0.0.1\"\\\n--hf_token \"&lt;token&gt;\"\n</code></pre> <p>In order to upload a theme, you must have a HuggingFace account and pass your Access Token as the <code>hf_token</code> argument. However, if you log in via the HuggingFace command line (which comes installed with <code>gradio</code>), you can omit the <code>hf_token</code> argument.</p> <p>The <code>version</code> argument lets you specify a valid semantic version string for your theme. That way your users are able to specify which version of your theme they want to use in their apps. This also lets you publish updates to your theme without worrying about changing how previously created apps look. The <code>version</code> argument is optional. If omitted, the next patch version is automatically applied.</p>"},{"location":"09_other-tutorials/theming-guide/#theme-previews","title":"Theme Previews","text":"<p>By calling <code>push_to_hub</code> or <code>upload_theme</code>, the theme assets will be stored in a HuggingFace space.</p> <p>The theme preview for our seafoam theme is here: seafoam preview.</p>"},{"location":"09_other-tutorials/theming-guide/#discovering-themes","title":"Discovering Themes","text":"<p>The Theme Gallery shows all the public gradio themes. After publishing your theme, it will automatically show up in the theme gallery after a couple of minutes.</p> <p>You can sort the themes by the number of likes on the space and from most to least recently created as well as toggling themes between light and dark mode.</p>"},{"location":"09_other-tutorials/theming-guide/#downloading","title":"Downloading","text":"<p>To use a theme from the hub, use the <code>from_hub</code> method on the <code>ThemeClass</code> and pass it to your app:</p> <pre><code>my_theme = gr.Theme.from_hub(\"gradio/seafoam\")\n\nwith gr.Blocks(theme=my_theme) as demo:\n    ....\n</code></pre> <p>You can also pass the theme string directly to <code>Blocks</code> or <code>Interface</code> (<code>gr.Blocks(theme=\"gradio/seafoam\")</code>)</p> <p>You can pin your app to an upstream theme version by using semantic versioning expressions.</p> <p>For example, the following would ensure the theme we load from the <code>seafoam</code> repo was between versions <code>0.0.1</code> and <code>0.1.0</code>:</p> <pre><code>with gr.Blocks(theme=\"gradio/seafoam@&gt;=0.0.1,&lt;0.1.0\") as demo:\n    ....\n</code></pre> <p>Enjoy creating your own themes! If you make one you're proud of, please share it with the world by uploading it to the hub! If you tag us on Twitter we can give your theme a shout out!</p>"},{"location":"09_other-tutorials/using-flagging/","title":"Using Flagging","text":"<p>Related spaces: https://huggingface.co/spaces/gradio/calculator-flagging-crowdsourced, https://huggingface.co/spaces/gradio/calculator-flagging-options, https://huggingface.co/spaces/gradio/calculator-flag-basic Tags: FLAGGING, DATA</p>"},{"location":"09_other-tutorials/using-flagging/#introduction","title":"Introduction","text":"<p>When you demo a machine learning model, you might want to collect data from users who try the model, particularly data points in which the model is not behaving as expected. Capturing these \"hard\" data points is valuable because it allows you to improve your machine learning model and make it more reliable and robust.</p> <p>Gradio simplifies the collection of this data by including a Flag button with every <code>Interface</code>. This allows a user or tester to easily send data back to the machine where the demo is running. In this Guide, we discuss more about how to use the flagging feature, both with <code>gradio.Interface</code> as well as with <code>gradio.Blocks</code>.</p>"},{"location":"09_other-tutorials/using-flagging/#the-flag-button-in-gradiointerface","title":"The Flag button in <code>gradio.Interface</code>","text":"<p>Flagging with Gradio's <code>Interface</code> is especially easy. By default, underneath the output components, there is a button marked Flag. When a user testing your model sees input with interesting output, they can click the flag button to send the input and output data back to the machine where the demo is running. The sample is saved to a CSV log file (by default). If the demo involves images, audio, video, or other types of files, these are saved separately in a parallel directory and the paths to these files are saved in the CSV file.</p> <p>There are four parameters in <code>gradio.Interface</code> that control how flagging works. We will go over them in greater detail.</p> <ul> <li><code>allow_flagging</code>: this parameter can be set to either <code>\"manual\"</code> (default), <code>\"auto\"</code>, or <code>\"never\"</code>.</li> <li><code>manual</code>: users will see a button to flag, and samples are only flagged when the button is clicked.</li> <li><code>auto</code>: users will not see a button to flag, but every sample will be flagged automatically.</li> <li><code>never</code>: users will not see a button to flag, and no sample will be flagged.</li> <li><code>flagging_options</code>: this parameter can be either <code>None</code> (default) or a list of strings.</li> <li>If <code>None</code>, then the user simply clicks on the Flag button and no additional options are shown.</li> <li>If a list of strings are provided, then the user sees several buttons, corresponding to each of the strings that are provided. For example, if the value of this parameter is <code>[\"Incorrect\", \"Ambiguous\"]</code>, then buttons labeled Flag as Incorrect and Flag as Ambiguous appear. This only applies if <code>allow_flagging</code> is <code>\"manual\"</code>.</li> <li>The chosen option is then logged along with the input and output.</li> <li><code>flagging_dir</code>: this parameter takes a string.</li> <li>It represents what to name the directory where flagged data is stored.</li> <li><code>flagging_callback</code>: this parameter takes an instance of a subclass of the <code>FlaggingCallback</code> class</li> <li>Using this parameter allows you to write custom code that gets run when the flag button is clicked</li> <li>By default, this is set to an instance of <code>gr.CSVLogger</code></li> <li>One example is setting it to an instance of <code>gr.HuggingFaceDatasetSaver</code> which can allow you to pipe any flagged data into a HuggingFace Dataset. (See more below.)</li> </ul>"},{"location":"09_other-tutorials/using-flagging/#what-happens-to-flagged-data","title":"What happens to flagged data?","text":"<p>Within the directory provided by the <code>flagging_dir</code> argument, a CSV file will log the flagged data.</p> <p>Here's an example: The code below creates the calculator interface embedded below it:</p> <pre><code>import gradio as gr\n\n\ndef calculator(num1, operation, num2):\n    if operation == \"add\":\n        return num1 + num2\n    elif operation == \"subtract\":\n        return num1 - num2\n    elif operation == \"multiply\":\n        return num1 * num2\n    elif operation == \"divide\":\n        return num1 / num2\n\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\"\n)\n\niface.launch()\n</code></pre> <p></p> <p>When you click the flag button above, the directory where the interface was launched will include a new flagged subfolder, with a csv file inside it. This csv file includes all the data that was flagged.</p> <pre><code>+-- flagged/\n|   +-- logs.csv\n</code></pre> <p>flagged/logs.csv</p> <pre><code>num1,operation,num2,Output,timestamp\n5,add,7,12,2022-01-31 11:40:51.093412\n6,subtract,1.5,4.5,2022-01-31 03:25:32.023542\n</code></pre> <p>If the interface involves file data, such as for Image and Audio components, folders will be created to store those flagged data as well. For example an <code>image</code> input to <code>image</code> output interface will create the following structure.</p> <pre><code>+-- flagged/\n|   +-- logs.csv\n|   +-- image/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n</code></pre> <p>flagged/logs.csv</p> <pre><code>im,Output timestamp\nim/0.png,Output/0.png,2022-02-04 19:49:58.026963\nim/1.png,Output/1.png,2022-02-02 10:40:51.093412\n</code></pre> <p>If you wish for the user to provide a reason for flagging, you can pass a list of strings to the <code>flagging_options</code> argument of Interface. Users will have to select one of these choices when flagging, and the option will be saved as an additional column to the CSV.</p> <p>If we go back to the calculator example, the following code will create the interface embedded below it.</p> <pre><code>iface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"]\n)\n\niface.launch()\n</code></pre> <p></p> <p>When users click the flag button, the csv file will now include a column indicating the selected option.</p> <p>flagged/logs.csv</p> <pre><code>num1,operation,num2,Output,flag,timestamp\n5,add,7,-12,wrong sign,2022-02-04 11:40:51.093412\n6,subtract,1.5,3.5,off by one,2022-02-04 11:42:32.062512\n</code></pre>"},{"location":"09_other-tutorials/using-flagging/#the-huggingfacedatasetsaver-callback","title":"The HuggingFaceDatasetSaver Callback","text":"<p>Sometimes, saving the data to a local CSV file doesn't make sense. For example, on Hugging Face Spaces, developers typically don't have access to the underlying ephemeral machine hosting the Gradio demo. That's why, by default, flagging is turned off in Hugging Face Space. However, you may want to do something else with the flagged data.</p> <p>We've made this super easy with the <code>flagging_callback</code> parameter.</p> <p>For example, below we're going to pipe flagged data from our calculator example into a Hugging Face Dataset, e.g. so that we can build a \"crowd-sourced\" dataset:</p> <pre><code>import os\n\nHF_TOKEN = os.getenv('HF_TOKEN')\nhf_writer = gr.HuggingFaceDatasetSaver(HF_TOKEN, \"crowdsourced-calculator-demo\")\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    description=\"Check out the crowd-sourced dataset at: [https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo](https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo)\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"],\n    flagging_callback=hf_writer\n)\n\niface.launch()\n</code></pre> <p>Notice that we define our own instance of <code>gradio.HuggingFaceDatasetSaver</code> using our Hugging Face token and the name of a dataset we'd like to save samples to. In addition, we also set <code>allow_flagging=\"manual\"</code> because on Hugging Face Spaces, <code>allow_flagging</code> is set to <code>\"never\"</code> by default. Here's our demo:</p> <p></p> <p>You can now see all the examples flagged above in this public Hugging Face dataset.</p> <p></p> <p>We created the <code>gradio.HuggingFaceDatasetSaver</code> class, but you can pass your own custom class as long as it inherits from <code>FLaggingCallback</code> defined in this file. If you create a cool callback, contribute it to the repo!</p>"},{"location":"09_other-tutorials/using-flagging/#flagging-with-blocks","title":"Flagging with Blocks","text":"<p>What about if you are using <code>gradio.Blocks</code>? On one hand, you have even more flexibility with Blocks -- you can write whatever Python code you want to run when a button is clicked, and assign that using the built-in events in Blocks.</p> <p>At the same time, you might want to use an existing <code>FlaggingCallback</code> to avoid writing extra code. This requires two steps:</p> <ol> <li>You have to run your callback's <code>.setup()</code> somewhere in the code prior to the    first time you flag data</li> <li>When the flagging button is clicked, then you trigger the callback's <code>.flag()</code> method,    making sure to collect the arguments correctly and disabling the typical preprocessing.</li> </ol> <p>Here is an example with an image sepia filter Blocks demo that lets you flag data using the default <code>CSVLogger</code>:</p> <p>$code_blocks_flag $demo_blocks_flag</p>"},{"location":"09_other-tutorials/using-flagging/#privacy","title":"Privacy","text":"<p>Important Note: please make sure your users understand when the data they submit is being saved, and what you plan on doing with it. This is especially important when you use <code>allow_flagging=auto</code> (when all of the data submitted through the demo is being flagged)</p>"},{"location":"09_other-tutorials/using-flagging/#thats-all-happy-building","title":"That's all! Happy building :)","text":""},{"location":"cn/CONTRIBUTING/","title":"Contributing a Guide","text":"<p>Want to help teach Gradio? Consider contributing a Guide! \ud83e\udd17</p> <p>Broadly speaking, there are two types of guides:</p> <ul> <li>Use cases: guides that cover step-by-step how to build a particular type of machine learning demo or app using Gradio. Here's an example: Creating a Chatbot</li> <li>Feature explanation: guides that describe in detail a particular feature of Gradio. Here's an example: Using Flagging</li> </ul> <p>We encourage you to submit either type of Guide! (Looking for ideas? We may also have open issues where users have asked for guides on particular topics)</p>"},{"location":"cn/CONTRIBUTING/#guide-structure","title":"Guide Structure","text":"<p>As you can see with the previous examples, Guides are standard markdown documents. They usually:</p> <ul> <li>start with an Introduction section describing the topic</li> <li>include subheadings to make articles easy to navigate</li> <li>include real code snippets that make it easy to follow along and implement the Guide</li> <li>include embedded Gradio demos to make them more interactive and provide immediate demonstrations of the topic being discussed. These Gradio demos are hosted on Hugging Face Spaces and are embedded using the standard \\&lt;iframe&gt; tag.</li> </ul>"},{"location":"cn/CONTRIBUTING/#how-to-contribute-a-guide","title":"How to Contribute a Guide","text":"<ol> <li>Clone or fork this <code>gradio</code> repo</li> <li>Add a new markdown document with a descriptive title to the <code>/guides</code> folder</li> <li>Write your Guide in standard markdown! Embed Gradio demos wherever helpful</li> <li>Add a list of <code>related_spaces</code> at the top of the markdown document (see the previously linked Guides for how to do this)</li> <li>Add 3 <code>tags</code> at the top of the markdown document to help users find your guide (again, see the previously linked Guides for how to do this)</li> <li>Open a PR to have your guide reviewed</li> </ol> <p>That's it! We're looking forward to reading your Guide \ud83e\udd73</p>"},{"location":"cn/01_getting-started/01_quickstart/","title":"\u5feb\u901f\u200b\u5f00\u59cb","text":"<p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1aGradio \u200b\u9700\u8981\u200b Python 3.8 \u200b\u6216\u200b\u66f4\u200b\u9ad8\u200b\u7248\u672c\u200b\uff0c\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01</p>"},{"location":"cn/01_getting-started/01_quickstart/#gradio","title":"Gradio \u200b\u662f\u200b\u505a\u200b\u4ec0\u4e48\u200b\u7684\u200b\uff1f","text":"<p>\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5206\u4eab\u200b\u60a8\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u3001API \u200b\u6216\u200b\u6570\u636e\u200b\u79d1\u5b66\u200b\u6d41\u7a0b\u200b\u7684\u200b\u6700\u4f73\u200b\u65b9\u5f0f\u200b\u4e4b\u4e00\u200b\u662f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u4ea4\u4e92\u5f0f\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u8ba9\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u200b\u6216\u200b\u540c\u4e8b\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u5c1d\u8bd5\u200b\u6f14\u793a\u200b\u3002</p> <p>Gradio \u200b\u5141\u8bb8\u200b\u60a8\u200b\u4f7f\u7528\u200b Python \u200b\u6784\u5efa\u200b\u6f14\u793a\u200b\u5e76\u200b\u5171\u4eab\u200b\u8fd9\u4e9b\u200b\u6f14\u793a\u200b\u3002\u200b\u901a\u5e38\u200b\u53ea\u200b\u9700\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\uff01\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\u3002</p>"},{"location":"cn/01_getting-started/01_quickstart/#hello-world","title":"Hello, World","text":"<p>\u200b\u8981\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u201cHello, World\u201d\u200b\u793a\u4f8b\u200b\u8fd0\u884c\u200b Gradio\uff0c\u200b\u8bf7\u200b\u9075\u5faa\u200b\u4ee5\u4e0b\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u4f7f\u7528\u200b pip \u200b\u5b89\u88c5\u200b Gradio\uff1a</li> </ol> <pre><code>pip install gradio\n</code></pre> <ol> <li>\u200b\u5c06\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4f5c\u4e3a\u200b Python \u200b\u811a\u672c\u200b\u8fd0\u884c\u200b\u6216\u200b\u5728\u200b Jupyter Notebook \u200b\u4e2d\u200b\u8fd0\u884c\u200b\uff08\u200b\u6216\u8005\u200b Google Colab\uff09\uff1a</li> </ol> <p>$code_hello_world</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u5bfc\u5165\u200b\u7684\u200b\u540d\u79f0\u200b\u7f29\u77ed\u200b\u4e3a\u200b <code>gr</code>\uff0c\u200b\u4ee5\u4fbf\u200b\u4ee5\u540e\u200b\u5728\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u66f4\u200b\u5bb9\u6613\u200b\u7406\u89e3\u200b\u3002\u200b\u8fd9\u662f\u200b\u4e00\u79cd\u200b\u5e7f\u6cdb\u200b\u91c7\u7528\u200b\u7684\u200b\u7ea6\u5b9a\u200b\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u9075\u5faa\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e00\u8d77\u200b\u5de5\u4f5c\u200b\u7684\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u7406\u89e3\u200b\u3002</p> <ol> <li>\u200b\u5728\u200b Jupyter Notebook \u200b\u4e2d\u200b\uff0c\u200b\u8be5\u200b\u6f14\u793a\u200b\u5c06\u200b\u81ea\u52a8\u200b\u663e\u793a\u200b\uff1b\u200b\u5982\u679c\u200b\u4ece\u200b\u811a\u672c\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u5f39\u200b\u51fa\u200b\uff0c\u200b\u7f51\u5740\u200b\u4e3a\u200b http://localhost:7860\uff1a</li> </ol> <p>$demo_hello_world</p> <p>\u200b\u5728\u200b\u672c\u5730\u200b\u5f00\u53d1\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u5c06\u200b\u4ee3\u7801\u200b\u4f5c\u4e3a\u200b Python \u200b\u811a\u672c\u200b\u8fd0\u884c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Gradio CLI \u200b\u4ee5\u200b\u91cd\u8f7d\u200b\u6a21\u5f0f\u200b\u542f\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u63d0\u4f9b\u200b\u65e0\u7f1d\u200b\u548c\u200b\u5feb\u901f\u200b\u7684\u200b\u5f00\u53d1\u200b\u3002\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u81ea\u52a8\u200b\u91cd\u8f7d\u200b\u6307\u5357\u200b\u4e2d\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p> <pre><code>gradio app.py\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b <code>python app.py</code>\uff0c\u200b\u4f46\u200b\u5b83\u200b\u4e0d\u4f1a\u200b\u63d0\u4f9b\u200b\u81ea\u52a8\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u673a\u5236\u200b\u3002</p>"},{"location":"cn/01_getting-started/01_quickstart/#interface","title":"<code>Interface</code> \u200b\u7c7b","text":"<p>\u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\u4e3a\u4e86\u200b\u521b\u5efa\u200b\u6f14\u793a\u200b\uff0c\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>gr.Interface</code>\u3002<code>Interface</code> \u200b\u7c7b\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u4f55\u200b Python \u200b\u51fd\u6570\u200b\u4e0e\u200b\u7528\u6237\u754c\u9762\u200b\u914d\u5bf9\u200b\u3002\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u770b\u5230\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u57fa\u4e8e\u200b\u6587\u672c\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f46\u200b\u8be5\u200b\u51fd\u6570\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4ece\u200b\u97f3\u4e50\u200b\u751f\u6210\u5668\u200b\u5230\u200b\u7a0e\u6b3e\u200b\u8ba1\u7b97\u5668\u200b\u518d\u200b\u5230\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u3002</p> <p><code>Interface</code> \u200b\u7c7b\u200b\u7684\u200b\u6838\u5fc3\u200b\u662f\u200b\u4f7f\u7528\u200b\u4e09\u4e2a\u200b\u5fc5\u9700\u200b\u53c2\u6570\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\uff1a</p> <ul> <li><code>fn</code>\uff1a\u200b\u8981\u200b\u5728\u200b\u5176\u200b\u5468\u56f4\u200b\u5305\u88c5\u200b UI \u200b\u7684\u200b\u51fd\u6570\u200b</li> <li><code>inputs</code>\uff1a\u200b\u7528\u4e8e\u200b\u8f93\u5165\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff08\u200b\u4f8b\u5982\u200b <code>\"text\"</code>\u3001<code>\"image\"</code> \u200b\u6216\u200b <code>\"audio\"</code>\uff09</li> <li><code>outputs</code>\uff1a\u200b\u7528\u4e8e\u200b\u8f93\u51fa\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff08\u200b\u4f8b\u5982\u200b <code>\"text\"</code>\u3001<code>\"image\"</code> \u200b\u6216\u200b <code>\"label\"</code>\uff09</li> </ul> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u5730\u200b\u4e86\u89e3\u200b\u7528\u4e8e\u200b\u63d0\u4f9b\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u3002</p>"},{"location":"cn/01_getting-started/01_quickstart/#components-attributes","title":"\u7ec4\u4ef6\u200b\u5c5e\u6027\u200b (Components Attributes)","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u524d\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u770b\u5230\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u7b80\u5355\u200b\u7684\u200b <code>Textbox</code> \u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u66f4\u6539\u200b UI \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u5916\u89c2\u200b\u6216\u200b\u884c\u4e3a\u200b\u600e\u4e48\u529e\u200b\uff1f</p> <p>\u200b\u5047\u8bbe\u200b\u60a8\u200b\u60f3\u200b\u81ea\u5b9a\u4e49\u200b\u8f93\u5165\u200b\u6587\u672c\u200b\u5b57\u200b\u6bb5\u200b - \u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u5b83\u200b\u66f4\u200b\u5927\u200b\u5e76\u200b\u5177\u6709\u200b\u6587\u672c\u200b\u5360\u4f4d\u200b\u7b26\u200b\u3002\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u5b9e\u9645\u200b\u7684\u200b <code>Textbox</code> \u200b\u7c7b\u200b\u800c\u200b\u4e0d\u662f\u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u5feb\u6377\u65b9\u5f0f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7ec4\u4ef6\u200b\u5c5e\u6027\u200b\u83b7\u5f97\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u529f\u80fd\u200b\u3002</p> <p>$code_hello_world_2 $demo_hello_world_2</p>"},{"location":"cn/01_getting-started/01_quickstart/#_2","title":"\u591a\u4e2a\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6","text":"<p>\u200b\u5047\u8bbe\u200b\u60a8\u200b\u6709\u200b\u4e00\u4e2a\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u5177\u6709\u200b\u591a\u4e2a\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u3002\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u63a5\u53d7\u200b\u5b57\u7b26\u4e32\u200b\u3001\u200b\u5e03\u5c14\u503c\u200b\u548c\u200b\u6570\u5b57\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5b57\u7b26\u4e32\u200b\u548c\u200b\u6570\u5b57\u200b\u7684\u200b\u51fd\u6570\u200b\u3002\u200b\u8bf7\u200b\u770b\u200b\u4e00\u4e0b\u200b\u5982\u4f55\u200b\u4f20\u9012\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u5217\u8868\u200b\u3002</p> <p>$code_hello_world_3 $demo_hello_world_3</p> <p>\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b\u7ec4\u4ef6\u200b\u5305\u88c5\u200b\u5728\u200b\u5217\u8868\u200b\u4e2d\u200b\u3002<code>inputs</code> \u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u5bf9\u5e94\u200b\u51fd\u6570\u200b\u7684\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u987a\u5e8f\u200b\u76f8\u540c\u200b\u3002<code>outputs</code> \u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u5bf9\u5e94\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u7684\u200b\u4e00\u4e2a\u200b\u503c\u200b\uff0c\u200b\u540c\u6837\u200b\u662f\u200b\u987a\u5e8f\u200b\u3002</p>"},{"location":"cn/01_getting-started/01_quickstart/#_3","title":"\u56fe\u50cf\u200b\u793a\u4f8b","text":"<p>Gradio \u200b\u652f\u6301\u200b\u8bb8\u591a\u200b\u7c7b\u578b\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>Image</code>\u3001<code>DataFrame</code>\u3001<code>Video</code> \u200b\u6216\u200b <code>Label</code>\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5c1d\u8bd5\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u5230\u200b\u56fe\u50cf\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u8fd9\u4e9b\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u611f\u89c9\u200b\uff01</p> <p>$code_sepia_filter $demo_sepia_filter</p> <p>\u200b\u4f7f\u7528\u200b <code>Image</code> \u200b\u7ec4\u4ef6\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\u5c06\u200b\u63a5\u6536\u200b\u5230\u200b\u4e00\u4e2a\u200b\u5f62\u72b6\u200b\u4e3a\u200b<code>\uff08\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u5bbd\u5ea6\u200b\uff0c3\uff09</code> \u200b\u7684\u200b NumPy \u200b\u6570\u7ec4\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u7ef4\u5ea6\u200b\u8868\u793a\u200b RGB \u200b\u503c\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\uff0c\u200b\u5f62\u5f0f\u200b\u4e3a\u200b NumPy \u200b\u6570\u7ec4\u200b\u3002</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>type=</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u7ec4\u4ef6\u200b\u4f7f\u7528\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u56fe\u50cf\u6587\u4ef6\u200b\u8def\u5f84\u200b\u800c\u200b\u4e0d\u662f\u200b NumPy \u200b\u6570\u7ec4\u200b\uff0c\u200b\u8f93\u5165\u200b <code>Image</code> \u200b\u7ec4\u4ef6\u200b\u53ef\u4ee5\u200b\u5199\u6210\u200b\uff1a</p> <pre><code>gr.Image(type=\"filepath\", shape=...)\n</code></pre> <p>\u200b\u8fd8\u8981\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u8f93\u5165\u200b <code>Image</code> \u200b\u7ec4\u4ef6\u200b\u9644\u5e26\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7f16\u8f91\u200b\u6309\u94ae\u200b\ud83d\udd89\uff0c\u200b\u5141\u8bb8\u200b\u88c1\u526a\u200b\u548c\u200b\u7f29\u653e\u200b\u56fe\u50cf\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u64cd\u4f5c\u200b\u56fe\u50cf\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u63ed\u793a\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b\u504f\u89c1\u200b\u6216\u200b\u9690\u85cf\u200b\u7684\u200b\u7f3a\u9677\u200b\uff01</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200bGradio \u200b\u6587\u6863\u200b\u4e2d\u200b\u9605\u8bfb\u200b\u6709\u5173\u200b\u8bb8\u591a\u200b\u7ec4\u4ef6\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u5b83\u4eec\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/01_getting-started/01_quickstart/#blocks","title":"Blocks\uff1a\u200b\u66f4\u200b\u7075\u6d3b\u200b\u548c\u200b\u53ef\u63a7","text":"<p>Gradio \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u7c7b\u6765\u200b\u6784\u5efa\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff1a</p> <ol> <li> <p>Interface\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7528\u4e8e\u200b\u521b\u5efa\u200b\u6f14\u793a\u200b\u7684\u200b\u9ad8\u7ea7\u200b\u62bd\u8c61\u200b\uff0c\u200b\u6211\u4eec\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\u4e00\u76f4\u200b\u5728\u200b\u8ba8\u8bba\u200b\u3002</p> </li> <li> <p>Blocks\uff0c\u200b\u7528\u4e8e\u200b\u4ee5\u200b\u66f4\u200b\u7075\u6d3b\u200b\u7684\u200b\u5e03\u5c40\u200b\u548c\u200b\u6570\u636e\u6d41\u200b\u8bbe\u8ba1\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u4f4e\u7ea7\u200b API\u3002Blocks \u200b\u5141\u8bb8\u200b\u60a8\u200b\u6267\u884c\u200b\u8bf8\u5982\u200b\u7279\u6027\u200b\u591a\u4e2a\u200b\u6570\u636e\u6d41\u200b\u548c\u200b\u6f14\u793a\u200b\uff0c\u200b\u63a7\u5236\u200b\u7ec4\u4ef6\u200b\u5728\u200b\u9875\u9762\u200b\u4e0a\u200b\u7684\u200b\u51fa\u73b0\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u5904\u7406\u200b\u590d\u6742\u200b\u7684\u200b\u6570\u636e\u6d41\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8f93\u51fa\u200b\u53ef\u4ee5\u200b\u4f5c\u4e3a\u200b\u5176\u4ed6\u200b\u51fd\u6570\u200b\u7684\u200b\u8f93\u5165\u200b\uff09\uff0c\u200b\u5e76\u200b\u57fa\u4e8e\u200b\u7528\u6237\u200b\u4ea4\u4e92\u200b\u66f4\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u5c5e\u6027\u200b / \u200b\u53ef\u89c1\u200b\u6027\u200b\u7b49\u200b\u64cd\u4f5c\u200b - \u200b\u4ecd\u7136\u200b\u5168\u90e8\u200b\u4f7f\u7528\u200b Python\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u9700\u8981\u200b\u8fd9\u79cd\u200b\u53ef\u200b\u5b9a\u5236\u200b\u6027\u200b\uff0c\u200b\u8bf7\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b <code>Blocks</code>\uff01</p> </li> </ol>"},{"location":"cn/01_getting-started/01_quickstart/#hello-blocks","title":"Hello, Blocks","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6b64\u5904\u200b\u7684\u200b API \u200b\u4e0e\u200b <code>Interface</code> \u200b\u4e0d\u540c\u200b\u3002</p> <p>$code_hello_blocks $demo_hello_blocks</p> <p>\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u4e8b\u9879\u200b\uff1a</p> <ul> <li><code>Blocks</code> \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>with</code> \u200b\u5b50\u53e5\u200b\u521b\u5efa\u200b\uff0c\u200b\u6b64\u200b\u5b50\u53e5\u200b\u4e2d\u200b\u521b\u5efa\u200b\u7684\u200b\u4efb\u4f55\u200b\u7ec4\u4ef6\u200b\u90fd\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u7ec4\u4ef6\u200b\u4ee5\u200b\u6309\u200b\u521b\u5efa\u200b\u987a\u5e8f\u200b\u5782\u76f4\u200b\u653e\u7f6e\u200b\u5728\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002\uff08\u200b\u7a0d\u540e\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u81ea\u5b9a\u4e49\u200b\u5e03\u5c40\u200b\uff01\uff09</li> <li>\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>Button</code>\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u6b64\u200b\u6309\u94ae\u200b\u4e0a\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>click</code> \u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u8fd9\u4e2a\u200b API\uff0c\u200b\u5e94\u8be5\u200b\u5f88\u200b\u719f\u6089\u200b\uff01\u200b\u4e0e\u200b <code>Interface</code> \u200b\u7c7b\u4f3c\u200b\uff0c<code>click</code> \u200b\u65b9\u6cd5\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b Python \u200b\u51fd\u6570\u200b\u3001\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u3002</li> </ul>"},{"location":"cn/01_getting-started/01_quickstart/#_4","title":"\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u5e94\u7528","text":"<p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u4ee5\u200b\u8ba9\u200b\u60a8\u200b\u5bf9\u200b <code>Blocks</code> \u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u5185\u5bb9\u200b\u6709\u6240\u200b\u4e86\u89e3\u200b\uff1a</p> <p>$code_blocks_flipper $demo_blocks_flipper</p> <p>\u200b\u8fd9\u91cc\u200b\u6709\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u4e1c\u897f\u200b\uff01\u200b\u5728\u200bbuilding with blocks\u200b\u90e8\u5206\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u50cf\u200b\u8fd9\u6837\u200b\u7684\u200b\u590d\u6742\u200b\u7684\u200b <code>Blocks</code> \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p> <p>\u200b\u606d\u559c\u200b\uff0c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u719f\u6089\u200b\u4e86\u200b Gradio \u200b\u7684\u200b\u57fa\u7840\u77e5\u8bc6\u200b\uff01 \ud83e\udd73 \u200b\u8f6c\u200b\u5230\u200b\u6211\u4eec\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6307\u5357\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b Gradio \u200b\u7684\u200b\u4e3b\u8981\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/","title":"\u4e3b\u8981\u200b\u7279\u70b9","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u4ecb\u7ecd\u200b\u4e00\u4e0b\u200b Gradio \u200b\u6700\u200b\u53d7\u6b22\u8fce\u200b\u7684\u200b\u4e00\u4e9b\u200b\u529f\u80fd\u200b\uff01\u200b\u8fd9\u91cc\u200b\u662f\u200b Gradio \u200b\u7684\u200b\u4e3b\u8981\u200b\u7279\u70b9\u200b\uff1a</p> <ol> <li>\u200b\u6dfb\u52a0\u200b\u793a\u4f8b\u200b\u8f93\u5165\u200b</li> <li>\u200b\u4f20\u9012\u200b\u81ea\u5b9a\u4e49\u200b\u9519\u8bef\u200b\u6d88\u606f\u200b</li> <li>\u200b\u6dfb\u52a0\u200b\u63cf\u8ff0\u200b\u5185\u5bb9\u200b</li> <li>\u200b\u8bbe\u7f6e\u200b\u65d7\u6807\u200b</li> <li>\u200b\u9884\u5904\u7406\u200b\u548c\u200b\u540e\u5904\u7406\u200b</li> <li>\u200b\u6837\u5f0f\u200b\u5316\u200b\u6f14\u793a\u200b</li> <li>\u200b\u6392\u961f\u200b\u7528\u6237\u200b</li> <li>\u200b\u8fed\u4ee3\u200b\u8f93\u51fa\u200b</li> <li>\u200b\u8fdb\u5ea6\u6761\u200b</li> <li>\u200b\u6279\u5904\u7406\u200b\u51fd\u6570\u200b</li> <li>\u200b\u5728\u200b\u534f\u4f5c\u200b\u7b14\u8bb0\u672c\u200b\u4e0a\u200b\u8fd0\u884c\u200b</li> </ol>"},{"location":"cn/01_getting-started/02_key-features/#_2","title":"\u793a\u4f8b\u200b\u8f93\u5165","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u63d0\u4f9b\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u52a0\u8f7d\u200b\u5230\u200b \"Interface\" \u200b\u4e2d\u200b\u7684\u200b\u793a\u4f8b\u200b\u6570\u636e\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u6f14\u793a\u200b\u6a21\u578b\u200b\u671f\u671b\u200b\u7684\u200b\u8f93\u5165\u200b\u7c7b\u578b\u200b\u4ee5\u53ca\u200b\u6f14\u793a\u200b\u6570\u636e\u200b\u96c6\u200b\u548c\u200b\u6a21\u578b\u200b\u4e00\u8d77\u200b\u63a2\u7d22\u200b\u7684\u200b\u65b9\u5f0f\u200b\u975e\u5e38\u200b\u6709\u200b\u5e2e\u52a9\u200b\u3002\u200b\u8981\u200b\u52a0\u8f7d\u200b\u793a\u4f8b\u200b\u6570\u636e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5d4c\u5957\u200b\u5217\u8868\u200b\u63d0\u4f9b\u200b\u7ed9\u200b Interface \u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b <code>examples=</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u3002\u200b\u5916\u90e8\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b50\u200b\u5217\u8868\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u6837\u672c\u200b\uff0c\u200b\u5b50\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u8868\u793a\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u8f93\u5165\u200b\u3002\u200b\u6709\u5173\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u793a\u4f8b\u200b\u6570\u636e\u683c\u5f0f\u200b\u5728\u200bDocs\u200b\u4e2d\u6709\u200b\u8bf4\u660e\u200b\u3002</p> <p>$code_calculator $demo_calculator</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5927\u578b\u200b\u6570\u636e\u200b\u96c6\u200b\u52a0\u8f7d\u200b\u5230\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b Gradio \u200b\u6d4f\u89c8\u200b\u548c\u200b\u4e0e\u200b\u6570\u636e\u200b\u96c6\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\u3002\u200b\u793a\u4f8b\u200b\u5c06\u200b\u81ea\u52a8\u200b\u5206\u9875\u200b\uff08\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b Interface \u200b\u7684\u200b <code>examples_per_page</code> \u200b\u53c2\u6570\u200b\u8fdb\u884c\u200b\u914d\u7f6e\u200b\uff09\u3002</p> <p>\u200b\u7ee7\u7eed\u200b\u4e86\u89e3\u200b\u793a\u4f8b\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u66f4\u200b\u591a\u200b\u793a\u4f8b\u200b\u6307\u5357\u200b\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/#_3","title":"\u9519\u8bef","text":"<p>\u200b\u60a8\u200b\u5e0c\u671b\u200b\u5411\u200b\u7528\u6237\u200b\u4f20\u9012\u200b\u81ea\u5b9a\u4e49\u200b\u9519\u8bef\u200b\u6d88\u606f\u200b\u3002\u200b\u4e3a\u6b64\u200b\uff0cwith <code>gr.Error(\"custom message\")</code> \u200b\u6765\u200b\u663e\u793a\u200b\u9519\u8bef\u200b\u6d88\u606f\u200b\u3002\u200b\u5982\u679c\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u8ba1\u7b97\u5668\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u5c1d\u8bd5\u200b\u9664\u4ee5\u200b\u96f6\u200b\uff0c\u200b\u5c06\u200b\u663e\u793a\u200b\u81ea\u5b9a\u4e49\u200b\u9519\u8bef\u200b\u6d88\u606f\u200b\u7684\u200b\u5f39\u51fa\u200b\u6a21\u6001\u200b\u7a97\u53e3\u200b\u3002\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u9519\u8bef\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u6587\u6863\u200b\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/#_4","title":"\u63cf\u8ff0\u6027\u200b\u5185\u5bb9","text":"<p>\u200b\u5728\u200b\u524d\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5df2\u7ecf\u200b\u6ce8\u610f\u200b\u5230\u200b Interface \u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b <code>title=</code> \u200b\u548c\u200b <code>description=</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u4e86\u89e3\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p> <p>Interface \u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u6709\u200b\u4e09\u4e2a\u200b\u53c2\u6570\u200b\u7528\u4e8e\u200b\u6307\u5b9a\u200b\u6b64\u200b\u5185\u5bb9\u200b\u5e94\u200b\u653e\u7f6e\u200b\u5728\u200b\u54ea\u91cc\u200b\uff1a</p> <ul> <li><code>title</code>\uff1a\u200b\u63a5\u53d7\u200b\u6587\u672c\u200b\uff0c\u200b\u5e76\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u663e\u793a\u200b\u5728\u200b\u754c\u9762\u200b\u7684\u200b\u9876\u90e8\u200b\uff0c\u200b\u4e5f\u200b\u5c06\u200b\u6210\u4e3a\u200b\u9875\u9762\u200b\u6807\u9898\u200b\u3002</li> <li><code>description</code>\uff1a\u200b\u63a5\u53d7\u200b\u6587\u672c\u200b\u3001Markdown \u200b\u6216\u200b HTML\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u653e\u7f6e\u200b\u5728\u200b\u6807\u9898\u200b\u6b63\u4e0b\u65b9\u200b\u3002</li> <li><code>article</code>\uff1a\u200b\u4e5f\u200b\u63a5\u53d7\u200b\u6587\u672c\u200b\u3001Markdown \u200b\u6216\u200b HTML\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u653e\u7f6e\u200b\u5728\u200b\u754c\u9762\u200b\u4e0b\u65b9\u200b\u3002</li> </ul> <p></p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200b <code>Blocks</code> API\uff0c\u200b\u5219\u200b\u53ef\u4ee5\u200b with <code>gr.Markdown(...)</code> \u200b\u6216\u200b <code>gr.HTML(...)</code> \u200b\u7ec4\u4ef6\u200b\u5728\u200b\u4efb\u4f55\u200b\u4f4d\u7f6e\u200b\u63d2\u5165\u200b\u6587\u672c\u200b\u3001Markdown \u200b\u6216\u200b HTML\uff0c\u200b\u5176\u4e2d\u200b\u63cf\u8ff0\u6027\u200b\u5185\u5bb9\u200b\u4f4d\u4e8e\u200b <code>Component</code> \u200b\u6784\u9020\u51fd\u6570\u200b\u5185\u90e8\u200b\u3002</p> <p>\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6709\u7528\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u662f\u200b <code>label=</code>\uff0c\u200b\u5b83\u200b\u5b58\u5728\u200b\u4e8e\u200b\u6bcf\u4e2a\u200b <code>Component</code> \u200b\u4e2d\u200b\u3002\u200b\u8fd9\u200b\u4fee\u6539\u200b\u4e86\u200b\u6bcf\u4e2a\u200b <code>Component</code> \u200b\u9876\u90e8\u200b\u7684\u200b\u6807\u7b7e\u200b\u6587\u672c\u200b\u3002\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u8bf8\u5982\u200b <code>Textbox</code> \u200b\u6216\u200b <code>Radio</code> \u200b\u4e4b\u7c7b\u200b\u7684\u200b\u8868\u5355\u200b\u5143\u7d20\u200b\u6dfb\u52a0\u200b <code>info=</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\uff0c\u200b\u4ee5\u200b\u63d0\u4f9b\u200b\u6709\u5173\u200b\u5176\u200b\u7528\u6cd5\u200b\u7684\u200b\u8fdb\u4e00\u6b65\u200b\u4fe1\u606f\u200b\u3002</p> <pre><code>gr.Number(label='\u200b\u5e74\u9f84\u200b', info='\u200b\u4ee5\u5e74\u200b\u4e3a\u200b\u5355\u4f4d\u200b\uff0c\u200b\u5fc5\u987b\u200b\u5927\u4e8e\u200b0')\n</code></pre>"},{"location":"cn/01_getting-started/02_key-features/#_5","title":"\u65d7\u6807","text":"<p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\"Interface\" \u200b\u5c06\u200b\u6709\u200b\u4e00\u4e2a\u200b \"Flag\" \u200b\u6309\u94ae\u200b\u3002\u200b\u5f53\u200b\u7528\u6237\u200b\u6d4b\u8bd5\u200b\u60a8\u200b\u7684\u200b <code>Interface</code> \u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u770b\u5230\u200b\u6709\u8da3\u200b\u7684\u200b\u8f93\u51fa\u200b\uff0c\u200b\u4f8b\u5982\u200b\u9519\u8bef\u200b\u6216\u200b\u610f\u5916\u200b\u7684\u200b\u6a21\u578b\u200b\u884c\u4e3a\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8f93\u5165\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u60a8\u200b\u8fdb\u884c\u200b\u67e5\u770b\u200b\u3002\u200b\u5728\u200b\u7531\u200b <code>Interface</code> \u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b <code>flagging_dir=</code> \u200b\u53c2\u6570\u200b\u63d0\u4f9b\u200b\u7684\u200b\u76ee\u5f55\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b\u8bb0\u5f55\u200b\u6807\u8bb0\u200b\u7684\u200b\u8f93\u5165\u200b\u5230\u200b\u4e00\u4e2a\u200b CSV \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002\u200b\u5982\u679c\u200b\u754c\u9762\u200b\u6d89\u53ca\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u548c\u200b\u97f3\u9891\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5c06\u200b\u521b\u5efa\u200b\u6587\u4ef6\u5939\u200b\u6765\u200b\u5b58\u50a8\u200b\u8fd9\u4e9b\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u4e0a\u9762\u200b\u663e\u793a\u200b\u7684\u200b\u8ba1\u7b97\u5668\u200b\u754c\u9762\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u65d7\u6807\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u5b58\u50a8\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\uff1a</p> <pre><code>+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n</code></pre> <p>flagged/logs.csv</p> <pre><code>num1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n</code></pre> <p>\u200b\u4e0e\u200b\u65e9\u671f\u200b\u663e\u793a\u200b\u7684\u200b\u51b7\u8272\u200b\u754c\u9762\u200b\u76f8\u5bf9\u200b\u5e94\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u65d7\u6807\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u5b58\u50a8\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\uff1a</p> <pre><code>+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n</code></pre> <p>flagged/logs.csv</p> <pre><code>im,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u65d7\u6807\u200b\u539f\u56e0\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u5217\u8868\u200b\u4f20\u9012\u200b\u7ed9\u200b Interface \u200b\u7684\u200b <code>flagging_options</code> \u200b\u53c2\u6570\u200b\u3002\u200b\u7528\u6237\u200b\u5728\u200b\u8fdb\u884c\u200b\u65d7\u6807\u200b\u65f6\u200b\u5fc5\u987b\u200b\u9009\u62e9\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u4f5c\u4e3a\u200b\u9644\u52a0\u200b\u5217\u200b\u4fdd\u5b58\u200b\u5230\u200b CSV \u200b\u4e2d\u200b\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/#preprocessing-and-postprocessing","title":"\u9884\u5904\u7406\u200b\u548c\u200b\u540e\u5904\u7406\u200b (Preprocessing and Postprocessing)","text":"<p>\u200b\u5982\u200b\u60a8\u200b\u6240\u89c1\u200b\uff0cGradio \u200b\u5305\u62ec\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u5404\u79cd\u200b\u4e0d\u540c\u200b\u6570\u636e\u7c7b\u578b\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u3001\u200b\u97f3\u9891\u200b\u548c\u200b\u89c6\u9891\u200b\u3002\u200b\u5927\u591a\u6570\u200b\u7ec4\u4ef6\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u7528\u4f5c\u200b\u8f93\u5165\u200b\u6216\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u5f53\u200b\u7ec4\u4ef6\u200b\u7528\u4f5c\u200b\u8f93\u5165\u200b\u65f6\u200b\uff0cGradio \u200b\u81ea\u52a8\u200b\u5904\u7406\u200b\u9884\u5904\u7406\u200b\uff0c\u200b\u5c06\u200b\u6570\u636e\u200b\u4ece\u200b\u7528\u6237\u200b\u6d4f\u89c8\u5668\u200b\u53d1\u9001\u200b\u7684\u200b\u7c7b\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b\u7f51\u7edc\u200b\u6444\u50cf\u5934\u200b\u5feb\u7167\u200b\u7684\u200b base64 \u200b\u8868\u793a\u200b\uff09\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\u53ef\u4ee5\u200b\u63a5\u53d7\u200b\u7684\u200b\u5f62\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b <code>numpy</code> \u200b\u6570\u7ec4\u200b\uff09\u3002</p> <p>\u200b\u540c\u6837\u200b\uff0c\u200b\u5f53\u200b\u7ec4\u4ef6\u200b\u7528\u4f5c\u200b\u8f93\u51fa\u200b\u65f6\u200b\uff0cGradio \u200b\u81ea\u52a8\u200b\u5904\u7406\u200b\u540e\u5904\u7406\u200b\uff0c\u200b\u5c06\u200b\u6570\u636e\u200b\u4ece\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u7684\u200b\u5f62\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u8def\u5f84\u200b\u5217\u8868\u200b\uff09\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7528\u6237\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u663e\u793a\u200b\u7684\u200b\u5f62\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b\u4ee5\u200b base64 \u200b\u683c\u5f0f\u200b\u663e\u793a\u200b\u56fe\u50cf\u200b\u7684\u200b <code>Gallery</code>\uff09\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6784\u5efa\u200b\u56fe\u50cf\u200b\u7ec4\u4ef6\u200b\u65f6\u200b\u7684\u200b\u53c2\u6570\u200b\u63a7\u5236\u200b\u9884\u5904\u7406\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u53c2\u6570\u200b\u5b9e\u4f8b\u200b\u5316\u200b <code>Image</code> \u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u5c06\u200b\u56fe\u50cf\u200b\u8f6c\u6362\u200b\u4e3a\u200b <code>PIL</code> \u200b\u7c7b\u578b\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u91cd\u5851\u200b\u4e3a\u200b<code>(100, 100)</code>\uff0c\u200b\u800c\u200b\u4e0d\u7ba1\u200b\u63d0\u4ea4\u200b\u65f6\u200b\u7684\u200b\u539f\u59cb\u200b\u5927\u5c0f\u200b\u5982\u4f55\u200b\uff1a</p> <pre><code>img = gr.Image(shape=(100, 100), type=\"pil\")\n</code></pre> <p>\u200b\u76f8\u53cd\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u4fdd\u7559\u200b\u56fe\u50cf\u200b\u7684\u200b\u539f\u59cb\u200b\u5927\u5c0f\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b numpy \u200b\u6570\u7ec4\u200b\u4e4b\u524d\u200b\u53cd\u8f6c\u200b\u989c\u8272\u200b\uff1a</p> <pre><code>img = gr.Image(invert_colors=True, type=\"numpy\")\n</code></pre> <p>\u200b\u540e\u5904\u7406\u200b\u8981\u200b\u5bb9\u6613\u200b\u5f97\u200b\u591a\u200b\uff01Gradio \u200b\u81ea\u52a8\u8bc6\u522b\u200b\u8fd4\u56de\u200b\u6570\u636e\u200b\u7684\u200b\u683c\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b <code>Image</code> \u200b\u662f\u200b <code>numpy</code> \u200b\u6570\u7ec4\u200b\u8fd8\u662f\u200b <code>str</code> \u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\uff1f\uff09\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u540e\u200b\u5904\u7406\u200b\u4e3a\u200b\u53ef\u4ee5\u200b\u7531\u200b\u6d4f\u89c8\u5668\u200b\u663e\u793a\u200b\u7684\u200b\u683c\u5f0f\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u67e5\u770b\u200b\u6587\u6863\u200b\uff0c\u200b\u4e86\u89e3\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6240\u6709\u200b\u4e0e\u200b\u9884\u5904\u7406\u200b\u76f8\u5173\u200b\u7684\u200b\u53c2\u6570\u200b\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/#styling","title":"\u6837\u5f0f\u200b (Styling)","text":"<p>Gradio \u200b\u4e3b\u9898\u200b\u662f\u200b\u81ea\u5b9a\u4e49\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5916\u89c2\u200b\u548c\u200b\u611f\u89c9\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u6cd5\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u591a\u79cd\u200b\u4e3b\u9898\u200b\u6216\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b\u3002\u200b\u8981\u200b\u8fd9\u6837\u200b\u505a\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b <code>theme=</code> \u200b\u53c2\u6570\u4f20\u9012\u200b\u7ed9\u200b <code>Interface</code> \u200b\u6784\u9020\u51fd\u6570\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>demo = gr.Interface(..., theme=gr.themes.Monochrome())\n</code></pre> <p>Gradio \u200b\u5e26\u6709\u200b\u4e00\u7ec4\u200b\u9884\u5148\u200b\u6784\u5efa\u200b\u7684\u200b\u4e3b\u9898\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b <code>gr.themes.*</code> \u200b\u52a0\u8f7d\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6269\u5c55\u200b\u8fd9\u4e9b\u200b\u4e3b\u9898\u200b\u6216\u200b\u4ece\u5934\u5f00\u59cb\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b - \u200b\u6709\u5173\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u4e3b\u9898\u200b\u6307\u5357\u200b\u3002</p> <p>\u200b\u8981\u200b\u589e\u52a0\u200b\u989d\u5916\u200b\u7684\u200b\u6837\u5f0f\u200b\u80fd\u529b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b with <code>css=</code> \u200b\u5173\u952e\u5b57\u200b\u5c06\u200b\u4efb\u4f55\u200b CSS \u200b\u4f20\u9012\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002 Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u57fa\u7c7b\u200b\u662f\u200b <code>gradio-container</code>\uff0c\u200b\u56e0\u6b64\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u66f4\u6539\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u80cc\u666f\u200b\u989c\u8272\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>with `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n</code></pre>"},{"location":"cn/01_getting-started/02_key-features/#queuing","title":"\u961f\u5217\u200b (Queuing)","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u9884\u8ba1\u200b\u4f1a\u200b\u6709\u200b\u5927\u91cf\u200b\u6d41\u91cf\u200b\uff0c\u200b\u8bf7\u200b with <code>queue()</code> \u200b\u65b9\u6cd5\u200b\u6765\u200b\u63a7\u5236\u200b\u5904\u7406\u200b\u901f\u7387\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u6392\u961f\u200b\u5904\u7406\u200b\u8c03\u7528\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e00\u6b21\u200b\u53ea\u200b\u5904\u7406\u200b\u4e00\u5b9a\u200b\u6570\u91cf\u200b\u7684\u200b\u8bf7\u6c42\u200b\u3002\u200b\u961f\u5217\u200b\u4f7f\u7528\u200b Websockets\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u9632\u6b62\u7f51\u7edc\u200b\u8d85\u65f6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\u7684\u200b\u63a8\u7406\u200b\u65f6\u95f4\u200b\u5f88\u957f\u200b\uff08&gt; 1 \u200b\u5206\u949f\u200b\uff09\uff0c\u200b\u5e94\u200b\u4f7f\u7528\u200b\u961f\u5217\u200b\u3002</p> <p>with <code>Interface</code>\uff1a</p> <pre><code>demo = gr.Interface(...).queue()\ndemo.launch()\n</code></pre> <p>with <code>Blocks</code>\uff1a</p> <pre><code>with gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n</code></pre> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u65b9\u5f0f\u200b\u63a7\u5236\u200b\u4e00\u6b21\u200b\u5904\u7406\u200b\u7684\u200b\u8bf7\u6c42\u200b\u6570\u91cf\u200b\uff1a</p> <pre><code>demo.queue(concurrency_count=3)\n</code></pre> <p>\u200b\u67e5\u770b\u200b\u6709\u5173\u200b\u914d\u7f6e\u200b\u5176\u4ed6\u200b\u961f\u5217\u200b\u53c2\u6570\u200b\u7684\u200b\u961f\u5217\u200b\u6587\u6863\u200b\u3002</p> <p>\u200b\u5728\u200b Blocks \u200b\u4e2d\u200b\u6307\u5b9a\u200b\u4ec5\u200b\u5bf9\u200b\u67d0\u4e9b\u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u6392\u961f\u200b\uff1a</p> <pre><code>with gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n</code></pre>"},{"location":"cn/01_getting-started/02_key-features/#iterative-outputs","title":"\u8fed\u4ee3\u200b\u8f93\u51fa\u200b (Iterative Outputs)","text":"<p>\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4f20\u8f93\u200b\u4e00\u7cfb\u5217\u200b\u8f93\u51fa\u200b\u800c\u200b\u4e0d\u662f\u200b\u4e00\u6b21\u200b\u663e\u793a\u200b\u5355\u4e2a\u200b\u8f93\u51fa\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff0c\u200b\u5e0c\u671b\u200b\u663e\u793a\u200b\u751f\u6210\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u6b65\u9aa4\u200b\u7684\u200b\u56fe\u50cf\u200b\uff0c\u200b\u76f4\u5230\u200b\u6700\u7ec8\u200b\u56fe\u50cf\u200b\u3002\u200b\u6216\u8005\u200b\u60a8\u200b\u53ef\u80fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\uff0c\u200b\u5b83\u200b\u9010\u5b57\u9010\u53e5\u200b\u5730\u200b\u6d41\u5f0f\u200b\u4f20\u8f93\u200b\u54cd\u5e94\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u4e00\u6b21\u200b\u8fd4\u56de\u200b\u5168\u90e8\u200b\u54cd\u5e94\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u751f\u6210\u5668\u200b\u51fd\u6570\u200b\u63d0\u4f9b\u200b\u7ed9\u200b Gradio\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5e38\u89c4\u200b\u51fd\u6570\u200b\u3002\u200b\u5728\u200b Python \u200b\u4e2d\u200b\u521b\u5efa\u200b\u751f\u6210\u5668\u200b\u975e\u5e38\u7b80\u5355\u200b\uff1a\u200b\u51fd\u6570\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b <code>return</code> \u200b\u503c\u200b\uff0c\u200b\u800c\u662f\u200b\u5e94\u8be5\u200b with <code>yield</code> \u200b\u8fde\u7eed\u200b\u8fd4\u56de\u200b\u4e00\u7cfb\u5217\u200b\u503c\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c<code>yield</code> \u200b\u8bed\u53e5\u200b\u653e\u7f6e\u200b\u5728\u200b\u67d0\u79cd\u200b\u5faa\u73af\u200b\u4e2d\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u793a\u4f8b\u200b\uff0c\u200b\u751f\u6210\u5668\u200b\u53ea\u662f\u200b\u7b80\u5355\u200b\u8ba1\u6570\u200b\u5230\u200b\u7ed9\u5b9a\u200b\u6570\u5b57\u200b\uff1a</p> <pre><code>def my_generator(x):\n    for i in range(x):\n        yield i\n</code></pre> <p>\u200b\u60a8\u200b\u4ee5\u200b\u4e0e\u200b\u5e38\u89c4\u200b\u51fd\u6570\u200b\u76f8\u540c\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5c06\u200b\u751f\u6210\u5668\u200b\u63d0\u4f9b\u200b\u7ed9\u200b Gradio\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\uff08\u200b\u865a\u62df\u200b\u7684\u200b\uff09\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff0c\u200b\u5b83\u200b\u5728\u200b\u8f93\u51fa\u200b\u56fe\u50cf\u200b\u4e4b\u524d\u200b\u751f\u6210\u200b\u6570\u4e2a\u200b\u6b65\u9aa4\u200b\u7684\u200b\u566a\u97f3\u200b\uff1a</p> <p>$code_fake_diffusion $demo_fake_diffusion</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b\u8fed\u4ee3\u200b\u5668\u4e2d\u200b\u6dfb\u52a0\u200b\u4e86\u200b <code>time.sleep(1)</code>\uff0c\u200b\u4ee5\u200b\u521b\u5efa\u200b\u6b65\u9aa4\u200b\u4e4b\u95f4\u200b\u7684\u200b\u4eba\u5de5\u200b\u6682\u505c\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u89c2\u5bdf\u200b\u8fed\u4ee3\u200b\u5668\u200b\u7684\u200b\u6b65\u9aa4\u200b\uff08\u200b\u5728\u200b\u771f\u5b9e\u200b\u7684\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u662f\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\uff09\u3002</p> <p>\u200b\u5c06\u200b\u751f\u6210\u5668\u200b\u63d0\u4f9b\u200b\u7ed9\u200b Gradio \u200b\u9700\u8981\u200b\u5728\u200b\u5e95\u5c42\u200b Interface \u200b\u6216\u200b Blocks \u200b\u4e2d\u200b\u542f\u7528\u200b\u961f\u5217\u200b\uff08\u200b\u8bf7\u53c2\u9605\u200b\u4e0a\u9762\u200b\u7684\u200b\u961f\u5217\u200b\u90e8\u5206\u200b\uff09\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/#_6","title":"\u8fdb\u5ea6\u6761","text":"<p>Gradio \u200b\u652f\u6301\u200b\u521b\u5efa\u200b\u81ea\u5b9a\u4e49\u200b\u8fdb\u5ea6\u6761\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u81ea\u5b9a\u4e49\u200b\u548c\u200b\u63a7\u5236\u200b\u5411\u200b\u7528\u6237\u200b\u663e\u793a\u200b\u7684\u200b\u8fdb\u5ea6\u200b\u66f4\u65b0\u200b\u3002\u200b\u8981\u200b\u542f\u7528\u200b\u6b64\u200b\u529f\u80fd\u200b\uff0c\u200b\u53ea\u200b\u9700\u4e3a\u200b\u65b9\u6cd5\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u9ed8\u8ba4\u503c\u200b\u4e3a\u200b <code>gr.Progress</code> \u200b\u5b9e\u4f8b\u200b\u7684\u200b\u53c2\u6570\u200b\u5373\u53ef\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\u6b64\u200b\u5b9e\u4f8b\u200b\u5e76\u200b\u4f20\u5165\u200b 0 \u200b\u5230\u200b 1 \u200b\u4e4b\u95f4\u200b\u7684\u200b\u6d6e\u70b9\u6570\u200b\u6765\u200b\u66f4\u65b0\u200b\u8fdb\u5ea6\u200b\u7ea7\u522b\u200b\uff0c\u200b\u6216\u8005\u200b with <code>Progress</code> \u200b\u5b9e\u4f8b\u200b\u7684\u200b <code>tqdm()</code> \u200b\u65b9\u6cd5\u200b\u6765\u200b\u8ddf\u8e2a\u200b\u53ef\u200b\u8fed\u4ee3\u200b\u5bf9\u8c61\u200b\u4e0a\u200b\u7684\u200b\u8fdb\u5ea6\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002\u200b\u5fc5\u987b\u200b\u542f\u7528\u200b\u961f\u5217\u200b\u4ee5\u200b\u8fdb\u884c\u200b\u8fdb\u5ea6\u200b\u66f4\u65b0\u200b\u3002</p> <p>$code_progress_simple $demo_progress_simple</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b with <code>tqdm</code> \u200b\u5e93\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5e0c\u671b\u200b\u4ece\u200b\u51fd\u6570\u200b\u5185\u90e8\u200b\u7684\u200b\u4efb\u4f55\u200b <code>tqdm.tqdm</code> \u200b\u81ea\u52a8\u200b\u62a5\u544a\u200b\u8fdb\u5ea6\u200b\u66f4\u65b0\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gr.Progress(track_tqdm=True)</code>\uff01</p>"},{"location":"cn/01_getting-started/02_key-features/#batch-functions","title":"\u6279\u5904\u7406\u200b\u51fd\u6570\u200b (Batch Functions)","text":"<p>Gradio \u200b\u652f\u6301\u200b\u4f20\u9012\u200b\u6279\u5904\u7406\u200b\u51fd\u6570\u200b\u3002\u200b\u6279\u5904\u7406\u200b\u51fd\u6570\u200b\u53ea\u662f\u200b\u63a5\u53d7\u200b\u8f93\u5165\u200b\u5217\u8868\u200b\u5e76\u200b\u8fd4\u56de\u200b\u9884\u6d4b\u200b\u5217\u8868\u200b\u7684\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u6279\u5904\u7406\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b83\u200b\u63a5\u53d7\u200b\u4e24\u4e2a\u200b\u8f93\u5165\u200b\u5217\u8868\u200b\uff08\u200b\u4e00\u4e2a\u200b\u5355\u8bcd\u200b\u5217\u8868\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\u5217\u8868\u200b\uff09\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u4fee\u526a\u200b\u8fc7\u200b\u7684\u200b\u5355\u8bcd\u200b\u5217\u8868\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\uff1a</p> <pre><code>import time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u6279\u5904\u7406\u200b\u51fd\u6570\u200b\u7684\u200b\u4f18\u70b9\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u542f\u7528\u200b\u4e86\u200b\u961f\u5217\u200b\uff0cGradio \u200b\u670d\u52a1\u5668\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u6279\u5904\u7406\u200b\u4f20\u5165\u200b\u7684\u200b\u8bf7\u6c42\u200b\u5e76\u200b\u5e76\u884c\u5904\u7406\u200b\u5b83\u4eec\u200b\uff0c\u200b\u4ece\u800c\u200b\u53ef\u80fd\u200b\u52a0\u5feb\u200b\u6f14\u793a\u200b\u901f\u5ea6\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b Gradio \u200b\u4ee3\u7801\u200b\u7684\u200b\u793a\u4f8b\u200b\uff08\u200b\u8bf7\u200b\u6ce8\u610f\u200b <code>batch=True</code> \u200b\u548c\u200b <code>max_batch_size=16</code> - \u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e8b\u4ef6\u200b\u89e6\u53d1\u5668\u200b\u6216\u200b <code>Interface</code> \u200b\u7c7b\u200b\uff09</p> <p>with <code>Interface</code>\uff1a</p> <pre><code>demo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n</code></pre> <p>with <code>Blocks</code>\uff1a</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5e76\u884c\u5904\u7406\u200b 16 \u200b\u4e2a\u200b\u8bf7\u6c42\u200b\uff08\u200b\u603b\u200b\u63a8\u7406\u200b\u65f6\u95f4\u200b\u4e3a\u200b 5 \u200b\u79d2\u200b\uff09\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5206\u522b\u200b\u5904\u7406\u200b\u6bcf\u4e2a\u200b\u8bf7\u6c42\u200b\uff08\u200b\u603b\u200b\u63a8\u7406\u200b\u65f6\u95f4\u200b\u4e3a\u200b 80 \u200b\u79d2\u200b\uff09\u3002\u200b\u8bb8\u591a\u200b Hugging Face \u200b\u7684\u200b <code>transformers</code> \u200b\u548c\u200b <code>diffusers</code> \u200b\u6a21\u578b\u200b\u5728\u200b Gradio \u200b\u7684\u200b\u6279\u5904\u7406\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u81ea\u7136\u200b\u5de5\u4f5c\u200b\uff1a\u200b\u8fd9\u662f\u200b\u4f7f\u7528\u200b\u6279\u5904\u7406\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u7684\u200b\u793a\u4f8b\u200b\u6f14\u793a\u200b</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200b\u6279\u5904\u7406\u200b\u51fd\u6570\u200b requires \u200b\u5728\u200b\u5e95\u5c42\u200b Interface \u200b\u6216\u200b Blocks \u200b\u4e2d\u200b\u542f\u7528\u200b\u961f\u5217\u200b\uff08\u200b\u8bf7\u53c2\u9605\u200b\u4e0a\u9762\u200b\u7684\u200b\u961f\u5217\u200b\u90e8\u5206\u200b\uff09\u3002</p>"},{"location":"cn/01_getting-started/02_key-features/#gradio-colab-notebooks","title":"Gradio \u200b\u7b14\u8bb0\u672c\u200b (Colab Notebooks)","text":"<p>Gradio \u200b\u53ef\u4ee5\u200b\u5728\u200b\u4efb\u4f55\u200b\u8fd0\u884c\u200b Python \u200b\u7684\u200b\u5730\u65b9\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5305\u62ec\u200b\u672c\u5730\u200b Jupyter \u200b\u7b14\u8bb0\u672c\u200b\u548c\u200b\u534f\u4f5c\u200b\u7b14\u8bb0\u672c\u200b\uff0c\u200b\u5982\u200bGoogle Colab\u3002\u200b\u5bf9\u4e8e\u200b\u672c\u5730\u200b Jupyter \u200b\u7b14\u8bb0\u672c\u200b\u548c\u200b Google Colab \u200b\u7b14\u8bb0\u672c\u200b\uff0cGradio \u200b\u5728\u200b\u672c\u5730\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u4e0e\u200b\u4e4b\u200b\u4ea4\u4e92\u200b\u3002\uff08\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5bf9\u4e8e\u200b Google Colab\uff0c\u200b\u8fd9\u662f\u200b\u901a\u8fc7\u200b\u670d\u52a1\u200b\u5de5\u4f5c\u200b\u5668\u200b\u96a7\u9053\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u9700\u8981\u200b\u542f\u7528\u200b cookies\u3002\uff09\u200b\u5bf9\u4e8e\u200b\u5176\u4ed6\u200b\u8fdc\u7a0b\u200b\u7b14\u8bb0\u672c\u200b\uff0cGradio \u200b\u4e5f\u200b\u5c06\u200b\u5728\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u9700\u8981\u200b\u4f7f\u7528\u200bSSH \u200b\u96a7\u9053\u200b\u5728\u200b\u672c\u5730\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u67e5\u770b\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c\u200b\u66f4\u200b\u7b80\u5355\u200b\u7684\u200b\u9009\u62e9\u200b\u662f\u200b\u4f7f\u7528\u200b Gradio \u200b\u5185\u7f6e\u200b\u7684\u200b\u516c\u5171\u200b\u94fe\u63a5\u200b\uff0c\u200b\u5728\u200b\u4e0b\u200b\u4e00\u7bc7\u200b\u6307\u5357\u200b\u4e2d\u200b\u8ba8\u8bba\u200b\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/","title":"\u5206\u4eab\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528","text":"<p>\u200b\u5982\u4f55\u200b\u5206\u4eab\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\uff1a</p> <ol> <li>\u200b\u4f7f\u7528\u200b share \u200b\u53c2\u6570\u200b\u5206\u4eab\u200b\u6f14\u793a\u200b</li> <li>\u200b\u5728\u200b HF Spaces \u200b\u4e0a\u200b\u6258\u7ba1\u200b</li> <li>\u200b\u5d4c\u5165\u200b\u6258\u7ba1\u200b\u7684\u200b\u7a7a\u95f4\u200b</li> <li>\u200b\u4f7f\u7528\u200b Web \u200b\u7ec4\u4ef6\u200b\u5d4c\u5165\u200b</li> <li>\u200b\u4f7f\u7528\u200b API \u200b\u9875\u9762\u200b</li> <li>\u200b\u5728\u200b\u9875\u9762\u200b\u4e0a\u200b\u6dfb\u52a0\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b</li> <li>\u200b\u8bbf\u95ee\u200b\u7f51\u7edc\u200b\u8bf7\u6c42\u200b</li> <li>\u200b\u5728\u200b FastAPI \u200b\u4e2d\u200b\u6302\u8f7d\u200b</li> <li>\u200b\u5b89\u5168\u6027\u200b</li> </ol>"},{"location":"cn/01_getting-started/03_sharing-your-app/#_2","title":"\u5206\u4eab\u200b\u6f14\u793a","text":"<p>\u200b\u901a\u8fc7\u200b\u5728\u200b <code>launch()</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>share=True</code>\uff0c\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u516c\u5f00\u200b\u5206\u4eab\u200b Gradio \u200b\u6f14\u793a\u200b\u3002\u200b\u5c31\u200b\u50cf\u200b\u8fd9\u6837\u200b\uff1a</p> <pre><code>demo.launch(share=True)\n</code></pre> <p>\u200b\u8fd9\u200b\u5c06\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u516c\u5f00\u200b\u7684\u200b\u53ef\u200b\u5206\u4eab\u200b\u94fe\u63a5\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u53d1\u9001\u7ed9\u200b\u4efb\u4f55\u4eba\u200b\uff01\u200b\u5f53\u200b\u60a8\u200b\u53d1\u9001\u200b\u6b64\u200b\u94fe\u63a5\u200b\u65f6\u200b\uff0c\u200b\u5bf9\u65b9\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5176\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u5c1d\u8bd5\u200b\u6a21\u578b\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5904\u7406\u8fc7\u7a0b\u200b\u53d1\u751f\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u8bbe\u5907\u200b\u4e0a\u200b\uff08\u200b\u53ea\u8981\u200b\u60a8\u200b\u7684\u200b\u8bbe\u5907\u200b\u4fdd\u6301\u200b\u5f00\u542f\u200b\uff01\uff09\uff0c\u200b\u60a8\u200b\u4e0d\u5fc5\u200b\u62c5\u5fc3\u200b\u4efb\u4f55\u200b\u6253\u5305\u200b\u4f9d\u8d56\u200b\u9879\u200b\u7684\u200b\u95ee\u9898\u200b\u3002\u200b\u4e00\u4e2a\u200b\u5206\u4eab\u200b\u94fe\u63a5\u200b\u901a\u5e38\u200b\u770b\u8d77\u6765\u200b\u50cf\u200b\u8fd9\u6837\u200b\uff1aXXXXX.gradio.app\u3002\u200b\u5c3d\u7ba1\u200b\u94fe\u63a5\u200b\u662f\u200b\u901a\u8fc7\u200b Gradio URL \u200b\u63d0\u4f9b\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u6211\u4eec\u200b\u53ea\u662f\u200b\u60a8\u200b\u672c\u5730\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u4ee3\u7406\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u4f1a\u200b\u5b58\u50a8\u200b\u901a\u8fc7\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u200b\u53d1\u9001\u200b\u7684\u200b\u4efb\u4f55\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u4f46\u200b\u8bf7\u200b\u8bb0\u4f4f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u94fe\u63a5\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u516c\u5f00\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\uff01\u200b\u56e0\u6b64\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u4e0d\u8981\u200b\u901a\u8fc7\u200b\u60a8\u200b\u7f16\u5199\u200b\u7684\u200b\u51fd\u6570\u200b\u516c\u5f00\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u8981\u200b\u5141\u8bb8\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u5173\u952e\u200b\u66f4\u6539\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u8bbe\u7f6e\u200b <code>share=False</code>\uff08\u200b\u9ed8\u8ba4\u503c\u200b\uff0c\u200b\u5728\u200b colab \u200b\u7b14\u8bb0\u672c\u200b\u4e2d\u200b\u9664\u5916\u200b\uff09\uff0c\u200b\u5219\u200b\u53ea\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u672c\u5730\u200b\u94fe\u63a5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7aef\u53e3\u200b\u8f6c\u53d1\u200b\u4e0e\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u5171\u4eab\u200b\u3002</p> <p></p> <p>\u200b\u5206\u4eab\u200b\u94fe\u63a5\u200b\u5728\u200b 72 \u200b\u5c0f\u65f6\u200b\u540e\u200b\u8fc7\u671f\u200b\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#hf-spaces","title":"\u5728\u200b HF Spaces \u200b\u4e0a\u200b\u6258\u7ba1","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u5728\u200b\u4e92\u8054\u7f51\u200b\u4e0a\u200b\u83b7\u5f97\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u6c38\u4e45\u200b\u94fe\u63a5\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b Hugging Face Spaces\u3002 Hugging Face Spaces \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u514d\u8d39\u200b\u6258\u7ba1\u200b\u60a8\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u7684\u200b\u57fa\u7840\u8bbe\u65bd\u200b\uff01</p> <p>\u200b\u5728\u200b\u60a8\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u514d\u8d39\u200b\u7684\u200b Hugging Face \u200b\u8d26\u6237\u200b\u540e\u200b\uff0c\u200b\u6709\u200b\u4e09\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u90e8\u7f72\u200b\u5230\u200b Hugging Face Spaces\uff1a</p> <ol> <li>\u200b\u4ece\u200b\u7ec8\u7aef\u200b\uff1a\u200b\u5728\u200b\u5e94\u7528\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u8fd0\u884c\u200b <code>gradio deploy</code>\u3002CLI \u200b\u5c06\u200b\u6536\u96c6\u200b\u4e00\u4e9b\u200b\u57fa\u672c\u200b\u5143\u200b\u6570\u636e\u200b\uff0c\u200b\u7136\u540e\u200b\u542f\u52a8\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u200b\u3002\u200b\u8981\u200b\u66f4\u65b0\u200b\u60a8\u200b\u7684\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u6b64\u200b\u547d\u4ee4\u200b\u6216\u200b\u542f\u7528\u200b Github Actions \u200b\u9009\u9879\u200b\uff0c\u200b\u5728\u200b <code>git push</code> \u200b\u65f6\u200b\u81ea\u52a8\u66f4\u65b0\u200b Spaces\u3002</li> <li>\u200b\u4ece\u200b\u6d4f\u89c8\u5668\u200b\uff1a\u200b\u5c06\u200b\u5305\u542b\u200b Gradio \u200b\u6a21\u578b\u200b\u548c\u200b\u6240\u6709\u200b\u76f8\u5173\u200b\u6587\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u62d6\u200b\u653e\u5230\u200b \u200b\u6b64\u5904\u200b\u3002</li> <li>\u200b\u5c06\u200b Spaces \u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b Git \u200b\u5b58\u50a8\u200b\u5e93\u200b\u8fde\u63a5\u200b\uff0cSpaces \u200b\u5c06\u200b\u4ece\u200b\u90a3\u91cc\u200b\u62c9\u53d6\u200b Gradio \u200b\u5e94\u7528\u200b\u3002\u200b\u6709\u5173\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b \u200b\u6b64\u200b\u6307\u5357\u200b\u5982\u4f55\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u6258\u7ba1\u200b\u3002</li> </ol>"},{"location":"cn/01_getting-started/03_sharing-your-app/#_3","title":"\u5d4c\u5165\u200b\u6258\u7ba1\u200b\u7684\u200b\u7a7a\u95f4","text":"<p>\u200b\u4e00\u65e6\u200b\u60a8\u200b\u5c06\u200b\u5e94\u7528\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Face Spaces\uff08\u200b\u6216\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\uff09\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5c06\u200b\u6f14\u793a\u200b\u5d4c\u5165\u200b\u5230\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\uff0c\u200b\u4f8b\u5982\u200b\u60a8\u200b\u7684\u200b\u535a\u5ba2\u200b\u6216\u200b\u4e2a\u4eba\u200b\u4f5c\u54c1\u96c6\u200b\u3002\u200b\u5d4c\u5165\u200b\u4ea4\u4e92\u5f0f\u200b\u6f14\u793a\u200b\u4f7f\u200b\u4eba\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u5c1d\u8bd5\u200b\u60a8\u200b\u6784\u5efa\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u4e0b\u8f7d\u200b\u6216\u200b\u5b89\u88c5\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\uff01\u200b\u6700\u597d\u200b\u7684\u200b\u90e8\u5206\u200b\u662f\u200b\uff0c\u200b\u60a8\u200b\u751a\u81f3\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4ea4\u4e92\u5f0f\u200b\u6f14\u793a\u200b\u5d4c\u5165\u200b\u5230\u200b\u9759\u6001\u200b\u7f51\u7ad9\u200b\u4e2d\u200b\uff0c\u200b\u4f8b\u5982\u200b GitHub \u200b\u9875\u9762\u200b\u3002</p> <p>\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5d4c\u5165\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b Hugging Face Space \u200b\u9875\u9762\u200b\u7684\u200b\u201c\u200b\u5d4c\u5165\u200b\u6b64\u200b\u7a7a\u95f4\u200b\u201d\u200b\u4e0b\u200b\u62c9\u200b\u9009\u9879\u200b\u4e2d\u200b\u76f4\u63a5\u200b\u627e\u5230\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u9009\u9879\u200b\u7684\u200b\u5feb\u901f\u200b\u94fe\u63a5\u200b\uff1a</p> <p></p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#web","title":"\u4f7f\u7528\u200b Web \u200b\u7ec4\u4ef6\u200b\u5d4c\u5165","text":"<p>\u200b\u4e0e\u200b IFrames \u200b\u76f8\u6bd4\u200b\uff0cWeb \u200b\u7ec4\u4ef6\u200b\u901a\u5e38\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u66f4\u597d\u200b\u7684\u200b\u4f53\u9a8c\u200b\u3002Web \u200b\u7ec4\u4ef6\u200b\u8fdb\u884c\u200b\u5ef6\u8fdf\u200b\u52a0\u8f7d\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5b83\u4eec\u200b\u4e0d\u4f1a\u200b\u51cf\u6162\u200b\u60a8\u200b\u7f51\u7ad9\u200b\u7684\u200b\u52a0\u8f7d\u200b\u65f6\u95f4\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5b83\u4eec\u200b\u4f1a\u200b\u6839\u636e\u200b Gradio \u200b\u5e94\u7528\u200b\u7684\u200b\u5927\u5c0f\u200b\u81ea\u52a8\u200b\u8c03\u6574\u200b\u5176\u200b\u9ad8\u5ea6\u200b\u3002</p> <p>\u200b\u8981\u200b\u4f7f\u7528\u200b Web \u200b\u7ec4\u4ef6\u200b\u5d4c\u5165\u200b\uff1a</p> <ol> <li> <p>\u200b\u901a\u8fc7\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u811a\u672c\u200b\u6765\u200b\u5bfc\u5165\u200b gradio JS \u200b\u5e93\u200b\uff08\u200b\u5728\u200b URL \u200b\u4e2d\u200b\u66ff\u6362\u200b{GRADIO_VERSION}\u200b\u4e3a\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b Gradio \u200b\u5e93\u200b\u7684\u200b\u7248\u672c\u200b\uff09\u3002</p> <pre><code>```html\n</code></pre> <p>&lt;script type=\"module\" src=\"https://gradio.s3-us-west-2.amazonaws.com/{GRADIO_VERSION}/gradio.js\"&gt; &lt;/script&gt; ```</p> </li> <li> <p>\u200b\u5728\u200b\u60a8\u200b\u60f3\u200b\u653e\u7f6e\u200b\u5e94\u7528\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u6dfb\u52a0\u200b     <code>html &amp;lt;gradio-app src=\"https://$your_space_host.hf.space\"&gt;&amp;lt;/gradio-app&gt;</code>     \u200b\u5143\u7d20\u200b\u3002\u200b\u5c06\u200b <code>src=</code> \u200b\u5c5e\u6027\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b Space \u200b\u7684\u200b\u5d4c\u5165\u200b URL\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u201c\u200b\u5d4c\u5165\u200b\u6b64\u200b\u7a7a\u95f4\u200b\u201d\u200b\u6309\u94ae\u200b\u4e2d\u200b\u627e\u5230\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>```html\n</code></pre> <p>&lt;gradio-app src=\"https://abidlabs-pytorch-image-classifier.hf.space\"&gt;&lt;/gradio-app&gt; ```</p> </li> </ol> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b Gradio \u200b\u9996\u9875\u200b  \u200b\u4e0a\u200b\u67e5\u770b\u200b Web \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>&lt;gradio-app&gt;</code> \u200b\u6807\u7b7e\u200b\u7684\u200b\u5c5e\u6027\u200b\u6765\u81ea\u200b\u5b9a\u4e49\u200b Web \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u5916\u89c2\u200b\u548c\u200b\u884c\u4e3a\u200b\uff1a</p> <ul> <li><code>src</code>\uff1a\u200b\u5982\u524d\u6240\u8ff0\u200b\uff0c<code>src</code> \u200b\u5c5e\u6027\u200b\u94fe\u63a5\u200b\u5230\u200b\u60a8\u200b\u60f3\u8981\u200b\u5d4c\u5165\u200b\u7684\u200b\u6258\u7ba1\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b URL</li> <li><code>space</code>\uff1a\u200b\u4e00\u4e2a\u200b\u53ef\u9009\u200b\u7684\u200b\u7f29\u5199\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Face Space \u200b\u4e0a\u200b\u3002\u200b\u63a5\u53d7\u200b <code>username/space_name</code> \u200b\u800c\u200b\u4e0d\u662f\u200b\u5b8c\u6574\u200b\u7684\u200b URL\u3002\u200b\u793a\u4f8b\u200b\uff1a<code>gradio/Echocardiogram-Segmentation</code>\u3002\u200b\u5982\u679c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u6b64\u200b\u5c5e\u6027\u200b\uff0c\u200b\u5219\u200b\u4e0d\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b <code>src</code>\u3002</li> <li><code>control_page_title</code>\uff1a\u200b\u4e00\u4e2a\u200b\u5e03\u5c14\u503c\u200b\uff0c\u200b\u6307\u5b9a\u200b\u662f\u5426\u200b\u5c06\u200b html \u200b\u6807\u9898\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b Gradio \u200b\u5e94\u7528\u200b\u7684\u200b\u6807\u9898\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"false\"</code>\uff09</li> <li><code>initial_height</code>\uff1a\u200b\u52a0\u8f7d\u200b Gradio \u200b\u5e94\u7528\u200b\u65f6\u200b Web \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u521d\u59cb\u200b\u9ad8\u5ea6\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"300px\"</code>\uff09\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6700\u7ec8\u200b\u9ad8\u5ea6\u200b\u662f\u200b\u6839\u636e\u200b Gradio \u200b\u5e94\u7528\u200b\u7684\u200b\u5927\u5c0f\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u3002</li> <li><code>container</code>\uff1a\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u8fb9\u6846\u200b\u6846\u67b6\u200b\u548c\u200b\u6709\u5173\u200b Space \u200b\u6258\u7ba1\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u4fe1\u606f\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"true\"</code>\uff09</li> <li><code>info</code>\uff1a\u200b\u662f\u5426\u200b\u4ec5\u200b\u663e\u793a\u200b\u6709\u5173\u200b Space \u200b\u6258\u7ba1\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u4fe1\u606f\u200b\u5728\u200b\u5d4c\u5165\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e0b\u65b9\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"true\"</code>\uff09</li> <li><code>autoscroll</code>\uff1a\u200b\u5728\u200b\u9884\u6d4b\u200b\u5b8c\u6210\u200b\u540e\u200b\u662f\u5426\u200b\u81ea\u52a8\u200b\u6eda\u52a8\u200b\u5230\u200b\u8f93\u51fa\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"false\"</code>\uff09</li> <li><code>eager</code>\uff1a\u200b\u5728\u200b\u9875\u9762\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u662f\u5426\u200b\u7acb\u5373\u200b\u52a0\u8f7d\u200b Gradio \u200b\u5e94\u7528\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"false\"</code>\uff09</li> <li><code>theme_mode</code>\uff1a\u200b\u662f\u5426\u200b\u4f7f\u7528\u200b <code>dark</code>\uff0c<code>light</code> \u200b\u6216\u200b\u9ed8\u8ba4\u200b\u7684\u200b <code>system</code> \u200b\u4e3b\u9898\u200b\u6a21\u5f0f\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>\"system\"</code>\uff09</li> </ul> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u5c5e\u6027\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u61d2\u200b\u52a0\u8f7d\u200b\u4e14\u200b\u521d\u59cb\u200b\u9ad8\u5ea6\u200b\u4e3a\u200b 0px \u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>&amp;lt;gradio-app space=\"gradio/Echocardiogram-Segmentation\" eager=\"true\"\ninitial_height=\"0px\"&gt;&amp;lt;/gradio-app&gt;\n</code></pre> <p>_ \u200b\u6ce8\u610f\u200b\uff1aGradio \u200b\u7684\u200b CSS \u200b\u6c38\u8fdc\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u5d4c\u5165\u200b\u9875\u9762\u200b\uff0c\u200b\u4f46\u200b\u5d4c\u5165\u200b\u9875\u9762\u200b\u53ef\u4ee5\u200b\u5f71\u54cd\u200b\u5d4c\u5165\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u7684\u200b\u6837\u5f0f\u200b\u3002\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u7236\u200b\u9875\u9762\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b CSS \u200b\u4e0d\u662f\u200b\u5982\u6b64\u200b\u901a\u7528\u200b\uff0c\u200b\u4ee5\u81f3\u4e8e\u200b\u5b83\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u9002\u7528\u200b\u4e8e\u200b\u5d4c\u5165\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u5e76\u200b\u5bfc\u81f4\u200b\u6837\u5f0f\u200b\u7834\u88c2\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5143\u7d20\u200b\u9009\u62e9\u5668\u200b\u5982\u200b <code>header { ... }</code> \u200b\u548c\u200b <code>footer { ... }</code> \u200b\u6700\u200b\u53ef\u80fd\u200b\u5f15\u8d77\u200b\u95ee\u9898\u200b\u3002_</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#iframes","title":"\u4f7f\u7528\u200b IFrames \u200b\u5d4c\u5165","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u65e0\u6cd5\u200b\u5411\u200b\u7f51\u7ad9\u200b\u6dfb\u52a0\u200b javascript\uff08\u200b\u4f8b\u5982\u200b\uff09\uff0c\u200b\u5219\u200b\u53ef\u4ee5\u200b\u6539\u4e3a\u200b\u4f7f\u7528\u200b IFrames \u200b\u8fdb\u884c\u200b\u5d4c\u5165\u200b\uff0c\u200b\u8bf7\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u5143\u7d20\u200b\uff1a</p> <pre><code>&amp;lt;iframe src=\"https://$your_space_host.hf.space\"&gt;&amp;lt;/iframe&gt;\n</code></pre> <p>\u200b\u540c\u6837\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u201c\u200b\u5d4c\u5165\u200b\u6b64\u200b\u7a7a\u95f4\u200b\u201d\u200b\u6309\u94ae\u200b\u4e2d\u200b\u627e\u5230\u200b\u60a8\u200b\u7684\u200b Space \u200b\u7684\u200b\u5d4c\u5165\u200b URL \u200b\u7684\u200b <code>src=</code> \u200b\u5c5e\u6027\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b IFrames\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u56fa\u5b9a\u200b\u7684\u200b <code>height</code> \u200b\u5c5e\u6027\u200b\uff0c\u200b\u5e76\u200b\u8bbe\u7f6e\u200b <code>style=\"border:0;\"</code> \u200b\u4ee5\u200b\u53bb\u9664\u200b\u8fb9\u6846\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u9700\u8981\u200b\u8bf8\u5982\u200b\u8bbf\u95ee\u200b\u6444\u50cf\u5934\u200b\u6216\u200b\u9ea6\u514b\u98ce\u200b\u4e4b\u7c7b\u200b\u7684\u200b\u6743\u9650\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b <code>allow</code> \u200b\u5c5e\u6027\u200b\u63d0\u4f9b\u200b\u5b83\u4eec\u200b\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#api","title":"API \u200b\u9875\u9762","text":"<p>$demo_hello_world</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u70b9\u51fb\u200b\u5e76\u200b\u6253\u5f00\u200b\u4e0a\u9762\u200b\u7684\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u60a8\u200b\u4f1a\u200b\u5728\u200b\u5e94\u7528\u200b\u7684\u200b\u9875\u811a\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u201c\u200b\u901a\u8fc7\u200b API \u200b\u4f7f\u7528\u200b\u201d\u200b\u94fe\u63a5\u200b\u3002</p> <p></p> <p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u6587\u6863\u200b\u9875\u9762\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u4e86\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u7684\u200b REST API \u200b\u6765\u200b\u67e5\u8be2\u200b\u201cInterface\u201d\u200b\u51fd\u6570\u200b\u3002<code>Blocks</code> \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u751f\u6210\u200b API \u200b\u9875\u9762\u200b\uff0c\u200b\u4f46\u200b\u5fc5\u987b\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u663e\u5f0f\u200b\u547d\u540d\u200b API\uff0c\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>btn.click(add, [num1, num2], output, api_name=\"addition\")\n</code></pre> <p>\u200b\u8fd9\u200b\u5c06\u200b\u8bb0\u5f55\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u7684\u200b API \u200b\u9875\u9762\u200b\u7684\u200b\u7aef\u70b9\u200b <code>/api/addition/</code>\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5bf9\u4e8e\u200b\u542f\u7528\u200b\u4e86\u200b\u961f\u5217\u200b\u529f\u80fd\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5982\u679c\u200b\u7528\u6237\u200b\u5411\u200b\u60a8\u200b\u7684\u200b API \u200b\u7aef\u70b9\u200b\u53d1\u51fa\u200b POST \u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u53ef\u4ee5\u200b\u7ed5\u8fc7\u200b\u961f\u5217\u200b\u3002\u200b\u8981\u200b\u7981\u7528\u200b\u6b64\u200b\u884c\u4e3a\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b <code>queue()</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>api_open=False</code>\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#_4","title":"\u9274\u6743","text":"<p>\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u524d\u9762\u200b\u653e\u7f6e\u200b\u4e00\u4e2a\u200b\u9274\u6743\u200b\u9875\u9762\u200b\uff0c\u200b\u4ee5\u200b\u9650\u5236\u200b\u8c01\u200b\u53ef\u4ee5\u200b\u6253\u5f00\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u4f7f\u7528\u200b <code>launch()</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7684\u200b <code>auth=</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u7528\u6237\u540d\u200b\u548c\u200b\u5bc6\u7801\u200b\u7684\u200b\u5143\u7ec4\u200b\uff0c\u200b\u6216\u8005\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u63a5\u53d7\u200b\u7684\u200b\u7528\u6237\u540d\u200b / \u200b\u5bc6\u7801\u200b\u5143\u7ec4\u200b\u5217\u8868\u200b\uff1b\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e3a\u200b\u5355\u4e2a\u200b\u540d\u4e3a\u200b\u201cadmin\u201d\u200b\u7684\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u57fa\u4e8e\u200b\u5bc6\u7801\u200b\u7684\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>demo.launch(auth=(\"admin\", \"pass1234\"))\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u5904\u7406\u200b\uff0c\u200b\u60a8\u200b\u751a\u81f3\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u4e00\u4e2a\u200b\u4ee5\u200b\u7528\u6237\u540d\u200b\u548c\u200b\u5bc6\u7801\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b True \u200b\u4ee5\u200b\u5141\u8bb8\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\uff0c\u200b\u5426\u5219\u200b\u8fd4\u56de\u200b False\u3002\u200b\u8fd9\u200b\u53ef\u200b\u7528\u4e8e\u200b\u8bbf\u95ee\u200b\u7b2c\u4e09\u65b9\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u670d\u52a1\u200b\u7b49\u200b\u5176\u4ed6\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u63a5\u53d7\u200b\u4efb\u4f55\u200b\u7528\u6237\u540d\u200b\u548c\u200b\u5bc6\u7801\u200b\u76f8\u540c\u200b\u7684\u200b\u767b\u5f55\u200b\u7684\u200b\u51fd\u6570\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>def same_auth(username, password):\n    return username == password\ndemo.launch(auth=same_auth)\n</code></pre> <p>\u200b\u4e3a\u4e86\u200b\u4f7f\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u5fc5\u987b\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u542f\u7528\u200b\u7b2c\u4e09\u65b9\u200b Cookie\u3002 \u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0cSafari\u3001Chrome \u200b\u9690\u79c1\u200b\u6a21\u5f0f\u200b\u4e0d\u4f1a\u200b\u542f\u7528\u200b\u6b64\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#_5","title":"\u76f4\u63a5\u200b\u8bbf\u95ee\u200b\u7f51\u7edc\u200b\u8bf7\u6c42","text":"<p>\u200b\u5f53\u200b\u7528\u6237\u200b\u5411\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u5e95\u5c42\u200b\u7684\u200b\u7f51\u7edc\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4ee5\u200b\u83b7\u53d6\u200b\u8bf7\u6c42\u200b\u6807\u5934\u200b\uff08\u200b\u4f8b\u5982\u200b\u7528\u4e8e\u200b\u9ad8\u7ea7\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\uff09\u3001\u200b\u8bb0\u5f55\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b IP \u200b\u5730\u5740\u200b\u6216\u200b\u5176\u4ed6\u200b\u539f\u56e0\u200b\u3002Gradio \u200b\u652f\u6301\u200b\u4e0e\u200b FastAPI \u200b\u7c7b\u4f3c\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff1a\u200b\u53ea\u200b\u9700\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u4e3a\u200b <code>gr.Request</code> \u200b\u7684\u200b\u51fd\u6570\u53c2\u6570\u200b\uff0cGradio \u200b\u5c06\u200b\u5c06\u200b\u7f51\u7edc\u200b\u8bf7\u6c42\u200b\u4f5c\u4e3a\u200b\u8be5\u200b\u53c2\u6570\u4f20\u9012\u200b\u8fdb\u6765\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>import gradio as gr\n\ndef echo(name, request: gr.Request):\n    if request:\n        print(\"Request headers dictionary:\", request.headers)\n        print(\"IP address:\", request.client.host)\n    return name\n\nio = gr.Interface(echo, \"textbox\", \"textbox\").launch()\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5982\u679c\u200b\u76f4\u63a5\u200b\u8c03\u7528\u51fd\u6570\u200b\u800c\u200b\u4e0d\u662f\u200b\u901a\u8fc7\u200b UI\uff08\u200b\u4f8b\u5982\u200b\u5728\u200b\u7f13\u5b58\u200b\u793a\u4f8b\u200b\u65f6\u200b\uff09\uff0c\u200b\u5219\u200b <code>request</code> \u200b\u5c06\u200b\u4e3a\u200b <code>None</code>\u3002\u200b\u60a8\u200b\u5e94\u8be5\u200b\u660e\u786e\u200b\u5904\u7406\u200b\u6b64\u200b\u60c5\u51b5\u200b\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e0d\u4f1a\u200b\u629b\u51fa\u200b\u4efb\u4f55\u200b\u9519\u8bef\u200b\u3002\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u6709\u200b\u663e\u5f0f\u200b\u68c0\u67e5\u200b <code>if request</code>\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#fastapi","title":"\u5d4c\u5165\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b FastAPI \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d","text":"<p>\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5df2\u7ecf\u200b\u6709\u200b\u4e00\u4e2a\u200b\u73b0\u6709\u200b\u7684\u200b FastAPI \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u60f3\u8981\u200b\u4e3a\u200b Gradio \u200b\u6f14\u793a\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u8def\u5f84\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gradio.mount_gradio_app()</code> \u200b\u6765\u200b\u8f7b\u677e\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u76ee\u7684\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <p>$code_custom_path</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5728\u200b\u81ea\u5b9a\u4e49\u200b\u8def\u5f84\u200b\u4e0a\u200b\u8fd0\u884c\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff08\u200b\u4f8b\u5982\u200b\u4e0a\u9762\u200b\u7684\u200b <code>http://localhost:8000/gradio</code>\uff09\u3002</p>"},{"location":"cn/01_getting-started/03_sharing-your-app/#_6","title":"\u5b89\u5168\u6027\u200b\u548c\u200b\u6587\u4ef6\u200b\u8bbf\u95ee","text":"<p>\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5171\u4eab\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff08\u200b\u901a\u8fc7\u200b Spaces\u3001\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u6216\u200b\u4e34\u65f6\u200b\u5171\u4eab\u200b\u94fe\u63a5\u200b\u8fdb\u884c\u200b\u6258\u7ba1\u200b\uff09\u200b\u5c06\u200b\u4e3b\u673a\u200b\u673a\u5668\u200b\u4e0a\u200b\u7684\u200b\u67d0\u4e9b\u200b\u6587\u4ef6\u200b\u66b4\u9732\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u7528\u6237\u200b\u3002</p> <p>\u200b\u7279\u522b\u200b\u662f\u200b\uff0cGradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u8bbf\u95ee\u200b\u4ee5\u4e0b\u200b\u4e09\u7c7b\u200b\u6587\u4ef6\u200b\uff1a</p> <ul> <li> <p>\u200b\u4e0e\u200b Gradio \u200b\u811a\u672c\u200b\u6240\u5728\u200b\u76ee\u5f55\u200b\uff08\u200b\u6216\u200b\u5b50\u76ee\u5f55\u200b\uff09\u200b\u4e2d\u200b\u7684\u200b\u6587\u4ef6\u200b\u76f8\u540c\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u811a\u672c\u200b\u7684\u200b\u8def\u5f84\u200b\u662f\u200b <code>/home/usr/scripts/project/app.py</code>\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u4ece\u200b <code>/home/usr/scripts/project/</code> \u200b\u542f\u52a8\u200b\u5b83\u200b\uff0c\u200b\u5219\u200b\u5171\u4eab\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u7528\u6237\u200b\u5c06\u200b\u80fd\u591f\u200b\u8bbf\u95ee\u200b <code>/home/usr/scripts/project/</code> \u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u6587\u4ef6\u200b\u3002\u200b\u8fd9\u6837\u200b\u505a\u200b\u662f\u200b\u4e3a\u4e86\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u8f7b\u677e\u200b\u5f15\u7528\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\uff08\u200b\u4f8b\u5982\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u201c\u200b\u793a\u4f8b\u200b\u201d\uff09\u3002</p> </li> <li> <p>Gradio \u200b\u521b\u5efa\u200b\u7684\u200b\u4e34\u65f6\u6587\u4ef6\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u662f\u200b\u7531\u200b Gradio \u200b\u4f5c\u4e3a\u200b\u8fd0\u884c\u200b\u60a8\u200b\u7684\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u521b\u5efa\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u6587\u4ef6\u200b\uff0c\u200b\u5219\u200b Gradio \u200b\u5c06\u200b\u8be5\u200b\u89c6\u9891\u200b\u4fdd\u5b58\u200b\u5230\u200b\u4e34\u65f6\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u4e34\u65f6\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u53d1\u9001\u5230\u200b\u524d\u7aef\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b <code>GRADIO_TEMP_DIR</code> \u200b\u4e3a\u200b\u7edd\u5bf9\u8def\u5f84\u200b\uff08\u200b\u4f8b\u5982\u200b <code>/home/usr/scripts/project/temp/</code>\uff09\u200b\u6765\u81ea\u200b\u5b9a\u4e49\u200b Gradio \u200b\u521b\u5efa\u200b\u7684\u200b\u4e34\u65f6\u6587\u4ef6\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b <code>launch()</code> \u200b\u4e2d\u200b\u7684\u200b <code>allowed_paths</code> \u200b\u53c2\u6570\u200b\u5141\u8bb8\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002 \u200b\u6b64\u53c2\u6570\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4f20\u9012\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u5176\u4ed6\u200b\u76ee\u5f55\u200b\u6216\u200b\u786e\u5207\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u4ee5\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u8bbf\u95ee\u200b\u5b83\u4eec\u200b\u3002\uff08\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6b64\u53c2\u6570\u200b\u4e3a\u7a7a\u200b\u5217\u8868\u200b\uff09\u3002</p> </li> </ul> <p>Gradio\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u8bbf\u95ee\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a</p> <ul> <li> <p>\u200b\u70b9\u200b\u6587\u4ef6\u200b\uff08\u200b\u5176\u200b\u540d\u79f0\u200b\u4ee5\u200b '.' \u200b\u5f00\u5934\u200b\u7684\u200b\u4efb\u4f55\u200b\u6587\u4ef6\u200b\uff09\u200b\u6216\u200b\u5176\u200b\u540d\u79f0\u200b\u4ee5\u200b '.' \u200b\u5f00\u5934\u200b\u7684\u200b\u4efb\u4f55\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u6587\u4ef6\u200b\u3002</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b <code>launch()</code> \u200b\u4e2d\u200b\u7684\u200b <code>blocked_paths</code> \u200b\u53c2\u6570\u200b\u5141\u8bb8\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u4ed6\u200b\u76ee\u5f55\u200b\u6216\u200b\u786e\u5207\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u7684\u200b\u5217\u8868\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>launch()</code> \u200b\u4e2d\u200b\u7684\u200b <code>blocked_paths</code> \u200b\u53c2\u6570\u200b\u3002\u200b\u6b64\u53c2\u6570\u200b\u4f18\u5148\u200b\u4e8e\u200b Gradio \u200b\u9ed8\u8ba4\u200b\u6216\u200b <code>allowed_paths</code> \u200b\u5141\u8bb8\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002</p> </li> <li> <p>\u200b\u4e3b\u673a\u200b\u673a\u5668\u200b\u4e0a\u200b\u7684\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u8def\u5f84\u200b\u3002\u200b\u7528\u6237\u200b\u4e0d\u200b\u5e94\u200b\u80fd\u591f\u200b\u8bbf\u95ee\u200b\u4e3b\u673a\u200b\u4e0a\u200b\u7684\u200b\u5176\u4ed6\u200b\u4efb\u610f\u200b\u8def\u5f84\u200b\u3002</p> </li> </ul> <p>\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200b <code>gradio</code>\uff0c\u200b\u4ee5\u200b\u4f7f\u200b\u8fd9\u4e9b\u200b\u5b89\u5168\u200b\u8bbe\u7f6e\u200b\u751f\u6548\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/01_interface-state/","title":"\u63a5\u53e3\u200b\u72b6\u6001\u200b (Interface State)","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u4e86\u200b Gradio \u200b\u4e2d\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u72b6\u6001\u200b\u3002\u200b\u4e86\u89e3\u200b\u5168\u5c40\u200b\u72b6\u6001\u200b\u548c\u200b\u4f1a\u200b\u8bdd\u200b\u72b6\u6001\u200b\u7684\u200b\u533a\u522b\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u540c\u65f6\u200b\u4f7f\u7528\u200b\u5b83\u4eec\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/01_interface-state/#global-state","title":"\u5168\u5c40\u200b\u72b6\u6001\u200b (Global State)","text":"<p>\u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200b\u8d85\u51fa\u200b\u5355\u4e2a\u200b\u51fd\u6570\u8c03\u7528\u200b\u7684\u200b\u6301\u4e45\u6027\u200b\u6570\u636e\u200b\u3002\u200b\u5982\u679c\u200b\u6570\u636e\u200b\u662f\u200b\u6240\u6709\u200b\u51fd\u6570\u8c03\u7528\u200b\u548c\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u90fd\u200b\u53ef\u200b\u8bbf\u95ee\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u51fd\u6570\u8c03\u7528\u200b\u5916\u90e8\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u51fd\u6570\u200b\u5185\u90e8\u200b\u8bbf\u95ee\u200b\u5b83\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u51fd\u6570\u200b\u5916\u90e8\u200b\u52a0\u8f7d\u200b\u4e00\u4e2a\u200b\u5927\u200b\u6a21\u578b\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u51fd\u6570\u200b\u5185\u90e8\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u8c03\u7528\u200b\u90fd\u200b\u4e0d\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u3002</p> <p>$code_score_tracker</p> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c'scores' \u200b\u6570\u7ec4\u200b\u5728\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u3002\u200b\u5982\u679c\u200b\u591a\u4e2a\u200b\u7528\u6237\u200b\u8bbf\u95ee\u200b\u6b64\u200b\u6f14\u793a\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u7684\u200b\u5f97\u5206\u200b\u5c06\u200b\u5168\u90e8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u540c\u4e00\u200b\u5217\u8868\u200b\u4e2d\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd4\u56de\u200b\u7684\u200b\u524d\u200b 3 \u200b\u4e2a\u200b\u5f97\u5206\u200b\u5c06\u200b\u4ece\u6b64\u200b\u5171\u4eab\u200b\u5f15\u7528\u200b\u4e2d\u200b\u6536\u96c6\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/01_interface-state/#global-state_1","title":"\u5168\u5c40\u200b\u72b6\u6001\u200b (Global State)","text":"<p>Gradio \u200b\u652f\u6301\u200b\u7684\u200b\u53e6\u200b\u4e00\u79cd\u200b\u6570\u636e\u200b\u6301\u4e45\u6027\u200b\u662f\u200b\u4f1a\u200b\u8bdd\u200b\u72b6\u6001\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6570\u636e\u200b\u5728\u200b\u9875\u9762\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u7684\u200b\u591a\u4e2a\u200b\u63d0\u4ea4\u200b\u4e4b\u95f4\u200b\u6301\u4e45\u200b\u5b58\u5728\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7528\u6237\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u636e\u200b\u4e0d\u200b\u5171\u4eab\u200b\u3002\u200b\u8981\u200b\u5c06\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u5728\u200b\u4f1a\u200b\u8bdd\u200b\u72b6\u6001\u200b\u4e2d\u200b\uff0c\u200b\u9700\u8981\u200b\u6267\u884c\u200b\u4ee5\u4e0b\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u5c06\u200b\u989d\u5916\u200b\u7684\u200b\u53c2\u6570\u4f20\u9012\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u8868\u793a\u200b\u63a5\u53e3\u200b\u7684\u200b\u72b6\u6001\u200b\u3002</li> <li>\u200b\u5728\u200b\u51fd\u6570\u200b\u7684\u200b\u672b\u5c3e\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u989d\u5916\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u8fd4\u56de\u200b\u72b6\u6001\u200b\u7684\u200b\u66f4\u65b0\u200b\u503c\u200b\u3002</li> <li>\u200b\u5728\u200b\u521b\u5efa\u200b\u754c\u9762\u200b\u65f6\u200b\u6dfb\u52a0\u200b <code>'state'</code> \u200b\u8f93\u5165\u200b\u548c\u200b <code>'state'</code> \u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u3002</li> </ol> <p>\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u4f1a\u8bdd\u200b\u72b6\u6001\u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b - \u200b\u60a8\u200b\u5e0c\u671b\u200b\u8bbf\u95ee\u200b\u7528\u6237\u200b\u4e4b\u524d\u200b\u7684\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u80fd\u200b\u5c06\u200b\u804a\u5929\u8bb0\u5f55\u200b\u5b58\u50a8\u200b\u5728\u200b\u5168\u5c40\u53d8\u91cf\u200b\u4e2d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u6837\u200b\u804a\u5929\u8bb0\u5f55\u200b\u4f1a\u200b\u5728\u200b\u4e0d\u540c\u200b\u7528\u6237\u200b\u4e4b\u95f4\u200b\u6df7\u4e71\u200b\u3002</p> <p>$code_chatbot_dialogpt $demo_chatbot_dialogpt</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u9875\u9762\u200b\u4e2d\u200b\uff0c\u200b\u72b6\u6001\u200b\u5728\u200b\u63d0\u4ea4\u200b\u4e4b\u95f4\u200b\u4fdd\u6301\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6807\u7b7e\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u6b64\u200b\u6f14\u793a\u200b\uff08\u200b\u6216\u200b\u5237\u65b0\u200b\u9875\u9762\u200b\uff09\uff0c\u200b\u6f14\u793a\u200b\u5c06\u200b\u4e0d\u200b\u5171\u4eab\u200b\u804a\u5929\u8bb0\u5f55\u200b\u3002</p> <p><code>state</code> \u200b\u7684\u200b\u9ed8\u8ba4\u503c\u200b\u4e3a\u200b None\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u5c06\u200b\u9ed8\u8ba4\u503c\u200b\u4f20\u9012\u200b\u7ed9\u200b\u51fd\u6570\u200b\u7684\u200b\u72b6\u6001\u53c2\u6570\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u9ed8\u8ba4\u503c\u200b\u5c06\u200b\u7528\u4f5c\u200b\u72b6\u6001\u200b\u7684\u200b\u9ed8\u8ba4\u503c\u200b\u3002<code>Interface</code> \u200b\u7c7b\u4ec5\u200b\u652f\u6301\u200b\u5355\u4e2a\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u72b6\u6001\u53d8\u91cf\u200b\uff0c\u200b\u4f46\u200b\u53ef\u4ee5\u200b\u662f\u200b\u5177\u6709\u200b\u591a\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u5217\u8868\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u7528\u4f8b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Blocks\uff0c\u200b\u5b83\u200b\u652f\u6301\u200b\u591a\u4e2a\u200b <code>State</code> \u200b\u53d8\u91cf\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/02_reactive-interfaces/","title":"\u53cd\u5e94\u5f0f\u200b\u754c\u9762\u200b (Reactive Interfaces)","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u4f55\u200b\u4f7f\u200b Gradio \u200b\u754c\u9762\u200b\u81ea\u52a8\u200b\u5237\u65b0\u200b\u6216\u200b\u8fde\u7eed\u200b\u6d41\u5f0f\u200b\u4f20\u8f93\u6570\u636e\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/02_reactive-interfaces/#live-interfaces","title":"\u5b9e\u65f6\u200b\u754c\u9762\u200b (Live Interfaces)","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u754c\u9762\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>live=True</code> \u200b\u6765\u200b\u4f7f\u200b\u754c\u9762\u200b\u81ea\u52a8\u200b\u5237\u65b0\u200b\u3002\u200b\u73b0\u5728\u200b\uff0c\u200b\u53ea\u8981\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u53d1\u751f\u53d8\u5316\u200b\uff0c\u200b\u754c\u9762\u200b\u5c31\u200b\u4f1a\u200b\u91cd\u65b0\u200b\u8ba1\u7b97\u200b\u3002</p> <p>$code_calculator_live $demo_calculator_live</p> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u754c\u9762\u200b\u5728\u200b\u66f4\u6539\u200b\u65f6\u4f1a\u200b\u81ea\u52a8\u200b\u91cd\u65b0\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6ca1\u6709\u200b\u63d0\u4ea4\u200b\u6309\u94ae\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/02_reactive-interfaces/#streaming-components","title":"\u6d41\u5f0f\u200b\u7ec4\u4ef6\u200b (Streaming Components)","text":"<p>\u200b\u67d0\u4e9b\u200b\u7ec4\u4ef6\u200b\u5177\u6709\u200b\u201c\u200b\u6d41\u5f0f\u200b\u201d\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6bd4\u5982\u200b\u9ea6\u514b\u98ce\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u7684\u200b <code>Audio</code> \u200b\u7ec4\u4ef6\u200b\u6216\u200b\u7f51\u7edc\u200b\u6444\u50cf\u5934\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u7684\u200b <code>Image</code> \u200b\u7ec4\u4ef6\u200b\u3002\u200b\u6d41\u5f0f\u200b\u4f20\u8f93\u200b\u610f\u5473\u7740\u200b\u6570\u636e\u200b\u4f1a\u200b\u6301\u7eed\u200b\u53d1\u9001\u5230\u200b\u540e\u200b\u7aef\u200b\uff0c\u200b\u5e76\u4e14\u200b <code>Interface</code> \u200b\u51fd\u6570\u200b\u4f1a\u200b\u6301\u7eed\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u3002</p> <p>\u200b\u5f53\u200b\u5728\u200b <code>gr.Interface(live=True)</code> \u200b\u4e2d\u200b\u540c\u65f6\u200b\u4f7f\u7528\u200b <code>gr.Audio(sources=['microphone'])</code> \u200b\u548c\u200b <code>gr.Audio(sources=['microphone'], streaming=True)</code> \u200b\u65f6\u200b\uff0c\u200b\u4e24\u8005\u200b\u7684\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\u7b2c\u4e00\u4e2a\u200b <code>Component</code> \u200b\u4f1a\u200b\u5728\u200b\u7528\u6237\u200b\u505c\u6b62\u200b\u5f55\u5236\u200b\u65f6\u200b\u81ea\u52a8\u200b\u63d0\u4ea4\u200b\u6570\u636e\u200b\u5e76\u200b\u8fd0\u884c\u200b <code>Interface</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u800c\u200b\u7b2c\u4e8c\u4e2a\u200b <code>Component</code> \u200b\u4f1a\u200b\u5728\u200b\u5f55\u5236\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u6301\u7eed\u200b\u53d1\u9001\u6570\u636e\u200b\u5e76\u200b\u8fd0\u884c\u200b <code>Interface</code> \u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u4ece\u200b\u7f51\u7edc\u200b\u6444\u50cf\u5934\u200b\u5b9e\u65f6\u200b\u6d41\u5f0f\u200b\u4f20\u8f93\u200b\u56fe\u50cf\u200b\u7684\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b\u3002</p> <p>$code_stream_frames</p>"},{"location":"cn/02_building-interfaces/03_more-on-examples/","title":"\u66f4\u200b\u591a\u200b\u793a\u4f8b\u200b (More on Examples)","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u6709\u5173\u200b\u793a\u4f8b\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u5185\u5bb9\u200b\uff1a\u200b\u4ece\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u793a\u4f8b\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u90e8\u5206\u200b\u793a\u4f8b\u200b\u548c\u200b\u7f13\u5b58\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u5bf9\u200b\u793a\u4f8b\u200b\u8fd8\u200b\u4e0d\u200b\u719f\u6089\u200b\uff0c\u200b\u8bf7\u200b\u67e5\u770b\u200b \u200b\u5173\u952e\u200b\u7279\u6027\u200b \u200b\u6307\u5357\u200b\u4e2d\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/03_more-on-examples/#providing-examples","title":"\u63d0\u4f9b\u200b\u793a\u4f8b\u200b (Providing Examples)","text":"<p>\u200b\u6b63\u5982\u200b \u200b\u5173\u952e\u200b\u7279\u6027\u200b \u200b\u6307\u5357\u200b\u4e2d\u200b\u6240\u200b\u4ecb\u7ecd\u200b\u7684\u200b\uff0c\u200b\u5411\u200b\u63a5\u53e3\u200b\u6dfb\u52a0\u200b\u793a\u4f8b\u200b\u5c31\u200b\u50cf\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\u7684\u200b\u5217\u8868\u200b\u7ed9\u200b <code>examples</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u4e00\u6837\u200b\u7b80\u5355\u200b\u3002 \u200b\u6bcf\u4e2a\u200b\u5b50\u200b\u5217\u8868\u200b\u90fd\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u6837\u672c\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u7684\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u3002 \u200b\u8f93\u5165\u200b\u5fc5\u987b\u200b\u6309\u7167\u200b\u4e0e\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u671f\u671b\u200b\u7684\u200b\u987a\u5e8f\u200b\u6392\u5e8f\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u63a5\u53e3\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u90a3\u4e48\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u793a\u4f8b\u200b\u63d0\u4f9b\u200b\u4e3a\u200b\u5e38\u89c4\u200b\u5217\u8868\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5217\u8868\u200b\u7684\u200b\u5217\u8868\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/03_more-on-examples/#loading-examples-from-a-directory","title":"\u4ece\u200b\u76ee\u5f55\u200b\u52a0\u8f7d\u200b\u793a\u4f8b\u200b (Loading Examples from a Directory)","text":"<p>\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6307\u5b9a\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u793a\u4f8b\u200b\u7684\u200b\u76ee\u5f55\u200b\u8def\u5f84\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u63a5\u53e3\u200b\u53ea\u200b\u63a5\u53d7\u200b\u5355\u4e2a\u200b\u6587\u4ef6\u7c7b\u578b\u200b\u7684\u200b\u8f93\u5165\u200b\uff08\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b\uff09\uff0c\u200b\u4f60\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>examples=</code> \u200b\u53c2\u6570\u200b\uff0c<code>Interface</code> \u200b\u5c06\u200b\u52a0\u8f7d\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u56fe\u50cf\u200b\u4f5c\u4e3a\u200b\u793a\u4f8b\u200b\u3002 \u200b\u5bf9\u4e8e\u200b\u591a\u4e2a\u200b\u8f93\u5165\u200b\uff0c\u200b\u8be5\u200b\u76ee\u5f55\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u793a\u4f8b\u200b\u503c\u200b\u7684\u200b log.csv \u200b\u6587\u4ef6\u200b\u3002 \u200b\u5728\u200b\u8ba1\u7b97\u5668\u200b\u6f14\u793a\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b <code>examples='/demo/calculator/examples'</code> \uff0c\u200b\u5728\u200b\u8be5\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u200b <code>log.csv</code> \u200b\u6587\u4ef6\u200b\uff1a contain a log.csv file with the example values. In the context of the calculator demo, we can set <code>examples='/demo/calculator/examples'</code> and in that directory we include the following <code>log.csv</code> file:</p> <pre><code>num,operation,num2\n5,\"add\",3\n4,\"divide\",2\n5,\"multiply\",3\n</code></pre> <p>\u200b\u5f53\u200b\u6d4f\u89c8\u200b\u6807\u8bb0\u200b\u6570\u636e\u200b\u65f6\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u3002\u200b\u53ea\u200b\u9700\u200b\u6307\u5411\u200b\u6807\u8bb0\u200b\u76ee\u5f55\u200b\uff0c<code>Interface</code> \u200b\u5c06\u200b\u4ece\u200b\u6807\u8bb0\u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u793a\u4f8b\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/03_more-on-examples/#_1","title":"\u63d0\u4f9b\u200b\u90e8\u5206\u200b\u793a\u4f8b","text":"<p>\u200b\u6709\u65f6\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6709\u200b\u8bb8\u591a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f46\u200b\u4f60\u200b\u53ea\u200b\u60f3\u200b\u4e3a\u200b\u5176\u4e2d\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u63d0\u4f9b\u200b\u793a\u4f8b\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5728\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u6392\u9664\u200b\u67d0\u4e9b\u200b\u8f93\u5165\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u90a3\u4e9b\u200b\u7279\u5b9a\u200b\u8f93\u5165\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u6837\u672c\u200b\u90fd\u200b\u4f20\u9012\u200b <code>None</code>\u3002</p>"},{"location":"cn/02_building-interfaces/03_more-on-examples/#caching-examples","title":"\u793a\u4f8b\u200b\u7f13\u5b58\u200b (Caching examples)","text":"<p>\u200b\u4f60\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e00\u4e9b\u200b\u6a21\u578b\u200b\u7684\u200b\u7f13\u5b58\u200b\u793a\u4f8b\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4ed6\u4eec\u200b\u53ef\u4ee5\u200b\u5feb\u901f\u200b\u5c1d\u8bd5\u200b\uff0c\u200b\u4ee5\u9632\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u8f83\u957f\u200b\u3002 \u200b\u5982\u679c\u200b <code>cache_examples=True</code> \uff0c\u200b\u5f53\u200b\u4f60\u200b\u8c03\u7528\u200b <code>launch()</code> \u200b\u65b9\u6cd5\u200b\u65f6\u200b\uff0c<code>Interface</code> \u200b\u5c06\u200b\u8fd0\u884c\u200b\u6240\u6709\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5e76\u200b\u4fdd\u5b58\u200b\u8f93\u51fa\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u6570\u636e\u200b\u5c06\u200b\u4fdd\u5b58\u200b\u5728\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b <code>gradio_cached_examples</code> \u200b\u7684\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u6bcf\u5f53\u200b\u7528\u6237\u200b\u70b9\u51fb\u200b\u793a\u4f8b\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u5c06\u200b\u81ea\u52a8\u200b\u586b\u5145\u200b\u5230\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u7528\u200b\u6765\u81ea\u200b\u8be5\u200b\u7f13\u5b58\u200b\u76ee\u5f55\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5b9e\u9645\u200b\u8fd0\u884c\u200b\u51fd\u6570\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5feb\u901f\u200b\u5c1d\u8bd5\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u800c\u200b\u4e0d\u200b\u589e\u52a0\u200b\u4efb\u4f55\u200b\u8d1f\u8f7d\u200b\u662f\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u7684\u200b\uff01</p> <p>\u200b\u8bf7\u200b\u8bb0\u4f4f\u200b\u4e00\u65e6\u200b\u751f\u6210\u200b\u4e86\u200b\u7f13\u5b58\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u5728\u200b\u4ee5\u540e\u200b\u7684\u200b\u542f\u52a8\u200b\u4e2d\u200b\u66f4\u65b0\u200b\u3002\u200b\u5982\u679c\u200b\u793a\u4f8b\u200b\u6216\u200b\u51fd\u6570\u200b\u903b\u8f91\u200b\u53d1\u751f\u200b\u66f4\u6539\u200b\uff0c\u200b\u8bf7\u200b\u5220\u9664\u200b\u7f13\u5b58\u200b\u6587\u4ef6\u5939\u200b\u4ee5\u200b\u6e05\u9664\u200b\u7f13\u5b58\u200b\u5e76\u200b\u4f7f\u7528\u200b\u53e6\u200b\u4e00\u4e2a\u200b <code>launch()</code> \u200b\u91cd\u65b0\u200b\u6784\u5efa\u200b\u5b83\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/04_advanced-interface-features/","title":"\u9ad8\u7ea7\u200b\u63a5\u53e3\u200b\u7279\u6027","text":"<p>\u200b\u5728\u200b\u63a5\u53e3\u200b Interface\u200b\u7c7b\u4e0a\u200b\u8fd8\u6709\u200b\u66f4\u200b\u591a\u200b\u5185\u5bb9\u200b\u9700\u8981\u200b\u4ecb\u7ecd\u200b\u3002\u200b\u672c\u200b\u6307\u5357\u200b\u6db5\u76d6\u200b\u4e86\u200b\u6240\u6709\u200b\u9ad8\u7ea7\u200b\u7279\u6027\u200b\uff1a\u200b\u4f7f\u7528\u200b\u89e3\u91ca\u5668\u200b Interpretation\uff0c\u200b\u81ea\u5b9a\u4e49\u200b\u6837\u5f0f\u200b\uff0c\u200b\u4ece\u200bHugging Face Hub\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b\u5e76\u884c\u200b Parallel\u200b\u548c\u200b\u4e32\u884c\u200b Series\u3002</p>"},{"location":"cn/02_building-interfaces/04_advanced-interface-features/#_2","title":"\u89e3\u91ca\u200b\u60a8\u200b\u7684\u200b\u9884\u6d4b","text":"<p>\u200b\u5927\u591a\u6570\u200b\u6a21\u578b\u200b\u90fd\u200b\u662f\u200b\u9ed1\u76d2\u200b\u6a21\u578b\u200b\uff0c\u200b\u51fd\u6570\u200b\u7684\u200b\u5185\u90e8\u200b\u903b\u8f91\u200b\u5bf9\u200b\u6700\u7ec8\u7528\u6237\u200b\u6765\u8bf4\u200b\u662f\u200b\u9690\u85cf\u200b\u7684\u200b\u3002\u200b\u4e3a\u4e86\u200b\u9f13\u52b1\u200b\u900f\u660e\u5ea6\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u5728\u200b <code>Interface</code> \u200b\u7c7b\u4e2d\u200b\u7b80\u5355\u200b\u5730\u200b\u5c06\u200b <code>interpretation</code> \u200b\u5173\u952e\u5b57\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>default</code>\uff0c\u200b\u4f7f\u5f97\u200b\u4e3a\u200b\u6a21\u578b\u200b\u6dfb\u52a0\u200b\u89e3\u91ca\u200b\u975e\u5e38\u5bb9\u6613\u200b\u3002\u200b\u8fd9\u6837\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u89e3\u200b\u5230\u200b\u54ea\u4e9b\u200b\u8f93\u5165\u200b\u90e8\u5206\u200b\u5bf9\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u8d1f\u8d23\u200b\u3002\u200b\u8bf7\u200b\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u7b80\u5355\u200b\u754c\u9762\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5b83\u200b\u5c55\u793a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b\uff0c\u200b\u8fd8\u200b\u5305\u62ec\u200b\u89e3\u91ca\u200b\u529f\u80fd\u200b\uff1a</p> <p>$code_image_classifier_interpretation</p> <p>\u200b\u9664\u4e86\u200b <code>default</code>\uff0cGradio \u200b\u8fd8\u200b\u5305\u62ec\u200b\u4e86\u200b\u57fa\u4e8e\u200bShapley-based interpretation\uff0c\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u200b\u51c6\u786e\u200b\u7684\u200b\u89e3\u91ca\u200b\uff0c\u200b\u5c3d\u7ba1\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u901a\u5e38\u200b\u8f83\u6162\u200b\u3002\u200b\u8981\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b <code>interpretation</code> \u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3a\u200b <code>\"shap\"</code>\uff08\u200b\u6ce8\u610f\u200b\uff1a\u200b\u8fd8\u8981\u200b\u786e\u4fdd\u200b\u5b89\u88c5\u200b\u4e86\u200b Python \u200b\u5305\u200b <code>shap</code>\uff09\u3002\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4fee\u6539\u200b <code>num_shap</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u8be5\u200b\u53c2\u6570\u200b\u63a7\u5236\u200b\u51c6\u786e\u6027\u200b\u548c\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6743\u8861\u200b\uff08\u200b\u589e\u52a0\u200b\u6b64\u503c\u200b\u901a\u5e38\u200b\u4f1a\u200b\u589e\u52a0\u200b\u51c6\u786e\u6027\u200b\uff09\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>gr.Interface(fn=classify_image, inputs=image, outputs=label, interpretation=\"shap\", num_shap=5).launch()\n</code></pre> <p>\u200b\u8fd9\u200b\u9002\u7528\u200b\u4e8e\u200b\u4efb\u4f55\u200b\u51fd\u6570\u200b\uff0c\u200b\u5373\u4f7f\u200b\u5728\u200b\u5185\u90e8\u200b\uff0c\u200b\u6a21\u578b\u200b\u662f\u200b\u590d\u6742\u200b\u7684\u200b\u795e\u7ecf\u7f51\u7edc\u200b\u6216\u200b\u5176\u4ed6\u200b\u9ed1\u76d2\u200b\u6a21\u578b\u200b\u3002\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200b <code>default</code> \u200b\u6216\u200b <code>shap</code> \u200b\u89e3\u91ca\u200b\uff0c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u5fc5\u987b\u200b\u662f\u200b <code>Label</code>\u3002\u200b\u652f\u6301\u200b\u6240\u6709\u200b\u5e38\u89c1\u200b\u7684\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u6587\u672c\u200b\u8f93\u5165\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p> <p>$code_gender_sentence_default_interpretation</p> <p>\u200b\u90a3\u4e48\u200b\u5728\u200b\u5e55\u540e\u200b\u53d1\u751f\u200b\u4e86\u200b\u4ec0\u4e48\u200b\uff1f\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u89e3\u91ca\u200b\u65b9\u6cd5\u200b\uff0cGradio \u200b\u4f1a\u200b\u4f7f\u7528\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u8f93\u5165\u200b\u7684\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\u8fdb\u884c\u200b\u591a\u6b21\u200b\u9884\u6d4b\u200b\u3002\u200b\u6839\u636e\u200b\u7ed3\u679c\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u770b\u5230\u200b\u754c\u9762\u200b\u81ea\u52a8\u200b\u5c06\u200b\u589e\u52a0\u200b\u7c7b\u522b\u200b\u53ef\u80fd\u6027\u200b\u7684\u200b\u6587\u672c\u200b\u90e8\u5206\u200b\uff08\u200b\u6216\u200b\u56fe\u50cf\u200b\u7b49\u200b\uff09\u200b\u4ee5\u200b\u7ea2\u8272\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\u3002\u200b\u989c\u8272\u200b\u7684\u200b\u5f3a\u5ea6\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u8f93\u5165\u200b\u90e8\u5206\u200b\u7684\u200b\u91cd\u8981\u6027\u200b\u3002\u200b\u51cf\u5c11\u200b\u7c7b\u522b\u200b\u7f6e\u4fe1\u5ea6\u200b\u7684\u200b\u90e8\u5206\u200b\u4ee5\u200b\u84dd\u8272\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\u3002</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u81ea\u5df1\u200b\u7684\u200b\u89e3\u91ca\u200b\u51fd\u6570\u200b\u3002\u200b\u4e0b\u9762\u200b\u7684\u200b\u6f14\u793a\u200b\u5728\u200b\u524d\u200b\u4e00\u4e2a\u200b\u6f14\u793a\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u81ea\u5b9a\u4e49\u200b\u89e3\u91ca\u200b\u3002\u200b\u6b64\u200b\u51fd\u6570\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e0e\u200b\u4e3b\u200b\u5c01\u88c5\u200b\u51fd\u6570\u200b\u76f8\u540c\u200b\u7684\u200b\u8f93\u5165\u200b\u3002\u200b\u8be5\u200b\u89e3\u91ca\u200b\u51fd\u6570\u200b\u7684\u200b\u8f93\u51fa\u200b\u5c06\u200b\u7528\u4e8e\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u8f93\u5165\u200b-\u200b\u56e0\u6b64\u200b\u51fd\u6570\u200b\u5fc5\u987b\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5143\u7d20\u200b\u7684\u200b\u6570\u91cf\u200b\u4e0e\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6570\u91cf\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u3002\u200b\u8981\u200b\u67e5\u770b\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u89e3\u91ca\u200b\u683c\u5f0f\u200b\uff0c\u200b\u8bf7\u200b\u67e5\u9605\u200b\u6587\u6863\u200b\u3002</p> <p>$code_gender_sentence_custom_interpretation</p> <p>\u200b\u5728\u200b\u6587\u6863\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u89e3\u91ca\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/04_advanced-interface-features/#_3","title":"\u81ea\u5b9a\u4e49\u200b\u6837\u5f0f","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u5bf9\u200b\u6f14\u793a\u200b\u7684\u200b\u4efb\u4f55\u200b\u65b9\u9762\u200b\u90fd\u200b\u6709\u200b\u66f4\u200b\u7cbe\u7ec6\u200b\u7684\u200b\u63a7\u5236\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u81ea\u5df1\u200b\u7684\u200b CSS \u200b\u6216\u200b\u901a\u8fc7\u200b <code>Interface</code> \u200b\u7c7b\u200b\u7684\u200b <code>css</code> \u200b\u53c2\u6570\u4f20\u9012\u200b CSS \u200b\u6587\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u3002</p> <pre><code>gr.Interface(..., css=\"body {background-color: red}\")\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u5728\u200b CSS \u200b\u4e2d\u200b\u5f15\u7528\u200b\u5916\u90e8\u200b\u6587\u4ef6\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\uff08\u200b\u53ef\u4ee5\u200b\u662f\u200b\u76f8\u5bf9\u8def\u5f84\u200b\u6216\u200b\u7edd\u5bf9\u8def\u5f84\u200b\uff09\u200b\u4e4b\u524d\u200b\u52a0\u4e0a\u200b <code>\"file=\"</code>\uff0c\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>gr.Interface(..., css=\"body {background-image: url('file=clouds.jpg')}\")\n</code></pre> <p>\u200b\u8b66\u544a\u200b\uff1a\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u81ea\u5b9a\u4e49\u200b CSS \u200b\u80fd\u591f\u200b\u5728\u200b Gradio \u200b\u7684\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u4e4b\u95f4\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u56e0\u4e3a\u200b Gradio \u200b\u7684\u200b HTML DOM \u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u751f\u200b\u66f4\u6539\u200b\u3002\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u5c3d\u91cf\u5c11\u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b CSS\uff0c\u200b\u800c\u200b\u5c3d\u53ef\u80fd\u200b\u4f7f\u7528\u200b\u4e3b\u9898\u200b Themes\u3002</p>"},{"location":"cn/02_building-interfaces/04_advanced-interface-features/#hugging-face-spaces","title":"\u52a0\u8f7d\u200b Hugging Face \u200b\u6a21\u578b\u200b\u548c\u200b Spaces","text":"<p>Gradio \u200b\u4e0e\u200bHugging Face Hub\u200b\u5b8c\u7f8e\u200b\u96c6\u6210\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u5373\u53ef\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u548c\u200b Spaces\u3002\u200b\u8981\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5728\u200b <code>Interface</code> \u200b\u7c7b\u4e2d\u200b\u4f7f\u7528\u200b <code>load()</code> \u200b\u65b9\u6cd5\u200b\u3002\u200b\u6240\u4ee5\u200b\uff1a</p> <ul> <li>\u200b\u8981\u200b\u4ece\u200b Hugging Face Hub \u200b\u52a0\u8f7d\u200b\u4efb\u4f55\u200b\u6a21\u578b\u200b\u5e76\u200b\u56f4\u7ed5\u200b\u5b83\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u754c\u9762\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u4f20\u9012\u200b <code>\"model/\"</code> \u200b\u6216\u200b <code>\"huggingface/\"</code>\uff0c\u200b\u540e\u9762\u200b\u8ddf\u7740\u200b\u6a21\u578b\u200b\u540d\u79f0\u200b\uff0c\u200b\u5c31\u200b\u50cf\u200b\u8fd9\u4e9b\u200b\u793a\u4f8b\u200b\u4e00\u6837\u200b\uff1a</li> </ul> <pre><code>gr.Interface.load(\"huggingface/gpt2\").launch();\n</code></pre> <pre><code>gr.Interface.load(\"huggingface/EleutherAI/gpt-j-6B\",\n    inputs=gr.Textbox(lines=5, label=\"Input Text\")  # customizes the input component\n).launch()\n</code></pre> <ul> <li>\u200b\u8981\u200b\u4ece\u200b Hugging Face Hub \u200b\u52a0\u8f7d\u200b\u4efb\u4f55\u200b Space \u200b\u5e76\u200b\u5728\u200b\u672c\u5730\u200b\u91cd\u65b0\u200b\u521b\u5efa\u200b\u5b83\u200b\uff08\u200b\u8fd9\u6837\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u81ea\u5b9a\u4e49\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\uff09\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u4f20\u9012\u200b <code>\"spaces/\"</code>\uff0c\u200b\u540e\u9762\u200b\u8ddf\u7740\u200b\u6a21\u578b\u200b\u540d\u79f0\u200b\uff1a</li> </ul> <pre><code>gr.Interface.load(\"spaces/eugenesiow/remove-bg\", inputs=\"webcam\", title=\"Remove your webcam background!\").launch()\n</code></pre> <p>\u200b\u4f7f\u7528\u200b Gradio \u200b\u4f7f\u7528\u200b\u52a0\u8f7d\u200b Hugging Face \u200b\u6a21\u578b\u200b\u6216\u200b spaces \u200b\u7684\u200b\u4e00\u4e2a\u200b\u5f88\u68d2\u200b\u7684\u200b\u529f\u80fd\u200b\u662f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7acb\u5373\u200b\u50cf\u200b Python \u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u4f7f\u7528\u200b\u751f\u6210\u200b\u7684\u200b <code>Interface</code> \u200b\u5bf9\u8c61\u200b\uff08\u200b\u8fd9\u200b\u9002\u7528\u200b\u4e8e\u200b\u6bcf\u79cd\u200b\u7c7b\u578b\u200b\u7684\u200b\u6a21\u578b\u200b / \u200b\u7a7a\u95f4\u200b\uff1a\u200b\u6587\u672c\u200b\uff0c\u200b\u56fe\u50cf\u200b\uff0c\u200b\u97f3\u9891\u200b\uff0c\u200b\u89c6\u9891\u200b\uff0c\u200b\u751a\u81f3\u200b\u662f\u200b\u591a\u200b\u6a21\u6001\u200b\u6a21\u578b\u200b\uff09\uff1a</p> <pre><code>io = gr.Interface.load(\"models/EleutherAI/gpt-neo-2.7B\")\nio(\"It was the best of times\")  # outputs model completion\n</code></pre>"},{"location":"cn/02_building-interfaces/04_advanced-interface-features/#_4","title":"\u5e76\u884c\u200b\u548c\u200b\u4e32\u884c\u200b\u653e\u7f6e\u200b\u63a5\u53e3","text":"<p>Gradio \u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gradio.Parallel</code> \u200b\u548c\u200b <code>gradio.Series</code> \u200b\u7c7b\u200b\u975e\u5e38\u5bb9\u6613\u200b\u5730\u200b\u6df7\u5408\u200b\u63a5\u53e3\u200b\u3002<code>Parallel</code> \u200b\u5141\u8bb8\u200b\u60a8\u200b\u5c06\u200b\u4e24\u4e2a\u200b\u76f8\u4f3c\u200b\u7684\u200b\u6a21\u578b\u200b\uff08\u200b\u5982\u679c\u200b\u5b83\u4eec\u200b\u5177\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u8f93\u5165\u200b\u7c7b\u578b\u200b\uff09\u200b\u5e76\u884c\u200b\u653e\u7f6e\u200b\u4ee5\u200b\u6bd4\u8f83\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\uff1a</p> <pre><code>generator1 = gr.Interface.load(\"huggingface/gpt2\")\ngenerator2 = gr.Interface.load(\"huggingface/EleutherAI/gpt-neo-2.7B\")\ngenerator3 = gr.Interface.load(\"huggingface/EleutherAI/gpt-j-6B\")\n\ngr.Parallel(generator1, generator2, generator3).launch()\n</code></pre> <p><code>Series</code> \u200b\u5141\u8bb8\u200b\u60a8\u200b\u5c06\u200b\u6a21\u578b\u200b\u548c\u200b spaces \u200b\u4e32\u884c\u200b\u653e\u7f6e\u200b\uff0c\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u4f20\u8f93\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u5165\u200b\u3002</p> <pre><code>generator = gr.Interface.load(\"huggingface/gpt2\")\ntranslator = gr.Interface.load(\"huggingface/t5-small\")\n\ngr.Series(generator, translator).launch()  # this demo generates text, then translates it to German, and outputs the final result.\n</code></pre> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u9002\u5f53\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u540c\u65f6\u200b\u4f7f\u7528\u200b <code>Parallel</code> \u200b\u548c\u200b <code>Series</code>\uff01</p> <p>\u200b\u5728\u200b\u6587\u6863\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u5e76\u884c\u200b\u548c\u200b\u4e32\u884c\u200b (<code>Parallel</code> \u200b\u548c\u200b <code>Series</code>) \u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/02_building-interfaces/05_four-kinds-of-interfaces/","title":"Gradio \u200b\u754c\u9762\u200b\u7684\u200b 4 \u200b\u79cd\u200b\u7c7b\u578b","text":"<p>\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e00\u76f4\u200b\u5047\u8bbe\u200b\u6784\u5efa\u200b Gradio \u200b\u6f14\u793a\u200b\u9700\u8981\u200b\u540c\u65f6\u200b\u5177\u5907\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u3002\u200b\u4f46\u200b\u5bf9\u4e8e\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6f14\u793a\u200b\u6765\u8bf4\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u200b\u603b\u662f\u200b\u5982\u6b64\u200b\uff1a\u200b\u4f8b\u5982\u200b\uff0c\u200b\u65e0\u6761\u4ef6\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u4e0d\u200b\u9700\u8981\u200b\u4efb\u4f55\u200b\u8f93\u5165\u200b\uff0c\u200b\u4f46\u4f1a\u200b\u751f\u6210\u200b\u4e00\u5f20\u200b\u56fe\u50cf\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u4e8b\u5b9e\u8bc1\u660e\u200b\uff0c<code>gradio.Interface</code> \u200b\u7c7b\u200b\u5b9e\u9645\u4e0a\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b 4 \u200b\u79cd\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\uff1a</p> <ol> <li>Standard demos \u200b\u6807\u51c6\u200b\u6f14\u793a\u200b\uff1a\u200b\u540c\u65f6\u200b\u5177\u6709\u200b\u72ec\u7acb\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\uff08\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b\u6216\u200b\u8bed\u97f3\u200b\u8f6c\u200b\u6587\u672c\u200b\u6a21\u578b\u200b\uff09</li> <li>Output-only demos \u200b\u4ec5\u200b\u8f93\u51fa\u200b\u6f14\u793a\u200b\uff1a\u200b\u4e0d\u200b\u63a5\u53d7\u200b\u4efb\u4f55\u200b\u8f93\u5165\u200b\uff0c\u200b\u4f46\u4f1a\u200b\u4ea7\u751f\u200b\u8f93\u51fa\u200b\uff08\u200b\u4f8b\u5982\u200b\u65e0\u6761\u4ef6\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff09</li> <li>Input-only demos \u200b\u4ec5\u200b\u8f93\u5165\u200b\u6f14\u793a\u200b\uff1a\u200b\u4e0d\u200b\u4ea7\u751f\u200b\u4efb\u4f55\u200b\u8f93\u51fa\u200b\uff0c\u200b\u4f46\u4f1a\u200b\u63a5\u53d7\u200b\u67d0\u79cd\u200b\u5f62\u5f0f\u200b\u7684\u200b\u8f93\u5165\u200b\uff08\u200b\u4f8b\u5982\u200b\u4fdd\u5b58\u200b\u60a8\u200b\u4e0a\u200b\u4f20\u5230\u200b\u5916\u90e8\u200b\u6301\u4e45\u200b\u6570\u636e\u5e93\u200b\u7684\u200b\u56fe\u50cf\u200b\u7684\u200b\u6f14\u793a\u200b\uff09</li> <li>Unified demos \u200b\u7edf\u4e00\u200b\u6f14\u793a\u200b\uff1a\u200b\u540c\u65f6\u200b\u5177\u6709\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u4e9b\u200b\u7ec4\u4ef6\u200b\u662f\u200b\u76f8\u540c\u200b\u7684\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u751f\u6210\u200b\u7684\u200b\u8f93\u51fa\u200b\u5c06\u200b\u8986\u76d6\u200b\u8f93\u5165\u200b\uff08\u200b\u4f8b\u5982\u200b\u6587\u672c\u200b\u81ea\u52a8\u200b\u5b8c\u6210\u200b\u6a21\u578b\u200b\uff09</li> </ol> <p>\u200b\u6839\u636e\u200b\u6f14\u793a\u200b\u7c7b\u578b\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u7528\u6237\u754c\u9762\u200b\uff08UI\uff09\u200b\u4f1a\u200b\u6709\u200b\u7565\u5fae\u200b\u4e0d\u540c\u200b\u7684\u200b\u5916\u89c2\u200b\uff1a</p> <p></p> <p>\u200b\u6211\u4eec\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>Interface</code> \u200b\u7c7b\u200b\u6784\u5efa\u200b\u6bcf\u79cd\u200b\u7c7b\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u793a\u4f8b\u200b\uff1a</p>"},{"location":"cn/02_building-interfaces/05_four-kinds-of-interfaces/#standard-demos","title":"\u6807\u51c6\u200b\u6f14\u793a\u200b (Standard demos)","text":"<p>\u200b\u8981\u200b\u521b\u5efa\u200b\u5177\u6709\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5728\u200b <code>Interface()</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>inputs</code> \u200b\u548c\u200b <code>outputs</code> \u200b\u53c2\u6570\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u56fe\u50cf\u200b\u6ee4\u955c\u200b\u7684\u200b\u793a\u4f8b\u200b\u6f14\u793a\u200b\uff1a</p> <p>$code_sepia_filter $demo_sepia_filter</p>"},{"location":"cn/02_building-interfaces/05_four-kinds-of-interfaces/#output-only-demos","title":"\u4ec5\u200b\u8f93\u51fa\u200b\u6f14\u793a\u200b (Output-only demos)","text":"<p>\u200b\u90a3\u4e48\u200b\u4ec5\u200b\u5305\u542b\u200b\u8f93\u51fa\u200b\u7684\u200b\u6f14\u793a\u200b\u5462\u200b\uff1f\u200b\u4e3a\u4e86\u200b\u6784\u5efa\u200b\u8fd9\u6837\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b <code>Interface()</code> \u200b\u4e2d\u200b\u7684\u200b <code>inputs</code> \u200b\u53c2\u6570\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>None</code>\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6a21\u62df\u200b\u56fe\u50cf\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u7684\u200b\u793a\u4f8b\u200b\u6f14\u793a\u200b\uff1a</p> <p>$code_fake_gan_no_input $demo_fake_gan_no_input</p>"},{"location":"cn/02_building-interfaces/05_four-kinds-of-interfaces/#input-only-demos","title":"\u4ec5\u200b\u8f93\u5165\u200b\u6f14\u793a\u200b (Input-only demos)","text":"<p>\u200b\u540c\u6837\u200b\u5730\u200b\uff0c\u200b\u8981\u200b\u521b\u5efa\u200b\u4ec5\u200b\u5305\u542b\u200b\u8f93\u5165\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u5c06\u200b <code>Interface()</code> \u200b\u4e2d\u200b\u7684\u200b <code>outputs</code> \u200b\u53c2\u6570\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>None</code>\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5c06\u200b\u4efb\u4f55\u200b\u4e0a\u4f20\u200b\u7684\u200b\u56fe\u50cf\u200b\u4fdd\u5b58\u200b\u5230\u200b\u78c1\u76d8\u200b\u7684\u200b\u793a\u4f8b\u200b\u6f14\u793a\u200b\uff1a</p> <p>$code_save_file_no_output $demo_save_file_no_output</p>"},{"location":"cn/02_building-interfaces/05_four-kinds-of-interfaces/#unified-demos","title":"\u7edf\u4e00\u200b\u6f14\u793a\u200b (Unified demos)","text":"<p>\u200b\u8fd9\u79cd\u200b\u6f14\u793a\u200b\u5c06\u200b\u5355\u4e2a\u200b\u7ec4\u4ef6\u200b\u540c\u65f6\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u3002\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b <code>Interface()</code> \u200b\u4e2d\u200b\u7684\u200b <code>inputs</code> \u200b\u548c\u200b <code>outputs</code> \u200b\u53c2\u6570\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u76f8\u540c\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u5373\u53ef\u200b\u521b\u5efa\u200b\u6b64\u200b\u6f14\u793a\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u7684\u200b\u793a\u4f8b\u200b\u6f14\u793a\u200b\uff1a</p> <p>$code_unified_demo_text_generation $demo_unified_demo_text_generation</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/","title":"\u533a\u5757\u200b\u548c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b (Blocks and Event Listeners)","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u5feb\u901f\u200b\u5165\u95e8\u200b\u4e2d\u200b\u7b80\u8981\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u533a\u5757\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6df1\u5165\u63a2\u8ba8\u200b\u4e00\u4e0b\u200b\u3002\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u6db5\u76d6\u200b\u533a\u5757\u200b\u7684\u200b\u7ed3\u6784\u200b\u3001\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u53ca\u5176\u200b\u7c7b\u578b\u200b\u3001\u200b\u8fde\u7eed\u200b\u8fd0\u884c\u200b\u4e8b\u4ef6\u200b\u3001\u200b\u66f4\u65b0\u200b\u914d\u7f6e\u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b\u5b57\u5178\u200b\u4e0e\u200b\u5217\u8868\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#blocks-structure","title":"\u533a\u5757\u200b\u7ed3\u6784\u200b (Blocks Structure)","text":"<p>\u200b\u8bf7\u200b\u67e5\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u6f14\u793a\u200b\u3002</p> <p>$code_hello_blocks $demo_hello_blocks</p> <ul> <li>\u200b\u9996\u5148\u200b\uff0c\u200b\u6ce8\u610f\u200b <code>with gr.Blocks() as demo:</code> \u200b\u5b50\u53e5\u200b\u3002\u200b\u533a\u5757\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\u5c06\u200b\u88ab\u200b\u5305\u542b\u200b\u5728\u200b\u8be5\u200b\u5b50\u53e5\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u63a5\u4e0b\u6765\u200b\u662f\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u7ec4\u4ef6\u200b\u662f\u200b\u5728\u200b <code>Interface</code> \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u76f8\u540c\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4e0e\u200b\u5c06\u200b\u7ec4\u4ef6\u200b\u4f20\u9012\u200b\u7ed9\u200b\u67d0\u4e2a\u200b\u6784\u9020\u51fd\u6570\u200b\u4e0d\u540c\u200b\uff0c\u200b\u7ec4\u4ef6\u200b\u5728\u200b <code>with</code> \u200b\u5b50\u53e5\u200b\u5185\u200b\u521b\u5efa\u200b\u65f6\u4f1a\u200b\u81ea\u52a8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u533a\u5757\u200b\u4e2d\u200b\u3002</li> <li>\u200b\u6700\u540e\u200b\uff0c<code>click()</code> \u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3002\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5185\u200b\u7684\u200b\u6570\u636e\u6d41\u200b\u3002\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u76d1\u542c\u5668\u200b\u5c06\u200b\u4e24\u4e2a\u200b\u6587\u672c\u6846\u200b\u76f8\u4e92\u200b\u5173\u8054\u200b\u3002\u200b\u6587\u672c\u6846\u200b <code>name</code> \u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u6587\u672c\u6846\u200b <code>output</code> \u200b\u4f5c\u4e3a\u200b <code>greet</code> \u200b\u65b9\u6cd5\u200b\u7684\u200b\u8f93\u51fa\u200b\u3002\u200b\u5f53\u200b\u5355\u51fb\u200b\u6309\u94ae\u200b <code>greet_btn</code> \u200b\u65f6\u200b\u89e6\u53d1\u200b\u6b64\u200b\u6570\u636e\u6d41\u200b\u3002\u200b\u4e0e\u200b\u754c\u9762\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u53ef\u4ee5\u200b\u5177\u6709\u200b\u591a\u4e2a\u200b\u8f93\u5165\u200b\u6216\u200b\u8f93\u51fa\u200b\u3002</li> </ul>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#event-listeners-and-interactivity","title":"\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u4e0e\u200b\u4ea4\u4e92\u6027\u200b (Event Listeners and Interactivity)","text":"<p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\u53ef\u4ee5\u200b\u7f16\u8f91\u200b\u6587\u672c\u6846\u200b <code>name</code>\uff0c\u200b\u4f46\u200b\u65e0\u6cd5\u200b\u7f16\u8f91\u200b\u6587\u672c\u6846\u200b <code>output</code>\u3002\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u4f5c\u4e3a\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u7684\u200b\u4efb\u4f55\u200b\u7ec4\u4ef6\u200b\u90fd\u200b\u5177\u6709\u200b\u4ea4\u4e92\u6027\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6587\u672c\u6846\u200b <code>output</code> \u200b\u4ec5\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5b83\u200b\u6ca1\u6709\u200b\u4ea4\u4e92\u6027\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>interactive=</code> \u200b\u5173\u952e\u5b57\u200b\u53c2\u6570\u200b\u76f4\u63a5\u200b\u914d\u7f6e\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u4ea4\u4e92\u6027\u200b\u3002</p> <pre><code>output = gr.Textbox(label=\"\u200b\u8f93\u51fa\u200b\", interactive=True)\n</code></pre>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#types-of-event-listeners","title":"\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u7684\u200b\u7c7b\u578b\u200b (Types of Event Listeners)","text":"<p>\u200b\u8bf7\u200b\u67e5\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u6f14\u793a\u200b\uff1a</p> <p>$code_blocks_hello $demo_blocks_hello</p> <p><code>welcome</code> \u200b\u51fd\u6570\u200b\u4e0d\u662f\u200b\u7531\u200b\u70b9\u51fb\u200b\u89e6\u53d1\u200b\u7684\u200b\uff0c\u200b\u800c\u662f\u200b\u7531\u200b\u5728\u200b\u6587\u672c\u6846\u200b <code>inp</code> \u200b\u4e2d\u200b\u8f93\u5165\u200b\u6587\u5b57\u200b\u89e6\u53d1\u200b\u7684\u200b\u3002\u200b\u8fd9\u662f\u200b\u7531\u4e8e\u200b <code>change()</code> \u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3002\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u652f\u6301\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c<code>Video</code> \u200b\u7ec4\u4ef6\u200b\u652f\u6301\u200b\u4e00\u4e2a\u200b <code>play()</code> \u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\uff0c\u200b\u5f53\u200b\u7528\u6237\u200b\u6309\u4e0b\u200b\u64ad\u653e\u6309\u94ae\u200b\u65f6\u200b\u89e6\u53d1\u200b\u3002\u200b\u6709\u5173\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u6587\u6863\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#multiple-data-flows","title":"\u591a\u4e2a\u200b\u6570\u636e\u6d41\u200b (Multiple Data Flows)","text":"<p>\u200b\u533a\u5757\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e0d\u50cf\u200b\u754c\u9762\u200b\u90a3\u6837\u200b\u9650\u5236\u200b\u4e8e\u200b\u5355\u4e2a\u200b\u6570\u636e\u6d41\u200b\u3002\u200b\u8bf7\u200b\u67e5\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u6f14\u793a\u200b\uff1a</p> <p>$code_reversible_flow $demo_reversible_flow</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c<code>num1</code> \u200b\u53ef\u4ee5\u200b\u5145\u5f53\u200b <code>num2</code> \u200b\u7684\u200b\u8f93\u5165\u200b\uff0c\u200b\u53cd\u4e4b\u4ea6\u7136\u200b\uff01\u200b\u968f\u7740\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u53d8\u5f97\u200b\u66f4\u52a0\u200b\u590d\u6742\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u80fd\u591f\u200b\u8fde\u63a5\u200b\u5404\u79cd\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u591a\u4e2a\u200b\u6570\u636e\u6d41\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b \" \u200b\u591a\u200b\u6b65\u9aa4\u200b \" \u200b\u793a\u4f8b\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\uff08\u200b\u8bed\u97f3\u200b\u5230\u200b\u6587\u672c\u200b\u6a21\u578b\u200b\uff09\u200b\u88ab\u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\uff08\u200b\u60c5\u611f\u200b\u5206\u7c7b\u5668\u200b\uff09\u3002</p> <p>$code_blocks_speech_text_sentiment $demo_blocks_speech_text_sentiment</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#function-input-list-vs-dict","title":"\u51fd\u6570\u200b\u8f93\u5165\u200b\u5217\u8868\u200b\u4e0e\u200b\u5b57\u5178\u200b (Function Input List vs Dict)","text":"<p>\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\uff0c\u200b\u60a8\u200b\u770b\u5230\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u90fd\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u6709\u200b\u591a\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u6570\u636e\u200b\u4f20\u9012\u200b\u7ed9\u200b\u51fd\u6570\u200b\uff0c\u200b\u6709\u200b\u4e24\u79cd\u200b\u9009\u9879\u200b\u53ef\u200b\u4f9b\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u503c\u200b\uff1a</p> <ol> <li>\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u5217\u8868\u200b\uff0c\u200b\u6216\u200b</li> <li>\u200b\u4f5c\u4e3a\u200b\u4ee5\u200b\u7ec4\u4ef6\u200b\u4e3a\u952e\u200b\u7684\u200b\u5355\u4e2a\u200b\u503c\u200b\u5b57\u5178\u200b</li> </ol> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5206\u522b\u200b\u770b\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a $code_calculator_list_and_dict</p> <p><code>add()</code> \u200b\u548c\u200b <code>sub()</code> \u200b\u90fd\u200b\u5c06\u200b <code>a</code> \u200b\u548c\u200b <code>b</code> \u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u76d1\u542c\u5668\u200b\u4e4b\u95f4\u200b\u7684\u200b\u8bed\u6cd5\u200b\u4e0d\u540c\u200b\u3002</p> <ol> <li>\u200b\u5bf9\u4e8e\u200b <code>add_btn</code> \u200b\u76d1\u542c\u5668\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8f93\u5165\u200b\u4f5c\u4e3a\u200b\u5217\u8868\u200b\u4f20\u9012\u200b\u3002\u200b\u51fd\u6570\u200b <code>add()</code> \u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u3002<code>a</code> \u200b\u7684\u200b\u503c\u200b\u6620\u5c04\u200b\u5230\u200b\u53c2\u6570\u200b <code>num1</code>\uff0c<code>b</code> \u200b\u7684\u200b\u503c\u200b\u6620\u5c04\u200b\u5230\u200b\u53c2\u6570\u200b <code>num2</code>\u3002</li> <li>\u200b\u5bf9\u4e8e\u200b <code>sub_btn</code> \u200b\u76d1\u542c\u5668\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8f93\u5165\u200b\u4f5c\u4e3a\u200b\u96c6\u5408\u200b\u4f20\u9012\u200b\uff08\u200b\u6ce8\u610f\u200b\u82b1\u200b\u62ec\u53f7\u200b\uff01\uff09\u3002\u200b\u51fd\u6570\u200b <code>sub()</code> \u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b <code>data</code> \u200b\u7684\u200b\u5355\u4e2a\u200b\u5b57\u5178\u200b\u53c2\u6570\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u662f\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u503c\u200b\u662f\u200b\u8fd9\u4e9b\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u503c\u200b\u3002</li> </ol> <p>\u200b\u4f7f\u7528\u200b\u54ea\u200b\u79cd\u200b\u8bed\u6cd5\u200b\u662f\u200b\u4e2a\u4eba\u200b\u504f\u597d\u200b\uff01\u200b\u5bf9\u4e8e\u200b\u5177\u6709\u200b\u8bb8\u591a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u9009\u9879\u200b 2 \u200b\u53ef\u80fd\u200b\u66f4\u200b\u5bb9\u6613\u200b\u7ba1\u7406\u200b\u3002</p> <p>$demo_calculator_list_and_dict</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#function-return-list-vs-dict","title":"\u51fd\u6570\u200b\u8fd4\u56de\u200b\u5217\u8868\u200b\u4e0e\u200b\u5b57\u5178\u200b (Function Return List vs Dict)","text":"<p>\u200b\u7c7b\u4f3c\u200b\u5730\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8fd4\u56de\u200b\u591a\u4e2a\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u662f\u200b\uff1a</p> <ol> <li>\u200b\u503c\u200b\u5217\u8868\u200b\uff0c\u200b\u6216\u200b</li> <li>\u200b\u4ee5\u200b\u7ec4\u4ef6\u200b\u4e3a\u952e\u200b\u7684\u200b\u5b57\u5178\u200b</li> </ol> <p>\u200b\u9996\u5148\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u200b\u4e00\u4e2a\u200b\uff081\uff09\u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u8fd4\u56de\u200b\u4e24\u4e2a\u200b\u503c\u6765\u200b\u8bbe\u7f6e\u200b\u4e24\u4e2a\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u503c\u200b\uff1a</p> <pre><code>with gr.Blocks() as demo:\n    food_box = gr.Number(value=10, label=\"Food Count\")\n    status_box = gr.Textbox()\n    def eat(food):\n        if food &gt; 0:\n            return food - 1, \"full\"\n        else:\n            return 0, \"hungry\"\n    gr.Button(\"EAT\").click(\n        fn=eat,\n        inputs=food_box,\n        outputs=[food_box, status_box]\n    )\n</code></pre> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u8fd4\u56de\u200b\u8bed\u53e5\u200b\u5206\u522b\u200b\u8fd4\u56de\u200b\u4e0e\u200b <code>food_box</code> \u200b\u548c\u200b <code>status_box</code> \u200b\u76f8\u5bf9\u200b\u5e94\u200b\u7684\u200b\u4e24\u4e2a\u200b\u503c\u200b\u3002</p> <p>\u200b\u9664\u4e86\u200b\u8fd4\u56de\u200b\u4e0e\u200b\u6bcf\u4e2a\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u987a\u5e8f\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u7684\u200b\u503c\u200b\u5217\u8868\u200b\u5916\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u503c\u200b\u4f5c\u4e3a\u200b\u65b0\u503c\u200b\u3002\u200b\u8fd9\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u60a8\u200b\u8df3\u200b\u8fc7\u200b\u66f4\u65b0\u200b\u67d0\u4e9b\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u3002</p> <pre><code>with gr.Blocks() as demo:\n    food_box = gr.Number(value=10, label=\"Food Count\")\n    status_box = gr.Textbox()\n    def eat(food):\n        if food &gt; 0:\n            return {food_box: food - 1, status_box: \"full\"}\n        else:\n            return {status_box: \"hungry\"}\n    gr.Button(\"EAT\").click(\n        fn=eat,\n        inputs=food_box,\n        outputs=[food_box, status_box]\n    )\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b\u6ca1\u6709\u200b\u98df\u7269\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u66f4\u65b0\u200b <code>status_box</code> \u200b\u5143\u7d20\u200b\u3002\u200b\u6211\u4eec\u200b\u8df3\u8fc7\u200b\u66f4\u65b0\u200b <code>food_box</code> \u200b\u7ec4\u4ef6\u200b\u3002</p> <p>\u200b\u5b57\u5178\u200b\u8fd4\u56de\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u5f71\u54cd\u200b\u591a\u4e2a\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u6216\u200b\u6709\u200b\u6761\u4ef6\u200b\u5730\u200b\u5f71\u54cd\u200b\u8f93\u51fa\u200b\u65f6\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u8bb0\u4f4f\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u5b57\u5178\u200b\u8fd4\u56de\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ecd\u7136\u200b\u9700\u8981\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u53ef\u80fd\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#updating-component-configurations","title":"\u66f4\u65b0\u200b\u7ec4\u4ef6\u200b\u914d\u7f6e\u200b (Updating Component Configurations)","text":"<p>\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u51fd\u6570\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u901a\u5e38\u200b\u662f\u200b\u76f8\u5e94\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u66f4\u65b0\u200b\u503c\u200b\u3002\u200b\u6709\u65f6\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5e0c\u671b\u200b\u66f4\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u914d\u7f6e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u53ef\u89c1\u200b\u6027\u200b\u3002\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b <code>gr.update()</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4ec5\u4ec5\u200b\u662f\u200b\u66f4\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u503c\u200b\u3002</p> <p>$code_blocks_essay_simple $demo_blocks_essay_simple</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b <code>gr.update()</code> \u200b\u65b9\u6cd5\u200b\u81ea\u6211\u200b\u914d\u7f6e\u200b\u6587\u672c\u6846\u200b\u3002<code>value=</code> \u200b\u53c2\u6570\u200b\u4ecd\u7136\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u66f4\u65b0\u200b\u503c\u200b\u4ee5\u53ca\u200b\u7ec4\u4ef6\u200b\u914d\u7f6e\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#running-events-consecutively","title":"\u8fde\u7eed\u200b\u8fd0\u884c\u200b\u4e8b\u4ef6\u200b (Running Events Consecutively)","text":"<p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u7684\u200b <code>then</code> \u200b\u65b9\u6cd5\u200b\u6309\u200b\u987a\u5e8f\u200b\u8fd0\u884c\u200b\u4e8b\u4ef6\u200b\u3002\u200b\u5728\u200b\u524d\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u8fd0\u884c\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u8fd0\u884c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u591a\u200b\u6b65\u200b\u66f4\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u7acb\u5373\u200b\u4f7f\u7528\u200b\u7528\u6237\u200b\u6d88\u606f\u200b\u66f4\u65b0\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u6a21\u62df\u200b\u5ef6\u8fdf\u200b\u540e\u200b\u4f7f\u7528\u200b\u8ba1\u7b97\u673a\u200b\u56de\u590d\u200b\u66f4\u65b0\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u3002</p> <p>$code_chatbot_simple $demo_chatbot_simple</p> <p>\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u7684\u200b <code>.then()</code> \u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u6267\u884c\u200b\u540e\u7eed\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u65e0\u8bba\u200b\u524d\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u662f\u5426\u200b\u5f15\u53d1\u200b\u4efb\u4f55\u200b\u9519\u8bef\u200b\u3002\u200b\u5982\u679c\u200b\u53ea\u60f3\u200b\u5728\u200b\u524d\u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u6210\u529f\u200b\u6267\u884c\u200b\u540e\u200b\u624d\u200b\u8fd0\u884c\u200b\u540e\u7eed\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b <code>.success()</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u4e0e\u200b <code>.then()</code> \u200b\u63a5\u53d7\u200b\u76f8\u540c\u200b\u7684\u200b\u53c2\u6570\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#running-events-continuously","title":"\u8fde\u7eed\u200b\u8fd0\u884c\u200b\u4e8b\u4ef6\u200b (Running Events Continuously)","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u7684\u200b <code>every</code> \u200b\u53c2\u6570\u200b\u6309\u200b\u56fa\u5b9a\u200b\u8ba1\u5212\u200b\u8fd0\u884c\u200b\u4e8b\u4ef6\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u5728\u200b\u5ba2\u6237\u7aef\u200b\u8fde\u63a5\u200b\u6253\u5f00\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6bcf\u9694\u200b\u4e00\u5b9a\u200b\u79d2\u6570\u200b\u8fd0\u884c\u200b\u4e00\u6b21\u200b\u4e8b\u4ef6\u200b\u3002\u200b\u5982\u679c\u200b\u8fde\u63a5\u200b\u5173\u95ed\u200b\uff0c\u200b\u4e8b\u4ef6\u200b\u5c06\u200b\u5728\u200b\u4e0b\u200b\u4e00\u6b21\u200b\u8fed\u4ee3\u200b\u540e\u200b\u505c\u6b62\u200b\u8fd0\u884c\u200b\u3002 \u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u200b\u8003\u8651\u200b\u4e8b\u4ef6\u200b\u672c\u8eab\u200b\u7684\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>every=5</code> \u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u4e3a\u200b 1 \u200b\u79d2\u200b\u7684\u200b\u51fd\u6570\u200b\u5b9e\u9645\u4e0a\u200b\u6bcf\u200b 6 \u200b\u79d2\u200b\u8fd0\u884c\u200b\u4e00\u6b21\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6bcf\u79d2\u200b\u66f4\u65b0\u200b\u7684\u200b\u6b63\u5f26\u66f2\u7ebf\u200b\u793a\u4f8b\u200b\uff01</p> <p>$code_sine_curve $demo_sine_curve</p>"},{"location":"cn/03_building-with-blocks/01_blocks-and-event-listeners/#gathering-event-data","title":"\u6536\u96c6\u200b\u4e8b\u4ef6\u200b\u6570\u636e\u200b (Gathering Event Data)","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5c06\u200b\u76f8\u5173\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u6570\u636e\u200b\u7c7b\u200b\u4f5c\u4e3a\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u6dfb\u52a0\u200b\u5230\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\u4e2d\u200b\uff0c\u200b\u6536\u96c6\u200b\u6709\u5173\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u7279\u5b9a\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>gradio.SelectData</code> \u200b\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u4e3a\u200b <code>.select()</code> \u200b\u7684\u200b\u4e8b\u4ef6\u200b\u6570\u636e\u200b\u6dfb\u52a0\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u3002\u200b\u5f53\u200b\u7528\u6237\u200b\u9009\u62e9\u200b\u89e6\u53d1\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200b\u89e6\u53d1\u200b\u6b64\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e8b\u4ef6\u200b\u6570\u636e\u200b\u5305\u542b\u200b\u6709\u5173\u200b\u7528\u6237\u200b\u7684\u200b\u5177\u4f53\u200b\u9009\u62e9\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u5982\u679c\u200b\u7528\u6237\u200b\u5728\u200b <code>Textbox</code> \u200b\u4e2d\u200b\u9009\u62e9\u200b\u4e86\u200b\u7279\u5b9a\u200b\u5355\u8bcd\u200b\uff0c\u200b\u5728\u200b <code>Gallery</code> \u200b\u4e2d\u200b\u9009\u62e9\u200b\u4e86\u200b\u7279\u5b9a\u200b\u56fe\u50cf\u200b\u6216\u200b\u5728\u200b <code>DataFrame</code> \u200b\u4e2d\u200b\u9009\u62e9\u200b\u4e86\u200b\u7279\u5b9a\u200b\u5355\u5143\u683c\u200b\uff0c\u200b\u5219\u200b\u4e8b\u4ef6\u200b\u6570\u636e\u200b\u53c2\u6570\u200b\u5c06\u200b\u5305\u542b\u200b\u6709\u5173\u200b\u5177\u4f53\u200b\u9009\u62e9\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u53cc\u4eba\u200b\u4e95\u5b57\u200b\u6e38\u620f\u200b\u6f14\u793a\u200b\u4e2d\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b <code>DataFrame</code> \u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5355\u5143\u683c\u200b\u8fdb\u884c\u200b\u79fb\u52a8\u200b\u3002\u200b\u4e8b\u4ef6\u200b\u6570\u636e\u200b\u53c2\u6570\u200b\u5305\u542b\u200b\u6709\u5173\u200b\u6240\u200b\u9009\u200b\u5355\u5143\u683c\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u9996\u5148\u200b\u68c0\u67e5\u200b\u5355\u5143\u683c\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u7136\u540e\u200b\u7528\u200b\u7528\u6237\u200b\u7684\u200b\u79fb\u52a8\u200b\u66f4\u65b0\u200b\u5355\u5143\u683c\u200b\u3002</p> <p>$code_tictactoe</p> <p>$demo_tictactoe</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/","title":"\u63a7\u5236\u200b\u5e03\u5c40\u200b (Controlling Layout)","text":"<p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5757\u200b\u4e2d\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u662f\u200b\u5782\u76f4\u200b\u6392\u5217\u200b\u7684\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200b\u5982\u4f55\u200b\u91cd\u65b0\u6392\u5217\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u5728\u200b\u5e55\u540e\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u5e03\u5c40\u200b\u7ed3\u6784\u200b\u4f7f\u7528\u200b\u4e86\u200bWeb \u200b\u5f00\u53d1\u200b\u7684\u200b flexbox \u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/#row","title":"Row \u200b\u884c","text":"<p><code>with gr.Row</code> \u200b\u4e0b\u200b\u7684\u200b\u5143\u7d20\u200b\u5c06\u200b\u6c34\u5e73\u200b\u663e\u793a\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8981\u200b\u5e76\u6392\u200b\u663e\u793a\u200b\u4e24\u4e2a\u200b\u6309\u94ae\u200b\uff1a</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        btn1 = gr.Button(\"\u200b\u6309\u94ae\u200b1\")\n        btn2 = gr.Button(\"\u200b\u6309\u94ae\u200b2\")\n</code></pre> <p>\u200b\u8981\u200b\u4f7f\u884c\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u5177\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u9ad8\u5ea6\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b <code>style</code> \u200b\u65b9\u6cd5\u200b\u7684\u200b <code>equal_height</code> \u200b\u53c2\u6570\u200b\u3002</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row(equal_height=True):\n        textbox = gr.Textbox()\n        btn2 = gr.Button(\"\u200b\u6309\u94ae\u200b2\")\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u4e2d\u200b\u5b58\u5728\u200b\u7684\u200b <code>scale</code> \u200b\u548c\u200b <code>min_width</code> \u200b\u53c2\u6570\u200b\u6765\u200b\u63a7\u5236\u200b\u884c\u4e2d\u200b\u5143\u7d20\u200b\u7684\u200b\u5bbd\u5ea6\u200b\u3002</p> <ul> <li><code>scale</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5143\u7d20\u200b\u5728\u200b\u884c\u4e2d\u200b\u7684\u200b\u5360\u7528\u200b\u7a7a\u95f4\u200b\u3002\u200b\u5982\u679c\u200b\u5c06\u200b scale \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>0</code>\uff0c\u200b\u5219\u200b\u5143\u7d20\u200b\u4e0d\u4f1a\u200b\u6269\u5c55\u200b\u5360\u7528\u200b\u7a7a\u95f4\u200b\u3002\u200b\u5982\u679c\u200b\u5c06\u200b scale \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>1</code> \u200b\u6216\u200b\u66f4\u200b\u5927\u200b\uff0c\u200b\u5219\u200b\u5143\u7d20\u200b\u5c06\u200b\u6269\u5c55\u200b\u3002\u200b\u884c\u4e2d\u200b\u7684\u200b\u591a\u4e2a\u200b\u5143\u7d20\u200b\u5c06\u200b\u6309\u200b\u6bd4\u4f8b\u200b\u6269\u5c55\u200b\u3002\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c<code>btn1</code> \u200b\u5c06\u200b\u6bd4\u200b <code>btn2</code> \u200b\u6269\u5c55\u200b\u4e24\u500d\u200b\uff0c\u200b\u800c\u200b <code>btn0</code> \u200b\u5c06\u200b\u6839\u672c\u200b\u4e0d\u4f1a\u200b\u6269\u5c55\u200b\uff1a</li> </ul> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        btn0 = gr.Button(\"\u200b\u6309\u94ae\u200b0\", scale=0)\n        btn1 = gr.Button(\"\u200b\u6309\u94ae\u200b1\", scale=1)\n        btn2 = gr.Button(\"\u200b\u6309\u94ae\u200b2\", scale=2)\n</code></pre> <ul> <li><code>min_width</code> \u200b\u5c06\u200b\u8bbe\u7f6e\u200b\u5143\u7d20\u200b\u7684\u200b\u6700\u5c0f\u200b\u5bbd\u5ea6\u200b\u3002\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u8db3\u591f\u200b\u7684\u200b\u7a7a\u95f4\u200b\u6ee1\u8db3\u200b\u6240\u6709\u200b\u7684\u200b <code>min_width</code> \u200b\u503c\u200b\uff0c\u200b\u884c\u5c06\u200b\u6362\u884c\u200b\u3002</li> </ul> <p>\u200b\u5728\u200b\u6587\u6863\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u884c\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/#columns-and-nesting","title":"\u5217\u200b\u548c\u200b\u5d4c\u5957\u200b (Columns and Nesting)","text":"<p>\u200b\u5217\u4e2d\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u5782\u76f4\u200b\u653e\u7f6e\u200b\u5728\u200b\u4e00\u8d77\u200b\u3002\u200b\u7531\u4e8e\u200b\u9ed8\u8ba4\u200b\u5e03\u5c40\u200b\u5bf9\u4e8e\u200b\u5757\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6765\u8bf4\u200b\u662f\u200b\u5782\u76f4\u200b\u5e03\u5c40\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e3a\u4e86\u200b\u6709\u7528\u200b\uff0c\u200b\u5217\u200b\u901a\u5e38\u200b\u5d4c\u5957\u200b\u5728\u200b\u884c\u4e2d\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <p>$code_rows_and_columns $demo_rows_and_columns</p> <p>\u200b\u67e5\u770b\u200b\u7b2c\u4e00\u5217\u200b\u5982\u4f55\u200b\u5782\u76f4\u200b\u6392\u5217\u200b\u4e24\u4e2a\u200b\u6587\u672c\u6846\u200b\u3002\u200b\u7b2c\u4e8c\u5217\u200b\u5782\u76f4\u200b\u6392\u5217\u200b\u56fe\u50cf\u200b\u548c\u200b\u6309\u94ae\u200b\u3002\u200b\u6ce8\u610f\u200b\u4e24\u5217\u200b\u7684\u200b\u76f8\u5bf9\u200b\u5bbd\u5ea6\u200b\u7531\u200b <code>scale</code> \u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u3002\u200b\u5177\u6709\u200b\u4e24\u500d\u200b <code>scale</code> \u200b\u503c\u200b\u7684\u200b\u5217\u200b\u5360\u636e\u200b\u4e24\u500d\u200b\u7684\u200b\u5bbd\u5ea6\u200b\u3002</p> <p>\u200b\u5728\u200b\u6587\u6863\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u5217\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/#tabs-and-accordions","title":"\u9009\u9879\u5361\u200b\u548c\u200b\u624b\u98ce\u7434\u200b (Tabs and Accordions)","text":"<p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>with gr.Tab('tab_name'):</code> \u200b\u8bed\u53e5\u200b\u521b\u5efa\u200b\u9009\u9879\u5361\u200b\u3002\u200b\u5728\u200b <code>with gr.Tab('tab_name'):</code> \u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\u521b\u5efa\u200b\u7684\u200b\u4efb\u4f55\u200b\u7ec4\u4ef6\u200b\u90fd\u200b\u5c06\u200b\u663e\u793a\u200b\u5728\u200b\u8be5\u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u3002\u200b\u8fde\u7eed\u200b\u7684\u200b Tab \u200b\u5b50\u53e5\u200b\u88ab\u200b\u5206\u7ec4\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e00\u6b21\u200b\u53ea\u80fd\u200b\u9009\u62e9\u200b\u4e00\u4e2a\u200b\u9009\u9879\u5361\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ea\u200b\u663e\u793a\u200b\u8be5\u200b\u9009\u9879\u5361\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff1a</p> <p>$code_blocks_flipper $demo_blocks_flipper</p> <p>\u200b\u8fd8\u200b\u8bf7\u200b\u6ce8\u610f\u200b\u672c\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u7684\u200b <code>gr.Accordion('label')</code>\u3002\u200b\u624b\u98ce\u7434\u200b\u662f\u200b\u4e00\u79cd\u200b\u53ef\u4ee5\u200b\u5207\u6362\u200b\u6253\u5f00\u200b\u6216\u200b\u5173\u95ed\u200b\u7684\u200b\u5e03\u5c40\u200b\u3002\u200b\u4e0e\u200b <code>Tabs</code> \u200b\u4e00\u6837\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u6027\u200b\u9690\u85cf\u200b\u6216\u200b\u663e\u793a\u200b\u5185\u5bb9\u200b\u7684\u200b\u5e03\u5c40\u200b\u5143\u7d20\u200b\u3002\u200b\u5728\u200b <code>with gr.Accordion('label'):</code> \u200b\u5185\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4efb\u4f55\u200b\u7ec4\u4ef6\u200b\u5728\u200b\u5355\u51fb\u200b\u624b\u98ce\u7434\u200b\u7684\u200b\u5207\u6362\u200b\u56fe\u6807\u200b\u65f6\u200b\u90fd\u200b\u4f1a\u200b\u88ab\u200b\u9690\u85cf\u200b\u6216\u200b\u663e\u793a\u200b\u3002</p> <p>\u200b\u5728\u200b\u6587\u6863\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u6709\u5173\u200bTabs\u200b\u548c\u200bAccordions\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/#visibility","title":"\u53ef\u89c1\u200b\u6027\u200b (Visibility)","text":"<p>\u200b\u7ec4\u4ef6\u200b\u548c\u200b\u5e03\u5c40\u200b\u5143\u7d20\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b <code>visible</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u521d\u59cb\u200b\u65f6\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b <code>gr.update()</code> \u200b\u8fdb\u884c\u200b\u66f4\u65b0\u200b\u3002\u200b\u5728\u200b Column \u200b\u4e0a\u200b\u8bbe\u7f6e\u200b <code>gr.update(visible=...)</code> \u200b\u53ef\u200b\u7528\u4e8e\u200b\u663e\u793a\u200b\u6216\u200b\u9690\u85cf\u200b\u4e00\u7ec4\u200b\u7ec4\u4ef6\u200b\u3002</p> <p>$code_blocks_form $demo_blocks_form</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/#variable-number-of-outputs","title":"\u53ef\u53d8\u200b\u6570\u91cf\u200b\u7684\u200b\u8f93\u51fa\u200b (Variable Number of Outputs)","text":"<p>\u200b\u901a\u8fc7\u200b\u4ee5\u200b\u52a8\u6001\u200b\u65b9\u5f0f\u200b\u8c03\u6574\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u53ef\u89c1\u200b\u6027\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u652f\u6301\u200b \u200b\u53ef\u53d8\u200b\u6570\u91cf\u200b\u8f93\u51fa\u200b \u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u3002\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u5176\u4e2d\u200b\u8f93\u51fa\u200b\u6587\u672c\u6846\u200b\u7684\u200b\u6570\u91cf\u200b\u7531\u200b\u8f93\u5165\u200b\u6ed1\u5757\u200b\u63a7\u5236\u200b\uff1a</p> <p>\u200b\u4f8b\u5982\u200b\uff1a</p> <p>$code_variable_outputs $demo_variable_outputs</p>"},{"location":"cn/03_building-with-blocks/02_controlling-layout/#defining-and-rendering-components-separately","title":"\u5206\u5f00\u200b\u5b9a\u4e49\u200b\u548c\u200b\u6e32\u67d3\u200b\u7ec4\u4ef6\u200b (Defining and Rendering Components Separately)","text":"<p>\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5728\u200b\u5b9e\u9645\u200b\u6e32\u67d3\u200b UI \u200b\u4e4b\u524d\u200b\u5b9a\u4e49\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5728\u200b\u76f8\u5e94\u200b\u7684\u200b <code>gr.Textbox</code> \u200b\u8f93\u5165\u200b\u4e0a\u65b9\u200b\u663e\u793a\u200b\u793a\u4f8b\u200b\u90e8\u5206\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>gr.Examples</code>\u3002\u200b\u7531\u4e8e\u200b <code>gr.Examples</code> \u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5148\u200b\u5b9a\u4e49\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u5b9a\u4e49\u200b <code>gr.Examples</code> \u200b\u5bf9\u8c61\u200b\u4e4b\u540e\u200b\u518d\u200b\u6e32\u67d3\u200b\u5b83\u200b\u3002</p> <p>\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5728\u200b <code>gr.Blocks()</code> \u200b\u8303\u56f4\u200b\u4e4b\u5916\u200b\u5b9a\u4e49\u200b <code>gr.Textbox</code>\uff0c\u200b\u5e76\u200b\u5728\u200b UI \u200b\u4e2d\u200b\u60f3\u8981\u200b\u653e\u7f6e\u200b\u5b83\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4f7f\u7528\u200b\u7ec4\u4ef6\u200b\u7684\u200b <code>.render()</code> \u200b\u65b9\u6cd5\u200b\u3002</p> <p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u7684\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>input_textbox = gr.Textbox()\n\nwith gr.Blocks() as demo:\n    gr.Examples([\"hello\", \"bonjour\", \"merhaba\"], input_textbox)\n    input_textbox.render()\n</code></pre>"},{"location":"cn/03_building-with-blocks/03_state-in-blocks/","title":"\u5206\u5757\u200b\u72b6\u6001\u200b (State in Blocks)","text":"<p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u63a5\u53e3\u200b\u72b6\u6001\u200b\uff0c\u200b\u8fd9\u7bc7\u200b\u6307\u5357\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5206\u5757\u200b\u72b6\u6001\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u5927\u81f4\u76f8\u540c\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/03_state-in-blocks/#global-state","title":"\u5168\u5c40\u200b\u72b6\u6001\u200b (Global State)","text":"<p>\u200b\u5206\u5757\u200b\u4e2d\u200b\u7684\u200b\u5168\u5c40\u200b\u72b6\u6001\u200b\u4e0e\u200b\u63a5\u53e3\u200b\u4e2d\u200b\u7684\u200b\u5168\u5c40\u200b\u72b6\u6001\u200b\u76f8\u540c\u200b\u3002\u200b\u5728\u200b\u51fd\u6570\u8c03\u7528\u200b\u5916\u200b\u521b\u5efa\u200b\u7684\u200b\u4efb\u4f55\u200b\u53d8\u91cf\u200b\u90fd\u200b\u662f\u200b\u5728\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u7684\u200b\u5f15\u7528\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/03_state-in-blocks/#session-state","title":"\u4f1a\u8bdd\u200b\u72b6\u6001\u200b (Session State)","text":"<p>Gradio \u200b\u5728\u200b\u5206\u5757\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u540c\u6837\u200b\u652f\u6301\u200b\u4f1a\u8bdd\u200b\u72b6\u6001\u200b\uff0c\u200b\u5373\u200b\u5728\u200b\u9875\u9762\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u8de8\u200b\u591a\u6b21\u200b\u63d0\u4ea4\u200b\u4fdd\u6301\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u9700\u8981\u200b\u518d\u6b21\u200b\u5f3a\u8c03\u200b\uff0c\u200b\u4f1a\u8bdd\u200b\u6570\u636e\u200b\u4e0d\u4f1a\u200b\u5728\u200b\u6a21\u578b\u200b\u7684\u200b\u4e0d\u540c\u200b\u7528\u6237\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u3002\u200b\u8981\u200b\u5728\u200b\u4f1a\u200b\u8bdd\u200b\u72b6\u6001\u200b\u4e2d\u200b\u5b58\u50a8\u200b\u6570\u636e\u200b\uff0c\u200b\u9700\u8981\u200b\u5b8c\u6210\u200b\u4ee5\u4e0b\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b <code>gr.State()</code> \u200b\u5bf9\u8c61\u200b\u3002\u200b\u5982\u679c\u200b\u6b64\u200b\u53ef\u200b\u72b6\u6001\u200b\u5bf9\u8c61\u200b\u6709\u200b\u4e00\u4e2a\u200b\u9ed8\u8ba4\u503c\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b\u5176\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6784\u9020\u51fd\u6570\u200b\u3002</li> <li>\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b <code>State</code> \u200b\u5bf9\u8c61\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u3002</li> <li>\u200b\u5728\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b\u53d8\u91cf\u200b\u6dfb\u52a0\u200b\u5230\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u548c\u200b\u8fd4\u56de\u503c\u200b\u4e2d\u200b\u3002</li> </ol> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u770b\u200b\u4e00\u4e2a\u200b\u731c\u8bcd\u200b\u6e38\u620f\u200b\u7684\u200b\u4f8b\u5b50\u200b\u3002</p> <p>$code_hangman $demo_hangman</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6e38\u620f\u200b\u4e2d\u200b\u5982\u4f55\u200b\u5b8c\u6210\u200b\u4e0a\u8ff0\u200b\u7684\u200b 3 \u200b\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u6211\u4eec\u200b\u5c06\u200b\u5df2\u200b\u4f7f\u7528\u200b\u7684\u200b\u5b57\u6bcd\u200b\u5b58\u50a8\u200b\u5728\u200b <code>used_letters_var</code> \u200b\u4e2d\u200b\u3002\u200b\u5728\u200b <code>State</code> \u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u521d\u59cb\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u7a7a\u200b\u5217\u8868\u200b<code>[]</code>\u3002</li> <li>\u200b\u5728\u200b <code>btn.click()</code> \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u4e2d\u200b\u90fd\u200b\u5f15\u7528\u200b\u4e86\u200b <code>used_letters_var</code>\u3002</li> <li>\u200b\u5728\u200b <code>guess_letter</code> \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6b64\u200b <code>State</code> \u200b\u7684\u200b\u503c\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>used_letters</code>\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u8fd4\u56de\u200b\u8bed\u53e5\u200b\u4e2d\u200b\u8fd4\u56de\u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b\u8be5\u200b <code>State</code> \u200b\u7684\u200b\u503c\u200b\u3002</li> </ol> <p>\u200b\u5bf9\u4e8e\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u5206\u5757\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u8bb8\u591a\u200b\u5b58\u50a8\u200b\u4f1a\u8bdd\u200b\u72b6\u6001\u200b\u7684\u200b <code>State</code> \u200b\u53d8\u91cf\u200b\u3002</p> <p>\u200b\u5728\u200b\u6587\u6863\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b <code>State</code> \u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/04_custom-CSS-and-JS/","title":"\u81ea\u5b9a\u4e49\u200b\u7684\u200b JS \u200b\u548c\u200b CSS","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u4f55\u200b\u66f4\u200b\u7075\u6d3b\u200b\u5730\u4e3a\u200b Blocks \u200b\u6dfb\u52a0\u200b\u6837\u5f0f\u200b\uff0c\u200b\u5e76\u200b\u6dfb\u52a0\u200b JavaScript \u200b\u4ee3\u7801\u200b\u5230\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u8b66\u544a\u200b\uff1a\u200b\u5728\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b JS \u200b\u548c\u200b CSS \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u67e5\u8be2\u200b\u9009\u62e9\u5668\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u80fd\u200b\u5728\u200b\u6240\u6709\u200b Gradio \u200b\u7248\u672c\u200b\u4e2d\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u56e0\u4e3a\u200b Gradio \u200b\u7684\u200b HTML DOM \u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u751f\u53d8\u5316\u200b\u3002\u200b\u6211\u4eec\u200b\u5efa\u8bae\u200b\u8c28\u614e\u200b\u4f7f\u7528\u200b\u67e5\u8be2\u200b\u9009\u62e9\u5668\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/04_custom-CSS-and-JS/#css","title":"\u81ea\u5b9a\u4e49\u200b\u7684\u200b CSS","text":"<p>Gradio \u200b\u4e3b\u9898\u200b\u662f\u200b\u81ea\u5b9a\u4e49\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5916\u89c2\u200b\u548c\u200b\u611f\u89c9\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u5f0f\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u5404\u79cd\u200b\u4e3b\u9898\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u9009\u62e9\u200b\uff0c\u200b\u6216\u8005\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b\u3002\u200b\u8981\u200b\u5b9e\u73b0\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b <code>theme=</code> kwarg \u200b\u4f20\u9012\u200b\u7ed9\u200b <code>Blocks</code> \u200b\u6784\u9020\u51fd\u6570\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>with gr.Blocks(theme=gr.themes.Glass()):\n    ...\n</code></pre> <p>Gradio \u200b\u81ea\u5e26\u200b\u4e00\u5957\u200b\u9884\u200b\u6784\u5efa\u200b\u7684\u200b\u4e3b\u9898\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b <code>gr.themes.*</code> \u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u8fd9\u4e9b\u200b\u4e3b\u9898\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6269\u5c55\u200b\u8fd9\u4e9b\u200b\u4e3b\u9898\u200b\uff0c\u200b\u6216\u8005\u200b\u4ece\u5934\u5f00\u59cb\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b - \u200b\u6709\u5173\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u4e3b\u9898\u200b\u6307\u5357\u200b\u3002</p> <p>\u200b\u8981\u200b\u589e\u52a0\u200b\u9644\u52a0\u200b\u7684\u200b\u6837\u5f0f\u200b\u80fd\u529b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>css=</code> kwarg \u200b\u5c06\u200b\u4efb\u4f55\u200b CSS \u200b\u4f20\u9012\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p> <p>Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u57fa\u7c7b\u200b\u662f\u200b <code>gradio-container</code>\uff0c\u200b\u56e0\u6b64\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u66f4\u6539\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u80cc\u666f\u200b\u989c\u8272\u200b\uff1a</p> <pre><code>with gr.Blocks(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u5728\u200b\u60a8\u200b\u7684\u200b CSS \u200b\u4e2d\u200b\u5f15\u7528\u200b\u5916\u90e8\u200b\u6587\u4ef6\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b <code>\"file=\"</code> \u200b\u4f5c\u4e3a\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u7684\u200b\u524d\u7f00\u200b\uff08\u200b\u53ef\u4ee5\u200b\u662f\u200b\u76f8\u5bf9\u8def\u5f84\u200b\u6216\u200b\u7edd\u5bf9\u8def\u5f84\u200b\uff09\uff0c\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>with gr.Blocks(css=\".gradio-container {background: url('file=clouds.jpg')}\") as demo:\n    ...\n</code></pre> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5c06\u200b CSS \u200b\u6587\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>css</code> \u200b\u53c2\u6570\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/04_custom-CSS-and-JS/#elem_id-elem_classes","title":"<code>elem_id</code> \u200b\u548c\u200b <code>elem_classes</code> \u200b\u53c2\u6570","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>elem_id</code> \u200b\u6765\u200b\u4e3a\u200b\u4efb\u4f55\u200b\u7ec4\u4ef6\u200b\u6dfb\u52a0\u200b HTML \u200b\u5143\u7d20\u200b <code>id</code>\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b <code>elem_classes</code> \u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u6216\u200b\u7c7b\u200b\u5217\u8868\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u4f7f\u200b\u60a8\u200b\u80fd\u591f\u200b\u66f4\u200b\u8f7b\u677e\u200b\u5730\u200b\u4f7f\u7528\u200b CSS \u200b\u9009\u62e9\u200b\u5143\u7d20\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u66f4\u200b\u6709\u200b\u53ef\u80fd\u200b\u5728\u200b Gradio \u200b\u7248\u672c\u200b\u4e4b\u95f4\u200b\u4fdd\u6301\u7a33\u5b9a\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5185\u7f6e\u200b\u7684\u200b\u7c7b\u540d\u200b\u6216\u200b id \u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u751f\u53d8\u5316\u200b\uff08\u200b\u4f46\u200b\u6b63\u5982\u200b\u4e0a\u9762\u200b\u7684\u200b\u8b66\u544a\u200b\u4e2d\u200b\u6240\u200b\u63d0\u5230\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b CSS\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u5728\u200b Gradio \u200b\u7248\u672c\u200b\u4e4b\u95f4\u200b\u5b8c\u5168\u200b\u517c\u5bb9\u200b\uff0c\u200b\u56e0\u4e3a\u200b DOM \u200b\u5143\u7d20\u200b\u672c\u8eab\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u751f\u53d8\u5316\u200b\uff09\u3002</p> <pre><code>css = \"\"\"\n#warning {background-color: #FFCCCB}\n.feedback textarea {font-size: 24px !important}\n\"\"\"\n\nwith gr.Blocks(css=css) as demo:\n    box1 = gr.Textbox(value=\"Good Job\", elem_classes=\"feedback\")\n    box2 = gr.Textbox(value=\"Failure\", elem_id=\"warning\", elem_classes=\"feedback\")\n</code></pre> <p>CSS <code>#warning</code> \u200b\u89c4\u5219\u200b\u96c6\u4ec5\u200b\u9488\u5bf9\u200b\u7b2c\u4e8c\u4e2a\u200b\u6587\u672c\u6846\u200b\uff0c\u200b\u800c\u200b <code>.feedback</code> \u200b\u89c4\u5219\u200b\u96c6\u5c06\u200b\u540c\u65f6\u200b\u4f5c\u7528\u200b\u4e8e\u200b\u4e24\u4e2a\u200b\u6587\u672c\u6846\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b\u9488\u5bf9\u200b\u7c7b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b <code>!important</code> \u200b\u9009\u62e9\u5668\u200b\u6765\u200b\u8986\u76d6\u200b\u9ed8\u8ba4\u200b\u7684\u200b Gradio \u200b\u6837\u5f0f\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/04_custom-CSS-and-JS/#js","title":"\u81ea\u5b9a\u4e49\u200b\u7684\u200b JS","text":"<p>\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u5177\u6709\u200b <code>_js</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u63a5\u53d7\u200b JavaScript \u200b\u51fd\u6570\u200b\u4f5c\u4e3a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5e76\u200b\u50cf\u200b Python \u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u5904\u7406\u200b\u5b83\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b JavaScript \u200b\u51fd\u6570\u200b\u548c\u200b Python \u200b\u51fd\u6570\u200b\uff08\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5148\u200b\u8fd0\u884c\u200b JavaScript \u200b\u51fd\u6570\u200b\uff09\uff0c\u200b\u6216\u8005\u200b\u4ec5\u200b\u4f20\u9012\u200b JavaScript\uff08\u200b\u5e76\u200b\u5c06\u200b Python \u200b\u7684\u200b <code>fn</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>None</code>\uff09\u3002\u200b\u8bf7\u200b\u67e5\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> <p>$code_blocks_js_methods $demo_blocks_js_methods</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/","title":"\u4f7f\u7528\u200b Gradio \u200b\u5757\u200b\u50cf\u200b\u51fd\u6570\u200b\u4e00\u6837","text":"<p>Tags: TRANSLATION, HUB, SPACES</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b: \u200b\u672c\u200b\u6307\u5357\u200b\u662f\u200b\u5728\u200b\u5757\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u57fa\u7840\u200b\u4e0a\u200b\u6784\u5efa\u200b\u7684\u200b\u3002\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u5148\u200b\u9605\u8bfb\u200b\u8be5\u200b\u6307\u5357\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u4f60\u200b\u77e5\u9053\u200b\u5417\u200b\uff0c\u200b\u9664\u4e86\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u5168\u6808\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6f14\u793a\u200b\uff0cGradio \u200b\u5757\u200b\u5e94\u7528\u200b\u5176\u5b9e\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u666e\u901a\u200b\u7684\u200b Python \u200b\u51fd\u6570\u200b\uff01\uff1f</p> <p>\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5982\u679c\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b <code>demo</code> \u200b\u7684\u200b Gradio \u200b\u5757\u200b\uff08\u200b\u6216\u200b\u754c\u9762\u200b\uff09\u200b\u5e94\u7528\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u4f7f\u7528\u200b\u4efb\u4f55\u200b Python \u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u4f7f\u7528\u200b <code>demo</code>\u3002</p> <p>\u200b\u6240\u4ee5\u200b\uff0c\u200b\u50cf\u200b <code>output = demo(\"Hello\", \"friend\")</code> \u200b\u8fd9\u6837\u200b\u7684\u200b\u64cd\u4f5c\u200b\u4f1a\u200b\u5728\u200b\u8f93\u5165\u200b\u4e3a\u200b \"Hello\" \u200b\u548c\u200b \"friend\" \u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u8fd0\u884c\u200b <code>demo</code> \u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u5b58\u50a8\u200b\u5728\u200b\u53d8\u91cf\u200b <code>output</code> \u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4ee5\u4e0a\u200b\u5185\u5bb9\u200b\u8ba9\u200b\u4f60\u200b\u6253\u778c\u7761\u200b \ud83e\udd71\uff0c\u200b\u8bf7\u200b\u5fcd\u8010\u200b\u4e00\u4e0b\u200b\uff01\u200b\u901a\u8fc7\u200b\u5c06\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u50cf\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u7ec4\u5408\u200b Gradio \u200b\u5e94\u7528\u200b\u3002 \u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u90e8\u5206\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#_2","title":"\u5c06\u5757\u200b\u89c6\u4e3a\u200b\u51fd\u6570","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5c06\u200b\u82f1\u6587\u200b\u6587\u672c\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u5fb7\u6587\u200b\u6587\u672c\u200b\u7684\u200b\u6f14\u793a\u200b\u5757\u200b\u3002</p> <p>$code_english_translator</p> <p>\u200b\u6211\u200b\u5df2\u7ecf\u200b\u5c06\u200b\u5b83\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u7684\u200b gradio/english_translator\u3002</p> <p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4e0b\u9762\u200b\u770b\u5230\u200b\u6f14\u793a\u200b\uff1a</p> <p>$demo_english_translator</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u5047\u8bbe\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e2a\u200b\u751f\u6210\u200b\u82f1\u6587\u200b\u6587\u672c\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u4f46\u200b\u4f60\u200b\u8fd8\u200b\u60f3\u200b\u989d\u5916\u200b\u751f\u6210\u200b\u5fb7\u6587\u200b\u6587\u672c\u200b\u3002</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\uff1a</p> <ol> <li> <p>\u200b\u5c06\u200b\u6211\u200b\u7684\u200b\u82f1\u5fb7\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u590d\u5236\u7c98\u8d34\u200b\u5230\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u6211\u200b\u7684\u200b\u82f1\u5fb7\u200b\u7ffb\u8bd1\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u5f53\u4f5c\u200b\u666e\u901a\u200b\u7684\u200b Python \u200b\u51fd\u6570\u200b\u5904\u7406\u200b\u3002</p> </li> </ol> <p>\u200b\u9009\u9879\u200b 1 \u200b\u4ece\u6280\u672f\u4e0a\u200b\u8bb2\u200b\u603b\u662f\u200b\u6709\u6548\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u7ecf\u5e38\u200b\u5f15\u5165\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u3002</p> <p>\u200b\u9009\u9879\u200b 2 \u200b\u5141\u8bb8\u200b\u4f60\u200b\u501f\u7528\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u8fc7\u4e8e\u200b\u7d27\u5bc6\u200b\u5730\u200b\u8026\u5408\u200b\u6211\u4eec\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p> <p>\u200b\u4f60\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b\u6e90\u6587\u4ef6\u200b\u4e2d\u200b\u8c03\u7528\u200b <code>Blocks.load</code> \u200b\u7c7b\u200b\u65b9\u6cd5\u200b\u5373\u53ef\u200b\u3002 \u200b\u4e4b\u540e\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u4f7f\u7528\u200b\u666e\u901a\u200b\u7684\u200b Python \u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u4f7f\u7528\u200b\u6211\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e86\u200b\uff01</p> <p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u7247\u6bb5\u200b\u548c\u200b\u6f14\u793a\u200b\u5c55\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>Blocks.load</code>\u3002</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u53d8\u91cf\u200b <code>english_translator</code> \u200b\u662f\u200b\u6211\u200b\u7684\u200b\u82f1\u5fb7\u200b\u7ffb\u8bd1\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u5728\u200b <code>generate_text</code> \u200b\u4e2d\u50cf\u200b\u666e\u901a\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u4f7f\u7528\u200b\u3002</p> <p>$code_generate_english_german</p> <p>$demo_generate_english_german</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#_3","title":"\u5982\u4f55\u200b\u63a7\u5236\u200b\u4f7f\u7528\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u54ea\u4e2a\u200b\u51fd\u6570","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u6b63\u5728\u200b\u52a0\u8f7d\u200b\u7684\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u5b9a\u4e49\u200b\u4e86\u200b\u591a\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>fn_index</code> \u200b\u548c\u200b <code>api_name</code> \u200b\u53c2\u6570\u200b\u6307\u5b9a\u200b\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u5728\u200b\u82f1\u5fb7\u200b\u6f14\u793a\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u4f1a\u200b\u770b\u5230\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\u884c\u200b\uff1a</p> <p>translate_btn.click(translate, inputs=english, outputs=german, api_name=\"translate-to-german\")</p> <p>\u200b\u8fd9\u4e2a\u200b <code>api_name</code> \u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u7ed9\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u4e00\u4e2a\u200b\u552f\u4e00\u200b\u7684\u200b\u540d\u79f0\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u540d\u79f0\u200b\u544a\u8bc9\u200b Gradio \u200b\u4f60\u200b\u60f3\u200b\u4f7f\u7528\u200b \u200b\u4e0a\u6e38\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u7684\u200b\u54ea\u4e2a\u200b\u51fd\u6570\u200b\uff1a</p> <p>english_generator(text, api_name=\"translate-to-german\")[0][\"generated_text\"]</p> <p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>fn_index</code> \u200b\u53c2\u6570\u200b\u3002 \u200b\u5047\u8bbe\u200b\u6211\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8fd8\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u82f1\u8bed\u200b\u5230\u200b\u897f\u73ed\u7259\u8bed\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u51fd\u6570\u200b\u3002 \u200b\u4e3a\u4e86\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\uff1a</p> <p>english_generator(text, fn_index=1)[0][\"generated_text\"]</p> <p>Gradio \u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\u662f\u200b\u4ece\u96f6\u5f00\u59cb\u200b\u7d22\u5f15\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u897f\u73ed\u7259\u8bed\u200b\u7ffb\u8bd1\u5668\u200b\u5c06\u200b\u662f\u200b\u6211\u200b\u7684\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e8c\u4e2a\u200b\u51fd\u6570\u200b\uff0c \u200b\u56e0\u6b64\u200b\u4f60\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u7d22\u5f15\u200b 1\u3002</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#_4","title":"\u7ed3\u8bed","text":"<p>\u200b\u6211\u4eec\u200b\u5c55\u793a\u200b\u4e86\u200b\u5c06\u200b\u5757\u200b\u5e94\u7528\u200b\u89c6\u4e3a\u200b\u666e\u901a\u200b Python \u200b\u51fd\u6570\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd9\u200b\u6709\u52a9\u4e8e\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e4b\u95f4\u200b\u7ec4\u5408\u200b\u529f\u80fd\u200b\u3002 \u200b\u4efb\u4f55\u200b\u5757\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f46\u200b\u4e00\u4e2a\u200b\u5f3a\u5927\u200b\u7684\u200b\u6a21\u5f0f\u200b\u662f\u200b\u5728\u200b\u5c06\u200b\u5176\u200b\u89c6\u4e3a\u200b\u51fd\u6570\u200b\u4e4b\u524d\u200b\uff0c \u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Spaces\u200b\u4e0a\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002 \u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u52a0\u8f7d\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Model Hub\u200b\u4e0a\u200b\u7684\u200b\u6a21\u578b\u200b\u2014\u2014\u200b\u6709\u5173\u200b\u793a\u4f8b\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u4f7f\u7528\u200b Hugging Face \u200b\u96c6\u6210\u200b\u6307\u5357\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#_5","title":"\u5f00\u59cb\u200b\u6784\u5efa\u200b\uff01\u2692\ufe0f","text":""},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#parting-remarks","title":"Parting Remarks","text":"<p>\u200b\u6211\u4eec\u200b\u5c55\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u5c06\u200b Blocks \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u89c6\u4e3a\u200b\u5e38\u89c4\u200b Python \u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e4b\u95f4\u200b\u7ec4\u5408\u200b\u529f\u80fd\u200b\u3002 \u200b\u4efb\u4f55\u200b Blocks \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e00\u79cd\u200b\u6709\u6548\u200b\u7684\u200b\u6a21\u5f0f\u200b\u662f\u200b\u5728\u200b\u5c06\u200b\u5176\u200b\u89c6\u4e3a\u200b\u81ea\u5df1\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u51fd\u6570\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5148\u200b<code>\u200b\u52a0\u8f7d\u200b</code>\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Spaces\u200b\u4e0a\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002 \u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u52a0\u8f7d\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Model Hub\u200b\u4e0a\u200b\u7684\u200b\u6a21\u578b\u200b-\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u4f7f\u7528\u200b Hugging Face \u200b\u96c6\u6210\u200b\u6307\u5357\u200b\u4e2d\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p>"},{"location":"cn/03_building-with-blocks/05_using-blocks-like-functions/#happy-building","title":"Happy building! \u2692\ufe0f","text":""},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/","title":"\u4f7f\u7528\u200b Hugging Face \u200b\u96c6\u6210","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/gradio/helsinki_translation_en_es \u200b\u6807\u7b7e\u200b\uff1aHUB\uff0cSPACES\uff0cEMBED</p> <p>\u200b\u7531\u200b Omar Sanseviero \u200b\u8d21\u732e\u200b\ud83e\udd99</p>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#_1","title":"\u4ecb\u7ecd","text":"<p>Hugging Face Hub \u200b\u662f\u200b\u4e00\u4e2a\u200b\u96c6\u6210\u200b\u5e73\u53f0\u200b\uff0c\u200b\u62e5\u6709\u200b\u8d85\u8fc7\u200b 190,000 \u200b\u4e2a\u200b\u6a21\u578b\u200b\uff0c32,000 \u200b\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u548c\u200b 40,000 \u200b\u4e2a\u200b\u6f14\u793a\u200b\uff0c\u200b\u4e5f\u200b\u88ab\u200b\u79f0\u4e3a\u200b Spaces\u3002\u200b\u867d\u7136\u200b Hugging Face \u200b\u4ee5\u200b\u5176\u200b\ud83e\udd17 transformers \u200b\u548c\u200b diffusers \u200b\u5e93\u800c\u200b\u95fb\u540d\u200b\uff0c\u200b\u4f46\u200b Hub \u200b\u8fd8\u200b\u652f\u6301\u200b\u8bb8\u591a\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u5e93\u200b\uff0c\u200b\u5982\u200b PyTorch\uff0cTensorFlow\uff0cspaCy \u200b\u7b49\u200b\uff0c\u200b\u6db5\u76d6\u200b\u4e86\u200b\u4ece\u200b\u8ba1\u7b97\u673a\u200b\u89c6\u89c9\u200b\u5230\u200b\u5f3a\u5316\u200b\u5b66\u4e60\u200b\u7b49\u200b\u5404\u4e2a\u9886\u57df\u200b\u3002</p> <p>Gradio \u200b\u62e5\u6709\u200b\u591a\u4e2a\u200b\u529f\u80fd\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u975e\u5e38\u5bb9\u6613\u200b\u5229\u7528\u200b Hub \u200b\u4e0a\u200b\u7684\u200b\u73b0\u6709\u200b\u6a21\u578b\u200b\u548c\u200b Spaces\u3002\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u8fd9\u4e9b\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#pipeline","title":"\u4f7f\u7528\u200b <code>pipeline</code> \u200b\u8fdb\u884c\u200b\u5e38\u89c4\u200b\u63a8\u7406","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u754c\u9762\u200b\uff0c\u200b\u5c06\u200b\u82f1\u6587\u7ffb\u8bd1\u200b\u6210\u200b\u897f\u73ed\u7259\u6587\u200b\u3002\u200b\u5728\u200b\u8d6b\u5c14\u8f9b\u57fa\u5927\u5b66\u200b\u5171\u4eab\u200b\u7684\u200b\u4e00\u5343\u591a\u4e2a\u200b\u6a21\u578b\u200b\u4e2d\u200b\uff0c\u200b\u6709\u200b\u4e00\u4e2a\u200b\u73b0\u6709\u200b\u6a21\u578b\u200b\uff0c\u200b\u540d\u4e3a\u200b <code>opus-mt-en-es</code>\uff0c\u200b\u53ef\u4ee5\u200b\u6b63\u597d\u200b\u505a\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff01</p> <p>\ud83e\udd17 transformers \u200b\u5e93\u6709\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u6613\u4e8e\u200b\u4f7f\u7528\u200b\u7684\u200b\u62bd\u8c61\u200b\u5c42\u200b\uff0c<code>pipeline()</code>\u200b\u5904\u7406\u200b\u5927\u90e8\u5206\u200b\u590d\u6742\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4e3a\u200b\u5e38\u89c1\u200b\u4efb\u52a1\u200b\u63d0\u4f9b\u200b\u7b80\u5355\u200b\u7684\u200b API\u3002\u200b\u901a\u8fc7\u200b\u6307\u5b9a\u200b\u4efb\u52a1\u200b\u548c\u200b\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\u200b\u6a21\u578b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\u4f7f\u7528\u200b\u73b0\u6709\u200b\u6a21\u578b\u200b\uff1a</p> <pre><code>import gradio as gr\n\nfrom transformers import pipeline\n\npipe = pipeline(\"translation\", model=\"Helsinki-NLP/opus-mt-en-es\")\n\ndef predict(text):\n  return pipe(text)[0][\"translation_text\"]\n\ndemo = gr.Interface(\n  fn=predict,\n  inputs='text',\n  outputs='text',\n)\n\ndemo.launch()\n</code></pre> <p>\u200b\u4f46\u662f\u200b\uff0c<code>gradio</code> \u200b\u5b9e\u9645\u4e0a\u200b\u4f7f\u200b\u5c06\u200b <code>pipeline</code> \u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6f14\u793a\u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u4f7f\u7528\u200b <code>gradio.Interface.from_pipeline</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u65e0\u9700\u200b\u6307\u5b9a\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\uff1a</p> <pre><code>from transformers import pipeline\nimport gradio as gr\n\npipe = pipeline(\"translation\", model=\"Helsinki-NLP/opus-mt-en-es\")\n\ndemo = gr.Interface.from_pipeline(pipe)\ndemo.launch()\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u751f\u6210\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u754c\u9762\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u76f4\u63a5\u200b\u5c1d\u8bd5\u200b\uff1a</p> <p></p>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#using-hugging-face-inference-api","title":"Using Hugging Face Inference API","text":"<p>Hugging Face \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200bInference API\u200b\u7684\u200b\u514d\u8d39\u200b\u670d\u52a1\u200b\uff0c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5411\u200b Hub \u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u53d1\u9001\u200b HTTP \u200b\u8bf7\u6c42\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u57fa\u4e8e\u200b transformers \u200b\u6216\u200b diffusers \u200b\u7684\u200b\u6a21\u578b\u200b\uff0cAPI \u200b\u7684\u200b\u901f\u5ea6\u200b\u53ef\u4ee5\u200b\u6bd4\u200b\u81ea\u5df1\u200b\u8fd0\u884c\u200b\u63a8\u7406\u200b\u5feb\u200b 2 \u200b\u5230\u200b 10 \u200b\u500d\u200b\u3002\u200b\u8be5\u200b API \u200b\u662f\u200b\u514d\u8d39\u200b\u7684\u200b\uff08\u200b\u53d7\u200b\u901f\u7387\u200b\u9650\u5236\u200b\uff09\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u60f3\u8981\u200b\u5728\u200b\u751f\u4ea7\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u65f6\u200b\u5207\u6362\u200b\u5230\u200b\u4e13\u7528\u200b\u7684\u200b\u63a8\u7406\u200b\u7aef\u70b9\u200b\u3002</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b\u63a8\u7406\u200b API \u200b\u800c\u200b\u4e0d\u662f\u200b\u81ea\u5df1\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u7684\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u76f8\u540c\u200b\u7684\u200b\u6f14\u793a\u200b\u3002\u200b\u9274\u4e8e\u200b Inference API \u200b\u652f\u6301\u200b\u7684\u200b Hugging Face \u200b\u6a21\u578b\u200b\uff0cGradio \u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u63a8\u65ad\u51fa\u200b\u9884\u671f\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5e76\u200b\u8fdb\u884c\u200b\u5e95\u5c42\u200b\u670d\u52a1\u5668\u200b\u8c03\u7528\u200b\uff0c\u200b\u56e0\u6b64\u200b\u60a8\u200b\u4e0d\u5fc5\u200b\u62c5\u5fc3\u200b\u5b9a\u4e49\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\uff01</p> <pre><code>import gradio as gr\n\ndemo = gr.load(\"Helsinki-NLP/opus-mt-en-es\", src=\"models\")\n\ndemo.launch()\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u200b\u6307\u5b9a\u200b\u6a21\u578b\u200b\u540d\u79f0\u200b\u5e76\u200b\u8bf4\u660e\u200b <code>src</code> \u200b\u5e94\u4e3a\u200b <code>models</code>\uff08Hugging Face \u200b\u7684\u200b Model Hub\uff09\u3002\u200b\u7531\u4e8e\u200b\u60a8\u200b\u4e0d\u4f1a\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\uff0c\u200b\u56e0\u6b64\u200b\u65e0\u9700\u200b\u5b89\u88c5\u200b\u4efb\u4f55\u200b\u4f9d\u8d56\u200b\u9879\u200b\uff08\u200b\u9664\u4e86\u200b <code>gradio</code>\uff09\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\uff0c\u200b\u7b2c\u4e00\u6b21\u200b\u63a8\u7406\u200b\u5927\u7ea6\u200b\u9700\u8981\u200b 20 \u200b\u79d2\u200b\u3002\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u63a8\u7406\u200b API \u200b\u6b63\u5728\u200b\u670d\u52a1\u5668\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u3002\u200b\u4e4b\u540e\u200b\u60a8\u200b\u4f1a\u200b\u83b7\u5f97\u200b\u4e00\u4e9b\u200b\u597d\u5904\u200b\uff1a</p> <ul> <li>\u200b\u63a8\u7406\u200b\u901f\u5ea6\u200b\u66f4\u200b\u5feb\u200b\u3002</li> <li>\u200b\u670d\u52a1\u5668\u200b\u7f13\u5b58\u200b\u60a8\u200b\u7684\u200b\u8bf7\u6c42\u200b\u3002</li> <li>\u200b\u60a8\u200b\u83b7\u5f97\u200b\u5185\u7f6e\u200b\u7684\u200b\u81ea\u52a8\u200b\u7f29\u653e\u200b\u529f\u80fd\u200b\u3002</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#gradio","title":"\u6258\u7ba1\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a","text":"<p>Hugging Face Spaces\u200b\u5141\u8bb8\u200b\u4efb\u4f55\u4eba\u200b\u514d\u8d39\u200b\u6258\u7ba1\u200b\u5176\u200b Gradio \u200b\u6f14\u793a\u200b\uff0c\u200b\u4e0a\u4f20\u200b Gradio \u200b\u6f14\u793a\u200b\u53ea\u200b\u9700\u200b\u51e0\u5206\u949f\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u524d\u5f80\u200bhf.co/new-space\uff0c\u200b\u9009\u62e9\u200b Gradio SDK\uff0c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b <code>app.py</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5b8c\u6210\u200b\uff01\u200b\u60a8\u200b\u5c06\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u4e0e\u200b\u4efb\u4f55\u4eba\u200b\u5171\u4eab\u200b\u7684\u200b\u6f14\u793a\u200b\u3002\u200b\u8981\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u9605\u8bfb\u200b\u6b64\u200b\u6307\u5357\u200b\u4ee5\u200b\u4f7f\u7528\u200b\u7f51\u7ad9\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u6258\u7ba1\u200b\u3002</p> <p>\u200b\u6216\u8005\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200bhuggingface_hub client library\u200b\u5e93\u6765\u200b\u4ee5\u200b\u7f16\u7a0b\u200b\u65b9\u5f0f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b Space\u3002\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>from huggingface_hub import (\n    create_repo,\n    get_full_repo_name,\n    upload_file,\n)\ncreate_repo(name=target_space_name, token=hf_token, repo_type=\"space\", space_sdk=\"gradio\")\nrepo_name = get_full_repo_name(model_id=target_space_name, token=hf_token)\nfile_url = upload_file(\n    path_or_fileobj=\"file.txt\",\n    path_in_repo=\"app.py\",\n    repo_id=repo_name,\n    repo_type=\"space\",\n    token=hf_token,\n)\n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c<code>create_repo</code> \u200b\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u5e10\u6237\u200b\u7684\u200b Write Token \u200b\u5728\u200b\u7279\u5b9a\u200b\u5e10\u6237\u200b\u4e0b\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u76ee\u6807\u200b\u540d\u79f0\u200b\u7684\u200b gradio repo\u3002<code>repo_name</code> \u200b\u83b7\u53d6\u200b\u76f8\u5173\u200b\u5b58\u50a8\u200b\u5e93\u200b\u7684\u200b\u5b8c\u6574\u200b\u5b58\u50a8\u200b\u5e93\u200b\u540d\u79f0\u200b\u3002\u200b\u6700\u540e\u200b\uff0c<code>upload_file</code> \u200b\u5c06\u200b\u6587\u4ef6\u200b\u4e0a\u200b\u4f20\u5230\u200b\u5b58\u50a8\u200b\u5e93\u4e2d\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u547d\u540d\u200b\u4e3a\u200b <code>app.py</code>\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#space","title":"\u5728\u200b\u5176\u4ed6\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u5d4c\u5165\u200b\u60a8\u200b\u7684\u200b Space \u200b\u6f14\u793a","text":"<p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u770b\u5230\u200b\u4e86\u200b\u8bb8\u591a\u200b\u5d4c\u5165\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u3002\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u8fd9\u6837\u200b\u505a\u200b\uff01\u200b\u7b2c\u4e00\u6b65\u200b\u662f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u60a8\u200b\u60f3\u200b\u5c55\u793a\u200b\u7684\u200b\u6f14\u793a\u200b\u7684\u200b Hugging Face Space\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6309\u7167\u200b\u6b64\u5904\u200b\u7684\u200b\u6b65\u9aa4\u200b\u5c06\u200b Space \u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#spaces","title":"\u4ece\u200b Spaces \u200b\u52a0\u8f7d\u200b\u6f14\u793a","text":"<p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u4f7f\u7528\u200b\u548c\u200b\u6df7\u5408\u200b\u73b0\u6709\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4e24\u4e2a\u200b\u73b0\u6709\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u653e\u5728\u200b\u5355\u72ec\u200b\u7684\u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u5e76\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6f14\u793a\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u672c\u5730\u200b\u8fd0\u884c\u200b\u6b64\u65b0\u200b\u6f14\u793a\u200b\uff0c\u200b\u6216\u200b\u5c06\u200b\u5176\u200b\u4e0a\u200b\u4f20\u5230\u200b Spaces\uff0c\u200b\u4e3a\u200b\u6df7\u5408\u200b\u548c\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u6f14\u793a\u200b\u63d0\u4f9b\u200b\u65e0\u9650\u200b\u53ef\u80fd\u6027\u200b\uff01</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u5168\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u76ee\u6807\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n  with gr.Tab(\"Translate to Spanish\"):\n    gr.load(\"gradio/helsinki_translation_en_es\", src=\"spaces\")\n  with gr.Tab(\"Translate to French\"):\n    gr.load(\"abidlabs/en2fr\", src=\"spaces\")\n\ndemo.launch()\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e86\u200b <code>gr.load()</code>\uff0c\u200b\u8fd9\u200b\u4e0e\u200b\u4f7f\u7528\u200b\u63a8\u7406\u200b API \u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u6240\u200b\u4f7f\u7528\u200b\u7684\u200b\u65b9\u6cd5\u200b\u76f8\u540c\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u6307\u5b9a\u200b <code>src</code> \u200b\u4e3a\u200b <code>spaces</code>\uff08Hugging Face Spaces\uff09\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/01_using-hugging-face-integrations/#_2","title":"\u5c0f\u7ed3","text":"<p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u8ba9\u200b\u6211\u4eec\u200b\u56de\u987e\u200b\u4e00\u4e0b\u200b Gradio \u200b\u548c\u200b Hugging Face \u200b\u5171\u540c\u200b\u5de5\u4f5c\u200b\u7684\u200b\u5404\u79cd\u200b\u65b9\u5f0f\u200b\uff1a</p> <ol> <li>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>from_pipeline()</code> \u200b\u5c06\u200b <code>transformers</code> pipeline \u200b\u8f6c\u6362\u200b\u4e3a\u200b Gradio \u200b\u6f14\u793a\u200b</li> <li>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gr.load()</code> \u200b\u8f7b\u677e\u200b\u5730\u200b\u56f4\u7ed5\u200b\u63a8\u7406\u200b API \u200b\u6784\u5efa\u200b\u6f14\u793a\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b</li> <li>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u6258\u7ba1\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b GUI \u200b\u6216\u200b\u5b8c\u5168\u200b\u4f7f\u7528\u200b Python\u3002</li> <li>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u5d4c\u5165\u200b\u5230\u200b\u81ea\u5df1\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u3002</li> <li>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gr.load()</code> \u200b\u4ece\u200b Hugging Face Spaces \u200b\u52a0\u8f7d\u200b\u6f14\u793a\u200b\uff0c\u200b\u4ee5\u200b\u91cd\u65b0\u200b\u6df7\u5408\u200b\u548c\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u3002</li> </ol> <p>\ud83e\udd17</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/","title":"\u4f7f\u7528\u200b Gradio \u200b\u548c\u200b Comet","text":"<p>Tags: COMET, SPACES \u200b\u7531\u200b Comet \u200b\u56e2\u961f\u200b\u8d21\u732e\u200b</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5c55\u793a\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Gradio \u200b\u548c\u200b Comet\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u4f7f\u7528\u200b Comet \u200b\u548c\u200b Gradio \u200b\u7684\u200b\u57fa\u672c\u77e5\u8bc6\u200b\uff0c\u200b\u5e76\u200b\u5411\u200b\u60a8\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u5229\u7528\u200b Gradio \u200b\u7684\u200b\u9ad8\u7ea7\u200b\u529f\u80fd\u200b\uff0c\u200b\u5982\u200b \u200b\u4f7f\u7528\u200b iFrames \u200b\u8fdb\u884c\u200b\u5d4c\u5165\u200b \u200b\u548c\u200b \u200b\u72b6\u6001\u200b \u200b\u6765\u200b\u6784\u5efa\u200b\u4e00\u4e9b\u200b\u4ee4\u4eba\u60ca\u53f9\u200b\u7684\u200b\u6a21\u578b\u200b\u8bc4\u4f30\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u672c\u200b\u6307\u5357\u200b\u6db5\u76d6\u200b\u7684\u200b\u4e3b\u9898\u200b\u5217\u8868\u200b\u3002</p> <ol> <li>\u200b\u5c06\u200b Gradio UI \u200b\u8bb0\u5f55\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u5b9e\u9a8c\u200b\u4e2d\u200b</li> <li>\u200b\u76f4\u63a5\u200b\u5c06\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u9879\u76ee\u200b\u4e2d\u200b</li> <li>\u200b\u76f4\u63a5\u200b\u5c06\u200b Hugging Face Spaces \u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u9879\u76ee\u200b\u4e2d\u200b</li> <li>\u200b\u5c06\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u8bb0\u5f55\u200b\u5230\u200b Comet \u200b\u4e2d\u200b</li> </ol>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#comet","title":"\u4ec0\u4e48\u200b\u662f\u200b Comet\uff1f","text":"<p>Comet \u200b\u662f\u200b\u4e00\u4e2a\u200b MLOps \u200b\u5e73\u53f0\u200b\uff0c\u200b\u65e8\u5728\u200b\u5e2e\u52a9\u200b\u6570\u636e\u200b\u79d1\u5b66\u5bb6\u200b\u548c\u200b\u56e2\u961f\u200b\u66f4\u5feb\u200b\u5730\u200b\u6784\u5efa\u200b\u66f4\u597d\u200b\u7684\u200b\u6a21\u578b\u200b\uff01Comet \u200b\u63d0\u4f9b\u200b\u5de5\u5177\u200b\u6765\u200b\u8ddf\u8e2a\u200b\u3001\u200b\u89e3\u91ca\u200b\u3001\u200b\u7ba1\u7406\u200b\u548c\u200b\u76d1\u63a7\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u96c6\u4e2d\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5730\u65b9\u200b\uff01\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u4e0e\u200b Jupyter \u200b\u7b14\u8bb0\u672c\u200b\u548c\u200b\u811a\u672c\u200b\u914d\u5408\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b 100% \u200b\u514d\u8d39\u200b\u7684\u200b\uff01</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#_2","title":"\u8bbe\u7f6e","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u5b89\u88c5\u200b\u8fd0\u884c\u200b\u8fd9\u4e9b\u200b\u793a\u4f8b\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b</p> <pre><code>pip install comet_ml torch torchvision transformers gradio shap requests Pillow\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u6ce8\u518c\u200b\u4e00\u4e2a\u200b Comet \u200b\u8d26\u6237\u200b\u3002\u200b\u4e00\u65e6\u200b\u60a8\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u60a8\u200b\u7684\u200b\u8d26\u6237\u200b\uff0c\u200b\u83b7\u53d6\u200b\u60a8\u200b\u7684\u200b API \u200b\u5bc6\u94a5\u200b \u200b\u5e76\u200b\u914d\u7f6e\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u51ed\u636e\u200b</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u793a\u4f8b\u200b\u4f5c\u4e3a\u200b\u811a\u672c\u200b\u8fd0\u884c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b\u51ed\u636e\u200b\u5bfc\u51fa\u200b\u4e3a\u200b\u73af\u5883\u53d8\u91cf\u200b</p> <pre><code>export COMET_API_KEY=\"&lt;\u200b\u60a8\u200b\u7684\u200b API \u200b\u5bc6\u94a5\u200b&gt;\"\nexport COMET_WORKSPACE=\"&lt;\u200b\u60a8\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7a7a\u95f4\u200b\u540d\u79f0\u200b&gt;\"\nexport COMET_PROJECT_NAME=\"&lt;\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u540d\u79f0\u200b&gt;\"\n</code></pre> <p>\u200b\u6216\u8005\u200b\u5c06\u200b\u5b83\u4eec\u200b\u8bbe\u7f6e\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b <code>.comet.config</code> \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002\u200b\u60a8\u200b\u7684\u200b\u6587\u4ef6\u200b\u5e94\u200b\u6309\u200b\u4ee5\u4e0b\u200b\u65b9\u5f0f\u200b\u683c\u5f0f\u5316\u200b\u3002</p> <pre><code>[comet]\napi_key=&lt;\u200b\u60a8\u200b\u7684\u200b API \u200b\u5bc6\u94a5\u200b&gt;\nworkspace=&lt;\u200b\u60a8\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7a7a\u95f4\u200b\u540d\u79f0\u200b&gt;\nproject_name=&lt;\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u540d\u79f0\u200b&gt;\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u63d0\u4f9b\u200b\u7684\u200b Colab Notebooks \u200b\u8fd0\u884c\u200b\u8fd9\u4e9b\u200b\u793a\u4f8b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u5f00\u59cb\u200b Gradio UI \u200b\u4e4b\u524d\u200b\u8fd0\u884c\u200b\u5e26\u6709\u200b\u4ee5\u4e0b\u200b\u7247\u6bb5\u200b\u7684\u200b\u5355\u5143\u683c\u200b\u3002\u200b\u8fd0\u884c\u200b\u6b64\u200b\u5355\u5143\u683c\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u60a8\u200b\u4ea4\u4e92\u5f0f\u200b\u5730\u200b\u5c06\u200b API \u200b\u5bc6\u94a5\u200b\u6dfb\u52a0\u200b\u5230\u200b\u7b14\u8bb0\u672c\u200b\u4e2d\u200b\u3002</p> <pre><code>import comet_ml\ncomet_ml.init()\n</code></pre>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#1-gradio-ui-comet","title":"1. \u200b\u5c06\u200b Gradio UI \u200b\u8bb0\u5f55\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u5b9e\u9a8c\u200b\u4e2d","text":"<p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8bb0\u5f55\u200b\u5230\u200b Comet\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b Gradio \u200b\u81ea\u5b9a\u4e49\u200b\u9762\u677f\u200b\u4e0e\u5176\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5148\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b <code>resnet18</code> \u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>import comet_ml\n\nimport requests\nimport torch\nfrom PIL import Image\nfrom torchvision import transforms\n\ntorch.hub.download_url_to_file(\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n\nif torch.cuda.is_available():\n    device = \"cuda\"\nelse:\n    device = \"cpu\"\n\nmodel = torch.hub.load(\"pytorch/vision:v0.6.0\", \"resnet18\", pretrained=True).eval()\nmodel = model.to(device)\n\n# \u200b\u4e3a\u200b ImageNet \u200b\u4e0b\u8f7d\u200b\u53ef\u8bfb\u200b\u7684\u200b\u6807\u7b7e\u200b\u3002\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\n\ndef predict(inp):\n    inp = Image.fromarray(inp.astype(\"uint8\"), \"RGB\")\n    inp = transforms.ToTensor()(inp).unsqueeze(0)\n    with torch.no_grad():\n        prediction = torch.nn.functional.softmax(model(inp.to(device))[0], dim=0)\n    return {labels[i]: float(prediction[i]) for i in range(1000)}\n\n\ninputs = gr.Image()\noutputs = gr.Label(num_top_classes=3)\n\nio = gr.Interface(\n    fn=predict, inputs=inputs, outputs=outputs, examples=[\"dog.jpg\"]\n)\nio.launch(inline=False, share=True)\n\nexperiment = comet_ml.Experiment()\nexperiment.add_tag(\"image-classifier\")\n\nio.integrate(comet_ml=experiment)\n</code></pre> <p>\u200b\u6b64\u200b\u7247\u6bb5\u200b\u4e2d\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u884c\u200b\u5c06\u200b\u5c06\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b URL \u200b\u8bb0\u5f55\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u5b9e\u9a8c\u200b\u4e2d\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5b9e\u9a8c\u200b\u7684\u200b\u6587\u672c\u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u627e\u5230\u200b\u8be5\u200b URL\u3002</p> <p>\u200b\u5c06\u200b Gradio \u200b\u9762\u677f\u200b\u6dfb\u52a0\u200b\u5230\u200b\u60a8\u200b\u7684\u200b\u5b9e\u9a8c\u200b\u4e2d\u200b\uff0c\u200b\u4e0e\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#2-gradio-comet","title":"2. \u200b\u76f4\u63a5\u200b\u5c06\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u9879\u76ee\u200b\u4e2d","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u8981\u200b\u957f\u671f\u200b\u6258\u7ba1\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Gradio Panel Extended \u200b\u81ea\u5b9a\u4e49\u200b\u9762\u677f\u200b\u8fdb\u884c\u200b\u5d4c\u5165\u200b UI\u3002</p> <p>\u200b\u8f6c\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u9879\u76ee\u200b\u9875\u9762\u200b\uff0c\u200b\u8f6c\u200b\u5230\u200b\u9762\u677f\u200b\u9009\u9879\u5361\u200b\u3002\u200b\u5355\u51fb\u200b\u201c+ \u200b\u6dfb\u52a0\u200b\u201d\u200b\u6309\u94ae\u200b\u4ee5\u200b\u6253\u5f00\u200b\u9762\u677f\u200b\u641c\u7d22\u200b\u9875\u9762\u200b\u3002</p> <p></p> <p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u5728\u200b\u516c\u5171\u200b\u9762\u677f\u200b\u90e8\u5206\u200b\u641c\u7d22\u200b Gradio Panel Extended \u200b\u5e76\u200b\u5355\u51fb\u200b\u201c\u200b\u6dfb\u52a0\u200b\u201d\u3002</p> <p></p> <p>\u200b\u6dfb\u52a0\u200b\u9762\u677f\u200b\u540e\u200b\uff0c\u200b\u5355\u51fb\u200b\u201c\u200b\u7f16\u8f91\u200b\u201d\u200b\u4ee5\u200b\u8bbf\u95ee\u200b\u9762\u677f\u200b\u9009\u9879\u200b\u9875\u9762\u200b\uff0c\u200b\u5e76\u200b\u7c98\u8d34\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b URL\u3002</p> <p></p> <p></p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#3-hugging-face-spaces-comet","title":"3. \u200b\u76f4\u63a5\u200b\u5c06\u200b Hugging Face Spaces \u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u9879\u76ee\u200b\u4e2d","text":"<p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Hugging Face Spaces \u200b\u9762\u677f\u200b\u5c06\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Faces Spaces \u200b\u4e2d\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Comet \u200b\u9879\u76ee\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u8f6c\u200b\u5230\u200b Comet \u200b\u9879\u76ee\u200b\u9875\u9762\u200b\uff0c\u200b\u8f6c\u200b\u5230\u200b\u9762\u677f\u200b\u9009\u9879\u5361\u200b\u3002\u200b\u5355\u51fb\u200b\u201c+\u200b\u6dfb\u52a0\u200b\u201d\u200b\u6309\u94ae\u200b\u4ee5\u200b\u6253\u5f00\u200b\u9762\u677f\u200b\u641c\u7d22\u200b\u9875\u9762\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u5728\u200b\u516c\u5171\u200b\u9762\u677f\u200b\u90e8\u5206\u200b\u641c\u7d22\u200b Hugging Face Spaces \u200b\u9762\u677f\u200b\u5e76\u200b\u5355\u51fb\u200b\u201c\u200b\u6dfb\u52a0\u200b\u201d\u3002</p> <p></p> <p>\u200b\u6dfb\u52a0\u200b\u9762\u677f\u200b\u540e\u200b\uff0c\u200b\u5355\u51fb\u200b\u201c\u200b\u7f16\u8f91\u200b\u201d\u200b\u4ee5\u200b\u8bbf\u95ee\u200b\u9762\u677f\u200b\u9009\u9879\u200b\u9875\u9762\u200b\uff0c\u200b\u5e76\u200b\u7c98\u8d34\u200b\u60a8\u200b\u7684\u200b Hugging Face Space \u200b\u8def\u5f84\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>pytorch/ResNet</code></p> <p></p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#4-comet","title":"4. \u200b\u8bb0\u5f55\u200b\u6a21\u578b\u200b\u63a8\u65ad\u200b\u7ed3\u679c\u200b\u5230\u200b Comet","text":"<p>\u200b\u5728\u200b\u524d\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u6f14\u793a\u200b\u4e86\u200b\u901a\u8fc7\u200b Comet UI \u200b\u4e0e\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4ea4\u4e92\u200b\u7684\u200b\u5404\u79cd\u200b\u65b9\u6cd5\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5c06\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u6a21\u578b\u200b\u63a8\u65ad\u200b\uff08\u200b\u4f8b\u5982\u200b SHAP \u200b\u56fe\u200b\uff09\u200b\u8bb0\u5f55\u200b\u5230\u200b Comet \u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u6bb5\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8bb0\u5f55\u200b\u6765\u81ea\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u7684\u200b\u63a8\u65ad\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200bState\u200b\u5bf9\u8c61\u200b\u5728\u200b\u591a\u6b21\u200b\u63a8\u65ad\u200b\u8c03\u7528\u200b\u4e4b\u95f4\u200b\u4fdd\u6301\u200b\u5b9e\u9a8c\u200b\u7684\u200b\u6301\u4e45\u6027\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u4f7f\u200b\u60a8\u200b\u80fd\u591f\u200b\u5c06\u200b\u591a\u4e2a\u200b\u6a21\u578b\u200b\u63a8\u65ad\u200b\u8bb0\u5f55\u200b\u5230\u200b\u5355\u4e2a\u200b\u5b9e\u9a8c\u200b\u4e2d\u200b\u3002</p> <pre><code>import comet_ml\nimport gradio as gr\nimport shap\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\nif torch.cuda.is_available():\n    device = \"cuda\"\nelse:\n    device = \"cpu\"\n\nMODEL_NAME = \"gpt2\"\n\nmodel = AutoModelForCausalLM.from_pretrained(MODEL_NAME)\n\n# set model decoder to true\nmodel.config.is_decoder = True\n# set text-generation params under task_specific_params\nmodel.config.task_specific_params[\"text-generation\"] = {\n    \"do_sample\": True,\n    \"max_length\": 50,\n    \"temperature\": 0.7,\n    \"top_k\": 50,\n    \"no_repeat_ngram_size\": 2,\n}\nmodel = model.to(device)\n\ntokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\nexplainer = shap.Explainer(model, tokenizer)\n\n\ndef start_experiment():\n    \"\"\"Returns an APIExperiment object that is thread safe\n    and can be used to log inferences to a single Experiment\n    \"\"\"\n    try:\n        api = comet_ml.API()\n        workspace = api.get_default_workspace()\n        project_name = comet_ml.config.get_config()[\"comet.project_name\"]\n\n        experiment = comet_ml.APIExperiment(\n            workspace=workspace, project_name=project_name\n        )\n        experiment.log_other(\"Created from\", \"gradio-inference\")\n\n        message = f\"Started Experiment: [{experiment.name}]({experiment.url})\"\n        return (experiment, message)\n\n    except Exception as e:\n        return None, None\n\n\ndef predict(text, state, message):\n    experiment = state\n\n    shap_values = explainer([text])\n    plot = shap.plots.text(shap_values, display=False)\n\n    if experiment is not None:\n        experiment.log_other(\"message\", message)\n        experiment.log_html(plot)\n\n    return plot\n\n\nwith gr.Blocks() as demo:\n    start_experiment_btn = gr.Button(\"Start New Experiment\")\n    experiment_status = gr.Markdown()\n\n    # Log a message to the Experiment to provide more context\n    experiment_message = gr.Textbox(label=\"Experiment Message\")\n    experiment = gr.State()\n\n    input_text = gr.Textbox(label=\"Input Text\", lines=5, interactive=True)\n    submit_btn = gr.Button(\"Submit\")\n\n    output = gr.HTML(interactive=True)\n\n    start_experiment_btn.click(\n        start_experiment, outputs=[experiment, experiment_status]\n    )\n    submit_btn.click(\n        predict, inputs=[input_text, experiment, experiment_message], outputs=[output]\n    )\n</code></pre> <p>\u200b\u8be5\u200b\u4ee3\u7801\u6bb5\u200b\u4e2d\u200b\u7684\u200b\u63a8\u65ad\u200b\u7ed3\u679c\u200b\u5c06\u200b\u4fdd\u5b58\u200b\u5728\u200b\u5b9e\u9a8c\u200b\u7684\u200b HTML \u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#_3","title":"\u7ed3\u8bba","text":"<p>\u200b\u5e0c\u671b\u200b\u60a8\u200b\u5bf9\u200b\u672c\u200b\u6307\u5357\u200b\u6709\u6240\u200b\u88e8\u76ca\u200b\uff0c\u200b\u5e76\u200b\u80fd\u200b\u4e3a\u200b\u60a8\u200b\u6784\u5efa\u200b\u51fa\u8272\u200b\u7684\u200b Comet \u200b\u548c\u200b Gradio \u200b\u6a21\u578b\u200b\u8bc4\u4f30\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u63d0\u4f9b\u200b\u4e00\u4e9b\u200b\u542f\u793a\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#comet-gradio","title":"\u5982\u4f55\u200b\u5728\u200b Comet \u200b\u7ec4\u7ec7\u200b\u4e0a\u200b\u8d21\u732e\u200b Gradio \u200b\u6f14\u793a","text":"<ul> <li>\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u521b\u5efa\u200b\u5e10\u53f7\u200b\u6b64\u5904\u200b\u3002</li> <li>\u200b\u5728\u200b\u7528\u6237\u540d\u200b\u4e0b\u200b\u6dfb\u52a0\u200b Gradio \u200b\u6f14\u793a\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u6b64\u5904\u200b\u4ee5\u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a\u200b\u3002</li> <li>\u200b\u8bf7\u6c42\u200b\u52a0\u5165\u200b Comet \u200b\u7ec4\u7ec7\u200b\u6b64\u5904\u200b\u3002</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Comet/#_4","title":"\u66f4\u200b\u591a\u200b\u8d44\u6e90","text":"<ul> <li>Comet \u200b\u6587\u6863\u200b</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/","title":"Gradio \u200b\u548c\u200b ONNX \u200b\u5728\u200b Hugging Face \u200b\u4e0a","text":"<p>Related spaces: https://huggingface.co/spaces/onnx/EfficientNet-Lite4 Tags: ONNX\uff0cSPACES \u200b\u7531\u200b Gradio \u200b\u548c\u200b ONNX \u200b\u56e2\u961f\u200b\u8d21\u732e\u200b</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4e3a\u200b\u60a8\u200b\u4ecb\u7ecd\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a</p> <ul> <li>ONNX\u3001ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u3001Gradio \u200b\u548c\u200b Hugging Face Spaces \u200b\u7684\u200b\u4ecb\u7ecd\u200b</li> <li>\u200b\u5982\u4f55\u200b\u4e3a\u200b EfficientNet-Lite4 \u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a\u200b</li> <li>\u200b\u5982\u4f55\u200b\u4e3a\u200b Hugging Face \u200b\u4e0a\u200b\u7684\u200b ONNX \u200b\u7ec4\u7ec7\u200b\u8d21\u732e\u200b\u81ea\u5df1\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b</li> </ul> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b ONNX \u200b\u6a21\u578b\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a\u200b\u5728\u200b\u4e0b\u9762\u200b\u5c1d\u8bd5\u200b EfficientNet-Lite4 \u200b\u6f14\u793a\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#onnx","title":"ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>Open Neural Network Exchange\uff08ONNX\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u8868\u793a\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u7684\u200b\u5f00\u653e\u200b\u6807\u51c6\u200b\u683c\u5f0f\u200b\u3002ONNX \u200b\u7531\u200b\u4e00\u4e2a\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8be5\u200b\u683c\u5f0f\u200b\u7684\u200b\u5408\u4f5c\u4f19\u4f34\u200b\u793e\u533a\u200b\u652f\u6301\u200b\uff0c\u200b\u8be5\u200b\u793e\u533a\u200b\u5c06\u200b\u5176\u200b\u5b9e\u65bd\u200b\u5230\u200b\u8bb8\u591a\u200b\u6846\u67b6\u200b\u548c\u200b\u5de5\u5177\u200b\u4e2d\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b TensorFlow \u200b\u6216\u200b PyTorch \u200b\u4e2d\u200b\u8bad\u7ec3\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b ONNX\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b\u7c7b\u4f3c\u200b ONNX Runtime \u200b\u7684\u200b\u5f15\u64ce\u200b / \u200b\u7f16\u8bd1\u5668\u200b\u5728\u200b\u5404\u79cd\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u5b83\u200b\u3002</p> <p>ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u662f\u200b\u7531\u200b\u793e\u533a\u200b\u6210\u5458\u200b\u8d21\u732e\u200b\u7684\u200b\u4e00\u7ec4\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u5148\u8fdb\u200b\u6a21\u578b\u200b\uff0c\u200b\u683c\u5f0f\u200b\u4e3a\u200b ONNX\u3002\u200b\u6bcf\u4e2a\u200b\u6a21\u578b\u200b\u90fd\u200b\u9644\u5e26\u200b\u4e86\u200b\u7528\u4e8e\u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b\u548c\u200b\u8fd0\u884c\u200b\u63a8\u7406\u200b\u7684\u200b Jupyter \u200b\u7b14\u8bb0\u672c\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u7b14\u8bb0\u672c\u200b\u4ee5\u200b Python \u200b\u7f16\u5199\u200b\uff0c\u200b\u5e76\u200b\u5305\u542b\u200b\u5230\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u63cf\u8ff0\u200b\u6a21\u578b\u200b\u67b6\u6784\u200b\u7684\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b\u7684\u200b\u53c2\u8003\u6587\u732e\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#hugging-face-spaces-gradio","title":"Hugging Face Spaces \u200b\u548c\u200b Gradio \u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":""},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#gradio","title":"Gradio","text":"<p>Gradio \u200b\u53ef\u200b\u8ba9\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b Python \u200b\u4ee3\u7801\u200b\u5c06\u200b\u5176\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u6f14\u793a\u200b\u4e3a\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002Gradio \u200b\u5c06\u200b Python \u200b\u51fd\u6570\u200b\u5c01\u88c5\u200b\u5230\u200b\u7528\u6237\u754c\u9762\u200b\u4e2d\u200b\uff0c\u200b\u6f14\u793a\u200b\u53ef\u4ee5\u200b\u5728\u200b jupyter \u200b\u7b14\u8bb0\u672c\u200b\u3001colab \u200b\u7b14\u8bb0\u672c\u200b\u4e2d\u200b\u542f\u52a8\u200b\uff0c\u200b\u5e76\u200b\u53ef\u4ee5\u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u514d\u8d39\u200b\u6258\u7ba1\u200b\u3002</p> <p>\u200b\u5728\u200b\u6b64\u5904\u200b\u5f00\u59cb\u200bhttps://gradio.app/getting_started</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#hugging-face-spaces","title":"Hugging Face Spaces","text":"<p>Hugging Face Spaces \u200b\u662f\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u514d\u8d39\u200b\u6258\u7ba1\u200b\u9009\u9879\u200b\u3002Spaces \u200b\u63d0\u4f9b\u200b\u4e86\u200b 3 \u200b\u79cd\u200b SDK \u200b\u9009\u9879\u200b\uff1aGradio\u3001Streamlit \u200b\u548c\u200b\u9759\u6001\u200b HTML \u200b\u6f14\u793a\u200b\u3002Spaces \u200b\u53ef\u4ee5\u200b\u662f\u200b\u516c\u5171\u200b\u7684\u200b\u6216\u200b\u79c1\u6709\u200b\u7684\u200b\uff0c\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u4e0e\u200b github repos \u200b\u7c7b\u4f3c\u200b\u3002\u200b\u76ee\u524d\u200b Hugging Face \u200b\u4e0a\u200b\u6709\u200b 2000 \u200b\u591a\u4e2a\u200b Spaces\u3002\u200b\u5728\u200b\u6b64\u5904\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b Spaces \u200b\u7684\u200b\u4fe1\u606f\u200bhttps://huggingface.co/spaces/launch\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#hugging-face","title":"Hugging Face \u200b\u6a21\u578b","text":"<p>Hugging Face \u200b\u6a21\u578b\u200b\u4e2d\u5fc3\u200b\u8fd8\u200b\u652f\u6301\u200b ONNX \u200b\u6a21\u578b\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bONNX \u200b\u6807\u7b7e\u200b\u5bf9\u200b ONNX \u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u7b5b\u9009\u200b</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#hugging-face-onnx","title":"Hugging Face \u200b\u662f\u200b\u5982\u4f55\u200b\u5e2e\u52a9\u200b ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u7684\u200b\uff1f","text":"<p>ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u4e2d\u6709\u200b\u8bb8\u591a\u200b Jupyter \u200b\u7b14\u8bb0\u672c\u200b\u4f9b\u200b\u7528\u6237\u200b\u6d4b\u8bd5\u200b\u6a21\u578b\u200b\u3002\u200b\u4ee5\u524d\u200b\uff0c\u200b\u7528\u6237\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u4e0b\u8f7d\u200b\u6a21\u578b\u200b\u5e76\u200b\u5728\u200b\u672c\u5730\u200b\u8fd0\u884c\u200b\u8fd9\u4e9b\u200b\u7b14\u8bb0\u672c\u200b\u6d4b\u8bd5\u200b\u3002\u200b\u6709\u200b\u4e86\u200b Hugging Face\uff0c\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u7b80\u5355\u200b\u548c\u200b\u7528\u6237\u200b\u53cb\u597d\u200b\u3002\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u8f7b\u677e\u200b\u5c1d\u8bd5\u200b ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e2a\u200b\u6a21\u578b\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b ONNX Runtime \u200b\u8fd0\u884c\u200b\u7531\u200b Gradio \u200b\u63d0\u4f9b\u200b\u652f\u6301\u200b\u7684\u200b\u5feb\u901f\u200b\u6f14\u793a\u200b\uff0c\u200b\u5168\u90e8\u200b\u5728\u200b\u4e91\u7aef\u200b\u8fdb\u884c\u200b\uff0c\u200b\u65e0\u9700\u200b\u5728\u200b\u672c\u5730\u4e0b\u8f7d\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0cONNX \u200b\u6709\u200b\u5404\u79cd\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u4f8b\u5982\u200bONNX Runtime\u3001MXNet\u200b\u7b49\u200b</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#onnx-runtime","title":"ONNX Runtime \u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>ONNX Runtime \u200b\u662f\u200b\u4e00\u4e2a\u200b\u8de8\u5e73\u53f0\u200b\u7684\u200b\u63a8\u7406\u200b\u548c\u200b\u8bad\u7ec3\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u52a0\u901f\u5668\u200b\u3002\u200b\u5b83\u200b\u4f7f\u5f97\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u4f7f\u7528\u200b ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u5b9e\u65f6\u200b Gradio \u200b\u6f14\u793a\u200b\u6210\u4e3a\u200b\u53ef\u80fd\u200b\u3002</p> <p>ONNX Runtime \u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u66f4\u5feb\u200b\u7684\u200b\u5ba2\u6237\u200b\u4f53\u9a8c\u200b\u548c\u200b\u66f4\u200b\u4f4e\u200b\u7684\u200b\u6210\u672c\u200b\uff0c\u200b\u652f\u6301\u200b\u6765\u81ea\u200b PyTorch \u200b\u548c\u200b TensorFlow/Keras \u200b\u7b49\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6846\u67b6\u200b\u4ee5\u53ca\u200b scikit-learn\u3001LightGBM\u3001XGBoost \u200b\u7b49\u200b\u4f20\u7edf\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u5e93\u200b\u7684\u200b\u6a21\u578b\u200b\u3002ONNX Runtime \u200b\u4e0e\u200b\u4e0d\u540c\u200b\u7684\u200b\u786c\u4ef6\u200b\u3001\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u548c\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u517c\u5bb9\u200b\uff0c\u200b\u5e76\u200b\u901a\u8fc7\u200b\u5229\u7528\u200b\u9002\u7528\u200b\u7684\u200b\u786c\u4ef6\u200b\u52a0\u901f\u5668\u200b\u4ee5\u53ca\u200b\u56fe\u5f62\u200b\u4f18\u5316\u200b\u548c\u200b\u8f6c\u6362\u200b\u63d0\u4f9b\u200b\u6700\u4f73\u200b\u6027\u80fd\u200b\u3002\u200b\u6709\u5173\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u5b98\u65b9\u7f51\u7ad9\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#efficientnet-lite4-gradio","title":"\u4e3a\u200b EfficientNet-Lite4 \u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a","text":"<p>EfficientNet-Lite 4 \u200b\u662f\u200b EfficientNet-Lite \u200b\u7cfb\u5217\u200b\u4e2d\u200b\u6700\u5927\u200b\u548c\u200b\u6700\u200b\u51c6\u786e\u200b\u7684\u200b\u6a21\u578b\u200b\u3002\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u6574\u6570\u200b\u91cf\u5316\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u80fd\u591f\u200b\u5728\u200b\u6240\u6709\u200b EfficientNet \u200b\u6a21\u578b\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u6700\u9ad8\u200b\u7684\u200b\u51c6\u786e\u7387\u200b\u3002\u200b\u5728\u200b Pixel 4 CPU \u200b\u4e0a\u4ee5\u200b\u5b9e\u65f6\u200b\u65b9\u5f0f\u200b\u8fd0\u884c\u200b\uff08\u200b\u4f8b\u5982\u200b 30ms/ \u200b\u56fe\u50cf\u200b\uff09\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b 80.4\uff05\u200b\u7684\u200b ImageNet top-1 \u200b\u51c6\u786e\u7387\u200b\u3002\u200b\u8981\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u9605\u8bfb\u200b\u6a21\u578b\u200b\u5361\u7247\u200b</p> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6f14\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Gradio \u200b\u4e3a\u200b EfficientNet-Lite4 \u200b\u8bbe\u7f6e\u200b\u793a\u4f8b\u200b\u6f14\u793a\u200b</p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bfc\u5165\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\u5e76\u200b\u4e0b\u8f7d\u200b\u548c\u200b\u8f7d\u5165\u200b\u6765\u81ea\u200b ONNX \u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u7684\u200b efficientnet-lite4 \u200b\u6a21\u578b\u200b\u3002\u200b\u7136\u540e\u200b\u4ece\u200b labels_map.txt \u200b\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u6807\u7b7e\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u8bbe\u7f6e\u200b\u9884\u5904\u7406\u200b\u51fd\u6570\u200b\u3001\u200b\u52a0\u8f7d\u200b\u7528\u4e8e\u200b\u63a8\u7406\u200b\u7684\u200b\u6a21\u578b\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u63a8\u7406\u200b\u51fd\u6570\u200b\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u5c06\u200b\u63a8\u7406\u200b\u51fd\u6570\u200b\u5c01\u88c5\u200b\u5230\u200b Gradio \u200b\u63a5\u53e3\u200b\u4e2d\u200b\uff0c\u200b\u4f9b\u200b\u7528\u6237\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u5b8c\u6574\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002</p> <pre><code>import numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport cv2\nimport json\nimport gradio as gr\nfrom huggingface_hub import hf_hub_download\nfrom onnx import hub\nimport onnxruntime as ort\n\n# \u200b\u4ece\u200bONNX\u200b\u6a21\u578b\u200b\u4ed3\u5e93\u200b\u52a0\u8f7d\u200bONNX\u200b\u6a21\u578b\u200b\nmodel = hub.load(\"efficientnet-lite4\")\n# \u200b\u52a0\u8f7d\u200b\u6807\u7b7e\u200b\u6587\u672c\u6587\u4ef6\u200b\nlabels = json.load(open(\"labels_map.txt\", \"r\"))\n\n# \u200b\u901a\u8fc7\u200b\u5c06\u200b\u56fe\u50cf\u200b\u4ece\u200b\u4e2d\u5fc3\u200b\u8c03\u6574\u200b\u5927\u5c0f\u200b\u5e76\u200b\u88c1\u526a\u200b\u5230\u200b224x224\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u56fe\u50cf\u6587\u4ef6\u200b\u7684\u200b\u5c3a\u5bf8\u200b\ndef pre_process_edgetpu(img, dims):\n    output_height, output_width, _ = dims\n    img = resize_with_aspectratio(img, output_height, output_width, inter_pol=cv2.INTER_LINEAR)\n    img = center_crop(img, output_height, output_width)\n    img = np.asarray(img, dtype='float32')\n    # \u200b\u5c06\u200bjpg\u200b\u50cf\u7d20\u200b\u503c\u200b\u4ece\u200b[0 - 255]\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6d6e\u70b9\u200b\u6570\u7ec4\u200b[-1.0 - 1.0]\n    img -= [127.0, 127.0, 127.0]\n    img /= [128.0, 128.0, 128.0]\n    return img\n\n# \u200b\u4f7f\u7528\u200b\u7b49\u200b\u6bd4\u4f8b\u200b\u7f29\u653e\u200b\u8c03\u6574\u200b\u56fe\u50cf\u200b\u5c3a\u5bf8\u200b\ndef resize_with_aspectratio(img, out_height, out_width, scale=87.5, inter_pol=cv2.INTER_LINEAR):\n    height, width, _ = img.shape\n    new_height = int(100. * out_height / scale)\n    new_width = int(100. * out_width / scale)\n    if height &gt; width:\n        w = new_width\n        h = int(new_height * height / width)\n    else:\n        h = new_height\n        w = int(new_width * width / height)\n    img = cv2.resize(img, (w, h), interpolation=inter_pol)\n    return img\n\n# crops the image around the center based on given height and width\ndef center_crop(img, out_height, out_width):\n    height, width, _ = img.shape\n    left = int((width - out_width) / 2)\n    right = int((width + out_width) / 2)\n    top = int((height - out_height) / 2)\n    bottom = int((height + out_height) / 2)\n    img = img[top:bottom, left:right]\n    return img\n\n\nsess = ort.InferenceSession(model)\n\ndef inference(img):\n  img = cv2.imread(img)\n  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n  img = pre_process_edgetpu(img, (224, 224, 3))\n\n  img_batch = np.expand_dims(img, axis=0)\n\n  results = sess.run([\"Softmax:0\"], {\"images:0\": img_batch})[0]\n  result = reversed(results[0].argsort()[-5:])\n  resultdic = {}\n  for r in result:\n      resultdic[labels[str(r)]] = float(results[0][r])\n  return resultdic\n\ntitle = \"EfficientNet-Lite4\"\ndescription = \"EfficientNet-Lite 4\u200b\u662f\u200b\u6700\u5927\u200b\u7684\u200b\u53d8\u4f53\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200bEfficientNet-Lite\u200b\u6a21\u578b\u200b\u96c6\u5408\u200b\u4e2d\u200b\u6700\u200b\u51c6\u786e\u200b\u7684\u200b\u3002\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4ec5\u200b\u5305\u542b\u200b\u6574\u6570\u200b\u7684\u200b\u91cf\u5316\u200b\u6a21\u578b\u200b\uff0c\u200b\u5177\u6709\u200b\u6240\u6709\u200bEfficientNet\u200b\u6a21\u578b\u200b\u4e2d\u200b\u6700\u9ad8\u200b\u7684\u200b\u51c6\u786e\u5ea6\u200b\u3002\u200b\u5728\u200bPixel 4 CPU\u200b\u4e0a\u200b\uff0c\u200b\u5b83\u200b\u5b9e\u73b0\u200b\u4e86\u200b80.4\uff05\u200b\u7684\u200bImageNet top-1\u200b\u51c6\u786e\u5ea6\u200b\uff0c\u200b\u540c\u65f6\u200b\u4ecd\u7136\u200b\u53ef\u4ee5\u200b\u5b9e\u65f6\u200b\u8fd0\u884c\u200b\uff08\u200b\u4f8b\u5982\u200b30ms/\u200b\u56fe\u50cf\u200b\uff09\u3002\"\nexamples = [['catonnx.jpg']]\ngr.Interface(inference, gr.Image(type=\"filepath\"), \"label\", title=title, description=description, examples=examples).launch()\n</code></pre>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-ONNX-on-Hugging-Face/#onnx-hf-spaces-gradio","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200b ONNX \u200b\u6a21\u578b\u200b\u5728\u200b HF Spaces \u200b\u4e0a\u200b\u8d21\u732e\u200b Gradio \u200b\u6f14\u793a","text":"<ul> <li>\u200b\u5c06\u200b\u6a21\u578b\u200b\u6dfb\u52a0\u200b\u5230\u200bonnx model zoo</li> <li>\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u8d26\u53f7\u200bhere.</li> <li>\u200b\u8981\u200b\u67e5\u770b\u200b\u8fd8\u6709\u200b\u54ea\u4e9b\u200b\u6a21\u578b\u200b\u9700\u8981\u200b\u6dfb\u52a0\u200b\u5230\u200b ONNX \u200b\u7ec4\u7ec7\u200b\u4e2d\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200bModels list\u200b\u4e2d\u200b\u7684\u200b\u5217\u8868\u200b</li> <li>\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u540d\u200b\u4e0b\u200b\u6dfb\u52a0\u200b Gradio Demo\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u6b64\u200b\u535a\u6587\u200b\u4ee5\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u8bbe\u7f6e\u200b Gradio Demo\u3002</li> <li>\u200b\u8bf7\u6c42\u200b\u52a0\u5165\u200b ONNX \u200b\u7ec4\u7ec7\u200bhere.</li> <li>\u200b\u4e00\u65e6\u200b\u83b7\u51c6\u200b\uff0c\u200b\u5c06\u200b\u6a21\u578b\u200b\u4ece\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u540d\u200b\u4e0b\u200b\u8f6c\u79fb\u200b\u5230\u200b ONNX \u200b\u7ec4\u7ec7\u200b</li> <li>\u200b\u5728\u200b\u6a21\u578b\u200b\u8868\u4e2d\u200b\u4e3a\u200b\u6a21\u578b\u200b\u6dfb\u52a0\u200b\u5fbd\u7ae0\u200b\uff0c\u200b\u5728\u200bModels list\u200b\u4e2d\u200b\u67e5\u770b\u200b\u793a\u4f8b\u200b</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/","title":"Gradio and W&amp;B Integration","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/akhaliq/JoJoGAN \u200b\u6807\u7b7e\u200b\uff1aWANDB, SPACES \u200b\u7531\u200b Gradio \u200b\u56e2\u961f\u200b\u8d21\u732e\u200b</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5f15\u5bfc\u200b\u60a8\u200b\u5b8c\u6210\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a</p> <ul> <li>Gradio\u3001Hugging Face Spaces \u200b\u548c\u200b Wandb \u200b\u7684\u200b\u4ecb\u7ecd\u200b</li> <li>\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Wandb \u200b\u96c6\u200b\u6210\u4e3a\u200b JoJoGAN \u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a\u200b</li> <li>\u200b\u5982\u4f55\u200b\u5728\u200b Hugging Face \u200b\u7684\u200b Wandb \u200b\u7ec4\u7ec7\u200b\u4e2d\u200b\u8ffd\u8e2a\u5b9e\u9a8c\u200b\u5e76\u200b\u8d21\u732e\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b</li> </ul> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b Wandb \u200b\u8ddf\u8e2a\u200b\u8bad\u7ec3\u200b\u548c\u200b\u5b9e\u9a8c\u200b\u7684\u200b\u6a21\u578b\u200b\u793a\u4f8b\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u4e0b\u65b9\u200b\u5c1d\u8bd5\u200b JoJoGAN \u200b\u6f14\u793a\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#wandb","title":"\u4ec0\u4e48\u200b\u662f\u200b Wandb\uff1f","text":"<p>Weights and Biases (W&amp;B) \u200b\u5141\u8bb8\u200b\u6570\u636e\u200b\u79d1\u5b66\u5bb6\u200b\u548c\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u79d1\u5b66\u5bb6\u200b\u5728\u200b\u4ece\u200b\u8bad\u7ec3\u200b\u5230\u200b\u751f\u4ea7\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u9636\u6bb5\u200b\u8ddf\u8e2a\u200b\u4ed6\u4eec\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u5b9e\u9a8c\u200b\u3002\u200b\u4efb\u4f55\u200b\u6307\u6807\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u6837\u672c\u200b\u8fdb\u884c\u200b\u805a\u5408\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u53ef\u200b\u81ea\u5b9a\u4e49\u200b\u548c\u200b\u53ef\u200b\u641c\u7d22\u200b\u7684\u200b\u4eea\u8868\u677f\u200b\u4e2d\u200b\u663e\u793a\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p></p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#hugging-face-spaces-gradio","title":"\u4ec0\u4e48\u200b\u662f\u200b Hugging Face Spaces \u200b\u548c\u200b Gradio\uff1f","text":""},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#gradio","title":"Gradio","text":"<p>Gradio \u200b\u8ba9\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u51e0\u884c\u200b Python \u200b\u4ee3\u7801\u200b\u5c06\u200b\u5176\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u6f14\u793a\u200b\u4e3a\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002Gradio \u200b\u5c06\u200b\u4efb\u4f55\u200b Python \u200b\u51fd\u6570\u200b\uff08\u200b\u4f8b\u5982\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u7684\u200b\u63a8\u65ad\u200b\u51fd\u6570\u200b\uff09\u200b\u5305\u88c5\u200b\u6210\u200b\u4e00\u4e2a\u200b\u7528\u6237\u754c\u9762\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6f14\u793a\u200b\u53ef\u4ee5\u200b\u5728\u200b jupyter \u200b\u7b14\u8bb0\u672c\u200b\u3001colab \u200b\u7b14\u8bb0\u672c\u200b\u4e2d\u200b\u542f\u52a8\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5d4c\u5165\u200b\u5230\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u7f51\u7ad9\u200b\u4e2d\u200b\uff0c\u200b\u514d\u8d39\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\u5f00\u59cb\u200b here</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#hugging-face-spaces","title":"Hugging Face Spaces","text":"<p>Hugging Face Spaces \u200b\u662f\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u514d\u8d39\u200b\u6258\u7ba1\u200b\u9009\u9879\u200b\u3002Spaces \u200b\u6709\u200b 3 \u200b\u4e2a\u200b SDK \u200b\u9009\u9879\u200b\uff1aGradio\u3001Streamlit \u200b\u548c\u200b\u9759\u6001\u200b HTML \u200b\u6f14\u793a\u200b\u3002Spaces \u200b\u53ef\u4ee5\u200b\u662f\u200b\u516c\u5171\u200b\u7684\u200b\u6216\u200b\u79c1\u6709\u200b\u7684\u200b\uff0c\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b github \u200b\u5b58\u50a8\u200b\u5e93\u200b\u3002\u200b\u76ee\u524d\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u6709\u200b 2000 \u200b\u591a\u4e2a\u200b Spaces\u3002\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b Spaces \u200b\u7684\u200b\u4fe1\u606f\u200b here\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#jojogan-gradio","title":"\u4e3a\u200b JoJoGAN \u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a","text":"<p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f15\u5bfc\u200b\u60a8\u200b\u5982\u4f55\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\u5b8c\u6210\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6211\u4eec\u200b\u5047\u8bbe\u200b\u60a8\u200b\u5bf9\u200b W&amp;B \u200b\u548c\u200b Gradio \u200b\u8fd8\u200b\u4e0d\u200b\u592a\u200b\u4e86\u89e3\u200b\uff0c\u200b\u53ea\u662f\u200b\u4e3a\u4e86\u200b\u672c\u200b\u6559\u7a0b\u200b\u7684\u200b\u76ee\u7684\u200b\u3002</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\uff01</p> <ol> <li>\u200b\u521b\u5efa\u200b W&amp;B \u200b\u8d26\u53f7\u200b</li> </ol> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u8fd8\u200b\u6ca1\u6709\u200b W&amp;B \u200b\u8d26\u53f7\u200b\uff0c\u200b\u8bf7\u200b\u6309\u7167\u200b\u8fd9\u4e9b\u200b\u5feb\u901f\u200b\u8bf4\u660e\u200b\u521b\u5efa\u200b\u514d\u8d39\u200b\u8d26\u53f7\u200b\u3002\u200b\u8fd9\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u8d85\u8fc7\u200b\u51e0\u5206\u949f\u200b\u7684\u200b\u65f6\u95f4\u200b\u3002\u200b\u4e00\u65e6\u200b\u5b8c\u6210\u200b\uff08\u200b\u6216\u8005\u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u6709\u200b\u4e00\u4e2a\u200b\u8d26\u6237\u200b\uff09\uff0c\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8fd0\u884c\u200b\u4e00\u4e2a\u200b\u5feb\u901f\u200b\u7684\u200b colab\u3002</p> <ol> <li>\u200b\u6253\u5f00\u200b Colab \u200b\u5b89\u88c5\u200b Gradio \u200b\u548c\u200b W&amp;B</li> </ol> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u6309\u7167\u200b JoJoGAN \u200b\u5b58\u50a8\u200b\u5e93\u4e2d\u200b\u63d0\u4f9b\u200b\u7684\u200b colab \u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u7a0d\u4f5c\u200b\u4fee\u6539\u200b\u4ee5\u200b\u66f4\u200b\u6709\u6548\u200b\u5730\u200b\u4f7f\u7528\u200b Wandb \u200b\u548c\u200b Gradio\u3002</p> <p></p> <p>\u200b\u5728\u200b\u9876\u90e8\u200b\u5b89\u88c5\u200b Gradio \u200b\u548c\u200b Wandb:</p> <pre><code>pip install gradio wandb\n</code></pre> <ol> <li>\u200b\u5fae\u8c03\u200b StyleGAN \u200b\u548c\u200b W&amp;B \u200b\u5b9e\u9a8c\u200b\u8ddf\u8e2a\u200b</li> </ol> <p>\u200b\u4e0b\u200b\u4e00\u6b65\u200b\u5c06\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b W&amp;B \u200b\u4eea\u8868\u677f\u200b\uff0c\u200b\u4ee5\u200b\u8ddf\u8e2a\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u5e76\u200b\u663e\u793a\u200b\u4e00\u4e2a\u200b Gradio \u200b\u6f14\u793a\u200b\u63d0\u4f9b\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u4e0b\u62c9\u83dc\u5355\u200b\u4e2d\u200b\u9009\u62e9\u200b\u3002\u200b\u8fd9\u200b\u662f\u200b\u60a8\u200b\u9700\u8981\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> <pre><code>alpha =  1.0\nalpha = 1-alpha\n\npreserve_color = True\nnum_iter = 100\nlog_interval = 50\n\nsamples = []\n   column_names = [\"Reference (y)\", \"Style Code(w)\", \"Real Face Image(x)\"]\n\nwandb.init(project=\"JoJoGAN\")\nconfig = wandb.config\nconfig.num_iter = num_iter\nconfig.preserve_color = preserve_color\nwandb.log(\n{\"Style reference\": [wandb.Image(transforms.ToPILImage()(target_im))]},\nstep=0)\n\n# \u200b\u52a0\u8f7d\u200b\u5224\u522b\u200b\u5668\u200b\u7528\u4e8e\u200b\u611f\u77e5\u200b\u635f\u5931\u200b\ndiscriminator = Discriminator(1024, 2).eval().to(device)\nckpt = torch.load('models/stylegan2-ffhq-config-f.pt', map_location=lambda storage, loc: storage)\ndiscriminator.load_state_dict(ckpt[\"d\"], strict=False)\n\n# \u200b\u91cd\u7f6e\u200b\u751f\u6210\u5668\u200b\ndel generator\ngenerator = deepcopy(original_generator)\n\ng_optim = optim.Adam(generator.parameters(), lr=2e-3, betas=(0, 0.99))\n\n# \u200b\u7528\u4e8e\u200b\u751f\u6210\u200b\u4e00\u200b\u65cf\u200b\u5408\u7406\u200b\u771f\u5b9e\u200b\u56fe\u50cf\u200b-&gt; \u200b\u5047\u200b\u56fe\u50cf\u200b\u7684\u200b\u66f4\u6362\u200b\u56fe\u5c42\u200b\nif preserve_color:\n    id_swap = [9,11,15,16,17]\nelse:\n    id_swap = list(range(7, generator.n_latent))\n\nfor idx in tqdm(range(num_iter)):\n    mean_w = generator.get_latent(torch.randn([latents.size(0), latent_dim]).to(device)).unsqueeze(1).repeat(1, generator.n_latent, 1)\n    in_latent = latents.clone()\n    in_latent[:, id_swap] = alpha*latents[:, id_swap] + (1-alpha)*mean_w[:, id_swap]\n\n    img = generator(in_latent, input_is_latent=True)\n\n    with torch.no_grad():\n        real_feat = discriminator(targets)\n    fake_feat = discriminator(img)\n\n    loss = sum([F.l1_loss(a, b) for a, b in zip(fake_feat, real_feat)])/len(fake_feat)\n\n    wandb.log({\"loss\": loss}, step=idx)\n    if idx % log_interval == 0:\n        generator.eval()\n        my_sample = generator(my_w, input_is_latent=True)\n        generator.train()\n        my_sample = transforms.ToPILImage()(utils.make_grid(my_sample, normalize=True, range=(-1, 1)))\n        wandb.log(\n        {\"Current stylization\": [wandb.Image(my_sample)]},\n        step=idx)\n    table_data = [\n            wandb.Image(transforms.ToPILImage()(target_im)),\n            wandb.Image(img),\n            wandb.Image(my_sample),\n        ]\n    samples.append(table_data)\n\n    g_optim.zero_grad()\n    loss.backward()\n    g_optim.step()\n\nout_table = wandb.Table(data=samples, columns=column_names)\nwandb.log({\" \u200b\u5f53\u524d\u200b\u6837\u672c\u6570\u200b \": out_table})\n</code></pre> <ol> <li>\u200b\u4fdd\u5b58\u200b\u3001\u200b\u4e0b\u8f7d\u200b\u548c\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b</li> </ol> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5982\u4f55\u200b\u4fdd\u5b58\u200b\u548c\u200b\u4e0b\u8f7d\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>from PIL import Image\nimport torch\ntorch.backends.cudnn.benchmark = True\nfrom torchvision import transforms, utils\nfrom util import *\nimport math\nimport random\nimport numpy as np\nfrom torch import nn, autograd, optim\nfrom torch.nn import functional as F\nfrom tqdm import tqdm\nimport lpips\nfrom model import *\nfrom e4e_projection import projection as e4e_projection\n\nfrom copy import deepcopy\nimport imageio\n\nimport os\nimport sys\nimport torchvision.transforms as transforms\nfrom argparse import Namespace\nfrom e4e.models.psp import pSp\nfrom util import *\nfrom huggingface_hub import hf_hub_download\nfrom google.colab import files\ntorch.save({\"g\": generator.state_dict()}, \"your-model-name.pt\")\n\nfiles.download('your-model-name.pt')\n\nlatent_dim = 512\ndevice=\"cuda\"\nmodel_path_s = hf_hub_download(repo_id=\"akhaliq/jojogan-stylegan2-ffhq-config-f\", filename=\"stylegan2-ffhq-config-f.pt\")\noriginal_generator = Generator(1024, latent_dim, 8, 2).to(device)\nckpt = torch.load(model_path_s, map_location=lambda storage, loc: storage)\noriginal_generator.load_state_dict(ckpt[\"g_ema\"], strict=False)\nmean_latent = original_generator.mean_latent(10000)\n\ngenerator = deepcopy(original_generator)\n\nckpt = torch.load(\"/content/JoJoGAN/your-model-name.pt\", map_location=lambda storage, loc: storage)\ngenerator.load_state_dict(ckpt[\"g\"], strict=False)\ngenerator.eval()\n\nplt.rcParams['figure.dpi'] = 150\n\ntransform = transforms.Compose(\n    [\n        transforms.Resize((1024, 1024)),\n        transforms.ToTensor(),\n        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n    ]\n)\n\ndef inference(img):\n    img.save('out.jpg')\n    aligned_face = align_face('out.jpg')\n\n    my_w = e4e_projection(aligned_face, \"out.pt\", device).unsqueeze(0)\n    with torch.no_grad():\n        my_sample = generator(my_w, input_is_latent=True)\n\n    npimage = my_sample[0].cpu().permute(1, 2, 0).detach().numpy()\n    imageio.imwrite('filename.jpeg', npimage)\n    return 'filename.jpeg'\n</code></pre> <ol> <li>\u200b\u6784\u5efa\u200b Gradio \u200b\u6f14\u793a\u200b</li> </ol> <pre><code>import gradio as gr\n\ntitle = \"JoJoGAN\"\ndescription = \"JoJoGAN \u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\uff1a\u200b\u4e00\u6b21\u6027\u200b\u9762\u90e8\u200b\u98ce\u683c\u5316\u200b\u3002\u200b\u8981\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u4e0a\u4f20\u200b\u60a8\u200b\u7684\u200b\u56fe\u50cf\u200b\uff0c\u200b\u6216\u200b\u5355\u51fb\u200b\u793a\u4f8b\u200b\u4e4b\u4e00\u200b\u52a0\u8f7d\u200b\u5b83\u4eec\u200b\u3002\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u94fe\u63a5\u200b\u4e2d\u200b\u9605\u8bfb\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002\"\n\ndemo = gr.Interface(\n    inference,\n    gr.Image(type=\"pil\"),\n    gr.Image(type=\" \u200b\u6587\u4ef6\u200b \"),\n    title=title,\n    description=description\n)\n\ndemo.launch(share=True)\n</code></pre> <ol> <li>\u200b\u5c06\u200b Gradio \u200b\u96c6\u6210\u200b\u5230\u200b W&amp;B \u200b\u4eea\u8868\u677f\u200b</li> </ol> <p>\u200b\u6700\u540e\u200b\u4e00\u6b65\u200b\u2014\u2014\u200b\u5c06\u200b Gradio \u200b\u6f14\u793a\u200b\u4e0e\u200b W&amp;B \u200b\u4eea\u8868\u677f\u200b\u96c6\u6210\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u4e00\u884c\u200b\u989d\u5916\u200b\u7684\u200b\u4ee3\u7801\u200b :</p> <pre><code>demo.integrate(wandb=wandb)\n</code></pre> <p>\u200b\u8c03\u7528\u200b\u96c6\u6210\u200b\u4e4b\u540e\u200b\uff0c\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6f14\u793a\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u96c6\u6210\u200b\u5230\u200b\u4eea\u8868\u677f\u200b\u6216\u200b\u62a5\u544a\u200b\u4e2d\u200b</p> <p>\u200b\u5728\u200b W&amp;B \u200b\u4e4b\u5916\u200b\uff0c\u200b\u4f7f\u7528\u200b gradio-app \u200b\u6807\u8bb0\u200b\u5141\u8bb8\u200b\u4efb\u4f55\u4eba\u200b\u76f4\u63a5\u200b\u5c06\u200b Gradio \u200b\u6f14\u793a\u200b\u5d4c\u5165\u200b\u5230\u200b\u5176\u200b\u535a\u5ba2\u200b\u3001\u200b\u7f51\u7ad9\u200b\u3001\u200b\u6587\u6863\u200b\u7b49\u200b\u4e2d\u200b\u7684\u200b HF spaces \u200b\u4e0a\u200b :</p> <pre><code>&amp;lt;gradio-app space=\"akhaliq/JoJoGAN\"&amp;gt; &amp;lt;gradio-app&amp;gt;\n</code></pre> <p>7.\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\u200b\u5728\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u5d4c\u5165\u200b W&amp;B \u200b\u56fe\u200b</p> <pre><code>\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u5d4c\u5165\u200b W&amp;B \u200b\u56fe\u200b\u3002\u200b\u4e3a\u6b64\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b W&amp;B \u200b\u62a5\u544a\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u4e00\u4e2a\u200b `gr.HTML` \u200b\u5757\u200b\u4e2d\u5c06\u200b\u5176\u200b\u5d4c\u5165\u200b\u5230\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002\n\n\u200b\u62a5\u544a\u200b\u9700\u8981\u200b\u662f\u200b\u516c\u5f00\u200b\u7684\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5728\u200b iFrame \u200b\u4e2d\u200b\u5305\u88c5\u200b URL\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b :\nThe Report will need to be public and you will need to wrap the URL within an iFrame like this:\n```python\n\nimport gradio as gr\n\ndef wandb_report(url):\n    iframe = f'&amp;lt;iframe src={url} style=\"border:none;height:1024px;width:100%\"&amp;gt;'\n    return gr.HTML(iframe)\n\nwith gr.Blocks() as demo:\n    report_url = 'https://wandb.ai/_scott/pytorch-sweeps-demo/reports/loss-22-10-07-16-00-17---VmlldzoyNzU2NzAx'\n    report = wandb_report(report_url)\n\ndemo.launch(share=True)\n```\n</code></pre>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#_2","title":"\u7ed3\u8bba","text":"<p>\u200b\u5e0c\u671b\u200b\u60a8\u200b\u559c\u6b22\u200b\u6b64\u200b\u5d4c\u5165\u200b Gradio \u200b\u6f14\u793a\u200b\u5230\u200b W&amp;B \u200b\u62a5\u544a\u200b\u7684\u200b\u7b80\u77ed\u200b\u6f14\u793a\u200b\uff01\u200b\u611f\u8c22\u60a8\u200b\u4e00\u76f4\u200b\u9605\u8bfb\u200b\u5230\u200b\u6700\u540e\u200b\u3002\u200b\u56de\u987e\u200b\u4e00\u4e0b\u200b :</p> <ul> <li> <p>\u200b\u4ec5\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u53c2\u8003\u200b\u56fe\u50cf\u200b\u5373\u53ef\u200b\u5bf9\u200b JoJoGAN \u200b\u8fdb\u884c\u200b\u5fae\u8c03\u200b\uff0c\u200b\u901a\u5e38\u200b\u5728\u200b GPU \u200b\u4e0a\u200b\u9700\u8981\u200b\u7ea6\u200b 1 \u200b\u5206\u949f\u200b\u3002\u200b\u8bad\u7ec3\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6837\u5f0f\u200b\u5e94\u7528\u200b\u4e8e\u200b\u4efb\u4f55\u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u3002\u200b\u5728\u200b\u8bba\u6587\u200b\u4e2d\u200b\u9605\u8bfb\u200b\u66f4\u200b\u591a\u200b\u5185\u5bb9\u200b\u3002</p> </li> <li> <p>W&amp;B \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6dfb\u52a0\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\u6765\u200b\u8ddf\u8e2a\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5355\u4e2a\u200b\u96c6\u4e2d\u200b\u7684\u200b\u4eea\u8868\u677f\u200b\u4e2d\u200b\u53ef\u89c6\u5316\u200b\u3001\u200b\u6392\u5e8f\u200b\u548c\u200b\u7406\u89e3\u200b\u60a8\u200b\u7684\u200b\u5b9e\u9a8c\u200b\u3002</p> </li> <li> <p>Gradio \u200b\u5219\u200b\u5728\u200b\u7528\u6237\u200b\u53cb\u597d\u200b\u7684\u200b\u754c\u9762\u200b\u4e2d\u200b\u6f14\u793a\u200b\u6a21\u578b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u4efb\u4f55\u200b\u5730\u65b9\u200b\u5171\u4eab\u200b\u3002</p> </li> </ul>"},{"location":"cn/04_integrating-other-frameworks/Gradio-and-Wandb-Integration/#wandb-hf-spaces-gradio","title":"\u5982\u4f55\u200b\u5728\u200b Wandb \u200b\u7ec4\u7ec7\u200b\u7684\u200b HF spaces \u200b\u4e0a\u200b \u200b\u8d21\u732e\u200b Gradio \u200b\u6f14\u793a","text":"<ul> <li>\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5e10\u6237\u200b\u6b64\u5904\u200b\u3002</li> <li>\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u540d\u200b\u4e0b\u200b\u6dfb\u52a0\u200b Gradio \u200b\u6f14\u793a\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u6b64\u200b\u6559\u7a0b\u200b \u200b\u4ee5\u200b\u5728\u200b Hugging Face \u200b\u4e0a\u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a\u200b\u3002</li> <li>\u200b\u7533\u8bf7\u52a0\u5165\u200b wandb \u200b\u7ec4\u7ec7\u200b\u6b64\u5904\u200b\u3002</li> <li>\u200b\u6279\u51c6\u200b\u540e\u200b\uff0c\u200b\u5c06\u200b\u6a21\u578b\u200b\u4ece\u200b\u81ea\u5df1\u200b\u7684\u200b\u7528\u6237\u540d\u200b\u8f6c\u79fb\u200b\u5230\u200b Wandb \u200b\u7ec4\u7ec7\u200b\u4e2d\u200b\u3002</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-pytorch/","title":"PyTorch \u200b\u56fe\u50cf\u200b\u5206\u7c7b","text":"<p>Related spaces: https://huggingface.co/spaces/abidlabs/pytorch-image-classifier, https://huggingface.co/spaces/pytorch/ResNet, https://huggingface.co/spaces/pytorch/ResNext, https://huggingface.co/spaces/pytorch/SqueezeNet Tags: VISION, RESNET, PYTORCH</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-pytorch/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u662f\u200b\u8ba1\u7b97\u673a\u200b\u89c6\u89c9\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6838\u5fc3\u200b\u4efb\u52a1\u200b\u3002\u200b\u6784\u5efa\u200b\u66f4\u597d\u200b\u7684\u200b\u5206\u7c7b\u5668\u200b\u4ee5\u200b\u533a\u5206\u200b\u56fe\u7247\u200b\u4e2d\u200b\u5b58\u5728\u200b\u7684\u200b\u7269\u4f53\u200b\u662f\u200b\u5f53\u524d\u200b\u7814\u7a76\u200b\u7684\u200b\u4e00\u4e2a\u200b\u70ed\u70b9\u200b\u9886\u57df\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u7684\u200b\u5e94\u7528\u200b\u8303\u56f4\u200b\u4ece\u200b\u81ea\u52a8\u200b\u9a7e\u9a76\u200b\u8f66\u8f86\u200b\u5230\u200b\u533b\u5b66\u200b\u6210\u50cf\u200b\u7b49\u200b\u9886\u57df\u200b\u90fd\u200b\u5f88\u200b\u5e7f\u6cdb\u200b\u3002</p> <p>\u200b\u8fd9\u6837\u200b\u7684\u200b\u6a21\u578b\u200b\u975e\u5e38\u9002\u5408\u200b Gradio \u200b\u7684\u200b image \u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b Gradio \u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u7684\u200b Web \u200b\u6f14\u793a\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u80fd\u591f\u200b\u5728\u200b Python \u200b\u4e2d\u200b\u6784\u5efa\u200b\u6574\u4e2a\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u6548\u679c\u200b\u5982\u4e0b\u200b\uff08\u200b\u8bd5\u8bd5\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff01\uff09:</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\uff01</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-pytorch/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b\u200b\uff0c\u200b\u6240\u4ee5\u200b\u60a8\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>torch</code>\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-pytorch/#-","title":"\u7b2c\u4e00\u6b65\u200b - \u200b\u8bbe\u7f6e\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b Resnet-18 \u200b\u6a21\u578b\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u4ece\u200bPyTorch Hub\u200b\u8f7b\u677e\u200b\u4e0b\u8f7d\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u6216\u200b\u8bad\u7ec3\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>import torch\n\nmodel = torch.hub.load('pytorch/vision:v0.6.0', 'resnet18', pretrained=True).eval()\n</code></pre> <p>\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u63a8\u65ad\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u8c03\u7528\u200b\u4e86\u200b <code>.eval()</code> \u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-pytorch/#-predict","title":"\u7b2c\u4e8c\u6b65\u200b - \u200b\u5b9a\u4e49\u200b <code>predict</code> \u200b\u51fd\u6570","text":"<p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\uff0c\u200b\u5728\u200b\u672c\u200b\u793a\u4f8b\u200b\u4e2d\u662f\u200b\u4e00\u5f20\u200b\u56fe\u7247\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u3002\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u5e94\u8be5\u200b\u4ee5\u200b\u5b57\u5178\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u662f\u200b\u7c7b\u522b\u200b\u540d\u79f0\u200b\uff0c\u200b\u503c\u200b\u662f\u200b\u7f6e\u4fe1\u5ea6\u200b\u6982\u7387\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ece\u200b\u8fd9\u4e2a\u200btext \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u7c7b\u522b\u200b\u540d\u79f0\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>import requests\nfrom PIL import Image\nfrom torchvision import transforms\n\n# \u200b\u4e0b\u8f7d\u200bImageNet\u200b\u7684\u200b\u53ef\u8bfb\u200b\u6807\u7b7e\u200b\u3002\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef predict(inp):\n  inp = transforms.ToTensor()(inp).unsqueeze(0)\n  with torch.no_grad():\n    prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)\n    confidences = {labels[i]: float(prediction[i]) for i in range(1000)}\n  return confidences\n</code></pre> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u9010\u6b65\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u3002\u200b\u8be5\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\uff1a</p> <ul> <li><code>inp</code>\uff1a\u200b\u8f93\u5165\u200b\u56fe\u7247\u200b\uff0c\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>PIL</code> \u200b\u56fe\u50cf\u200b</li> </ul> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u200b\u56fe\u50cf\u200b\u8f6c\u6362\u200b\u4e3a\u200b PIL \u200b\u56fe\u50cf\u200b\uff0c\u200b\u6700\u7ec8\u200b\u8f6c\u6362\u200b\u4e3a\u200b PyTorch \u200b\u7684\u200b <code>tensor</code>\uff0c\u200b\u5c06\u200b\u5176\u200b\u8f93\u5165\u200b\u6a21\u578b\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\uff1a</p> <ul> <li><code>confidences</code>\uff1a\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\uff0c\u200b\u4ee5\u200b\u5b57\u5178\u200b\u5f62\u5f0f\u200b\u8868\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u662f\u200b\u7c7b\u522b\u200b\u6807\u7b7e\u200b\uff0c\u200b\u503c\u200b\u662f\u200b\u7f6e\u4fe1\u5ea6\u200b\u6982\u7387\u200b</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-pytorch/#-gradio","title":"\u7b2c\u4e09\u6b65\u200b - \u200b\u521b\u5efa\u200b Gradio \u200b\u754c\u9762","text":"<p>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u8bbe\u7f6e\u200b\u597d\u200b\u4e86\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b Gradio \u200b\u754c\u9762\u200b\u3002</p> <p>\u200b\u5728\u200b\u672c\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u662f\u200b\u4e00\u4e2a\u200b\u62d6\u653e\u200b\u56fe\u7247\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u4e3a\u4e86\u200b\u521b\u5efa\u200b\u8fd9\u4e2a\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>Image(type=\"pil\")</code> \u200b\u6765\u200b\u521b\u5efa\u200b\u8be5\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u5904\u7406\u200b\u9884\u5904\u7406\u200b\u64cd\u4f5c\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b <code>PIL</code> \u200b\u56fe\u50cf\u200b\u3002</p> <p>\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>Label</code>\uff0c\u200b\u5b83\u200b\u4ee5\u200b\u826f\u597d\u200b\u7684\u200b\u5f62\u5f0f\u200b\u663e\u793a\u200b\u9876\u90e8\u200b\u6807\u7b7e\u200b\u3002\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u60f3\u200b\u663e\u793a\u200b\u6240\u6709\u200b 1000 \u200b\u4e2a\u200b\u7c7b\u522b\u200b\u6807\u7b7e\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5c06\u200b\u5176\u200b\u5b9a\u5236\u200b\u4e3a\u200b\u53ea\u200b\u663e\u793a\u200b\u524d\u200b 3 \u200b\u4e2a\u200b\u6807\u7b7e\u200b\uff0c\u200b\u6784\u9020\u200b\u4e3a\u200b <code>Label(num_top_classes=3)</code>\u3002</p> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>examples</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u9884\u586b\u200b\u4e00\u4e9b\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u793a\u4f8b\u200b\u5230\u200b\u754c\u9762\u200b\u4e2d\u200b\u3002Gradio \u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>import gradio as gr\n\ngr.Interface(fn=predict,\n             inputs=gr.Image(type=\"pil\"),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"lion.jpg\", \"cheetah.jpg\"]).launch()\n</code></pre> <p>\u200b\u8fd9\u200b\u5c06\u200b\u4ea7\u751f\u200b\u4ee5\u4e0b\u200b\u754c\u9762\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u76f4\u63a5\u200b\u5c1d\u8bd5\u200b\uff08\u200b\u8bd5\u8bd5\u200b\u4e0a\u4f20\u200b\u81ea\u5df1\u200b\u7684\u200b\u793a\u4f8b\u200b\u56fe\u7247\u200b\uff01\uff09\uff1a</p> <p>\u200b\u5b8c\u6210\u200b\u4e86\u200b\uff01\u200b\u8fd9\u200b\u5c31\u662f\u200b\u6784\u5efa\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b Web \u200b\u6f14\u793a\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u4ee3\u7801\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5171\u4eab\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b <code>launch()</code> \u200b\u63a5\u53e3\u200b\u65f6\u200b\u8bbe\u7f6e\u200b <code>share=True</code>\uff01</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-tensorflow/","title":"TensorFlow \u200b\u548c\u200b Keras \u200b\u4e2d\u200b\u7684\u200b\u56fe\u50cf\u200b\u5206\u7c7b","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/abidlabs/keras-image-classifier \u200b\u6807\u7b7e\u200b\uff1aVISION, MOBILENET, TENSORFLOW</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-tensorflow/#_1","title":"\u7b80\u4ecb","text":"<p>\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u662f\u200b\u8ba1\u7b97\u673a\u200b\u89c6\u89c9\u200b\u4e2d\u200b\u7684\u200b\u4e00\u9879\u200b\u6838\u5fc3\u200b\u4efb\u52a1\u200b\u3002\u200b\u6784\u5efa\u200b\u66f4\u597d\u200b\u7684\u200b\u5206\u7c7b\u5668\u200b\u6765\u200b\u8bc6\u522b\u200b\u56fe\u50cf\u200b\u4e2d\u200b\u7684\u200b\u7269\u4f53\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7814\u7a76\u200b\u7684\u200b\u70ed\u70b9\u200b\u9886\u57df\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u5728\u200b\u4ea4\u901a\u200b\u63a7\u5236\u7cfb\u7edf\u200b\u5230\u200b\u536b\u661f\u200b\u6210\u50cf\u200b\u7b49\u200b\u5e94\u7528\u200b\u4e2d\u200b\u90fd\u200b\u6709\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u5e94\u7528\u200b\u3002</p> <p>\u200b\u8fd9\u6837\u200b\u7684\u200b\u6a21\u578b\u200b\u975e\u5e38\u9002\u5408\u200b\u4e0e\u200b Gradio \u200b\u7684\u200b image \u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b Gradio \u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u7684\u200b Web \u200b\u6f14\u793a\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b Python \u200b\u4e2d\u200b\u6784\u5efa\u200b\u6574\u4e2a\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u754c\u9762\u200b\u5c06\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff08\u200b\u8bd5\u8bd5\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff01\uff09\uff1a</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\uff01</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-tensorflow/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b Keras \u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b\u200b\uff0c\u200b\u56e0\u6b64\u200b\u60a8\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>tensorflow</code>\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-tensorflow/#_3","title":"\u7b2c\u4e00\u6b65\u200b \u2014\u2014 \u200b\u8bbe\u7f6e\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b Mobile Net \u200b\u6a21\u578b\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u4ece\u200bKeras\u200b\u8f7b\u677e\u200b\u4e0b\u8f7d\u200b\u3002\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u6216\u200b\u8bad\u7ec3\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</p> <pre><code>import tensorflow as tf\n\ninception_net = tf.keras.applications.MobileNetV2()\n</code></pre> <p>\u200b\u6b64\u884c\u200b\u4ee3\u7801\u200b\u5c06\u200b\u4f7f\u7528\u200b Keras \u200b\u5e93\u200b\u81ea\u52a8\u200b\u4e0b\u8f7d\u200b MobileNet \u200b\u6a21\u578b\u200b\u548c\u200b\u6743\u91cd\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-tensorflow/#predict","title":"\u7b2c\u4e8c\u6b65\u200b \u2014\u2014 \u200b\u5b9a\u4e49\u200b <code>predict</code> \u200b\u51fd\u6570","text":"<p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u63a5\u6536\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\uff08\u200b\u5728\u200b\u672c\u4f8b\u200b\u4e2d\u4e3a\u200b\u56fe\u50cf\u200b\uff09\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u3002\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u5e94\u200b\u4ee5\u200b\u5b57\u5178\u200b\u5f62\u5f0f\u200b\u8fd4\u56de\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u662f\u200b\u7c7b\u540d\u200b\uff0c\u200b\u503c\u200b\u662f\u200b\u7f6e\u4fe1\u200b\u6982\u7387\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ece\u200b\u8fd9\u4e2a\u200btext \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u7c7b\u540d\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u51fd\u6570\u200b\u5c06\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>import requests\n\n# \u200b\u4ece\u200bImageNet\u200b\u4e0b\u8f7d\u200b\u53ef\u8bfb\u6027\u200b\u6807\u7b7e\u200b\u3002\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef classify_image(inp):\n  inp = inp.reshape((-1, 224, 224, 3))\n  inp = tf.keras.applications.mobilenet_v2.preprocess_input(inp)\n  prediction = inception_net.predict(inp).flatten()\n  confidences = {labels[i]: float(prediction[i]) for i in range(1000)}\n  return confidences\n</code></pre> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u8be6\u7ec6\u200b\u4e86\u89e3\u200b\u4e00\u4e0b\u200b\u3002\u200b\u8be5\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\uff1a</p> <ul> <li><code>inp</code>\uff1a\u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u7684\u200b <code>numpy</code> \u200b\u6570\u7ec4\u200b</li> </ul> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u51fd\u6570\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u6279\u6b21\u200b\u7ef4\u5ea6\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\uff1a</p> <ul> <li><code>confidences</code>\uff1a\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\uff0c\u200b\u4ee5\u200b\u5b57\u5178\u200b\u5f62\u5f0f\u200b\u8868\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u662f\u200b\u7c7b\u200b\u6807\u7b7e\u200b\uff0c\u200b\u503c\u200b\u662f\u200b\u7f6e\u4fe1\u200b\u6982\u7387\u200b</li> </ul>"},{"location":"cn/04_integrating-other-frameworks/image-classification-in-tensorflow/#gradio","title":"\u7b2c\u4e09\u6b65\u200b \u2014\u2014 \u200b\u521b\u5efa\u200b Gradio \u200b\u754c\u9762","text":"<p>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u8bbe\u7f6e\u200b\u597d\u200b\u4e86\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u56f4\u7ed5\u200b\u5b83\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b Gradio \u200b\u754c\u9762\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u662f\u200b\u4e00\u4e2a\u200b\u62d6\u653e\u200b\u56fe\u50cf\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8981\u200b\u521b\u5efa\u200b\u6b64\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>\"gradio.inputs.Image\"</code> \u200b\u7c7b\u200b\uff0c\u200b\u8be5\u7c7b\u200b\u521b\u5efa\u200b\u8be5\u200b\u7ec4\u4ef6\u200b\u5e76\u200b\u5904\u7406\u200b\u9884\u5904\u7406\u200b\u4ee5\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b numpy \u200b\u6570\u7ec4\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u6765\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8be5\u7c7b\u200b\uff0c\u200b\u8be5\u200b\u53c2\u6570\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u5c06\u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u9884\u5904\u7406\u200b\u4e3a\u200b 224 \u200b\u50cf\u7d20\u200b x224 \u200b\u50cf\u7d20\u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u8fd9\u662f\u200b MobileNet \u200b\u6240\u200b\u671f\u671b\u200b\u7684\u200b\u5c3a\u5bf8\u200b\u3002</p> <p>\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u662f\u200b\u4e00\u4e2a\u200b <code>\"label\"</code>\uff0c\u200b\u5b83\u200b\u4ee5\u200b\u7f8e\u89c2\u200b\u7684\u200b\u5f62\u5f0f\u200b\u663e\u793a\u200b\u9876\u90e8\u200b\u6807\u7b7e\u200b\u3002\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u60f3\u200b\u663e\u793a\u200b\u6240\u6709\u200b\u7684\u200b 1,000 \u200b\u4e2a\u7c7b\u200b\u6807\u7b7e\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5c06\u200b\u81ea\u5b9a\u4e49\u200b\u5b83\u200b\u53ea\u200b\u663e\u793a\u200b\u524d\u200b 3 \u200b\u4e2a\u200b\u6807\u7b7e\u200b\u3002</p> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b <code>examples</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u5b83\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e00\u4e9b\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u793a\u4f8b\u200b\u9884\u200b\u586b\u5145\u200b\u6211\u4eec\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002Gradio \u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>import gradio as gr\n\ngr.Interface(fn=classify_image,\n             inputs=gr.Image(shape=(224, 224)),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"banana.jpg\", \"car.jpg\"]).launch()\n</code></pre> <p>\u200b\u8fd9\u200b\u5c06\u200b\u751f\u6210\u200b\u4ee5\u4e0b\u200b\u754c\u9762\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u7acb\u5373\u200b\u5c1d\u8bd5\u200b\uff08\u200b\u5c1d\u8bd5\u200b\u4e0a\u4f20\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u793a\u4f8b\u200b\uff01\uff09\uff1a</p> <p>\u200b\u5b8c\u6210\u200b\uff01\u200b\u8fd9\u200b\u5c31\u662f\u200b\u6784\u5efa\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b\u7684\u200b Web \u200b\u6f14\u793a\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u4ee3\u7801\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5206\u4eab\u200b\uff0c\u200b\u8bf7\u200b\u5c1d\u8bd5\u200b\u5728\u200b\u542f\u52a8\u200b\u63a5\u53e3\u200b\u65f6\u200b\u8bbe\u7f6e\u200b <code>share=True</code>\uff01</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-with-vision-transformers/","title":"Vision Transformers \u200b\u56fe\u50cf\u200b\u5206\u7c7b","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/abidlabs/vision-transformer \u200b\u6807\u7b7e\u200b\uff1aVISION, TRANSFORMERS, HUB</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-with-vision-transformers/#_1","title":"\u7b80\u4ecb","text":"<p>\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u662f\u200b\u8ba1\u7b97\u673a\u200b\u89c6\u89c9\u200b\u4e2d\u200b\u7684\u200b\u91cd\u8981\u200b\u4efb\u52a1\u200b\u3002\u200b\u6784\u5efa\u200b\u66f4\u597d\u200b\u7684\u200b\u5206\u7c7b\u5668\u200b\u4ee5\u200b\u786e\u5b9a\u200b\u56fe\u50cf\u200b\u4e2d\u200b\u5b58\u5728\u200b\u7684\u200b\u5bf9\u8c61\u200b\u662f\u200b\u5f53\u524d\u200b\u7814\u7a76\u200b\u7684\u200b\u70ed\u70b9\u200b\u9886\u57df\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u5728\u200b\u4ece\u200b\u4eba\u8138\u8bc6\u522b\u200b\u5230\u200b\u5236\u9020\u200b\u8d28\u91cf\u200b\u63a7\u5236\u200b\u7b49\u200b\u65b9\u9762\u200b\u90fd\u200b\u6709\u200b\u5e94\u7528\u200b\u3002</p> <p>\u200b\u6700\u200b\u5148\u8fdb\u200b\u7684\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b\u57fa\u4e8e\u200b transformers \u200b\u67b6\u6784\u200b\uff0c\u200b\u8be5\u200b\u67b6\u6784\u200b\u6700\u521d\u200b\u5728\u200b\u81ea\u7136\u8bed\u8a00\u200b\u5904\u7406\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u5f88\u200b\u53d7\u6b22\u8fce\u200b\u3002\u200b\u8fd9\u79cd\u200b\u67b6\u6784\u200b\u901a\u5e38\u200b\u88ab\u200b\u79f0\u4e3a\u200b vision transformers (ViT)\u3002\u200b\u8fd9\u4e9b\u200b\u6a21\u578b\u200b\u975e\u5e38\u9002\u5408\u200b\u4e0e\u200b Gradio \u200b\u7684\u200b\u56fe\u50cf\u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b Gradio \u200b\u8fdb\u884c\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u7684\u200b Web \u200b\u6f14\u793a\u200b\u3002\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u7528\u200b\u4e00\u884c\u200b Python \u200b\u4ee3\u7801\u200b\u5373\u53ef\u200b\u6784\u5efa\u200b\u6574\u4e2a\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5176\u200b\u6548\u679c\u200b\u5982\u4e0b\u200b\uff08\u200b\u8bd5\u7528\u200b\u4e00\u4e0b\u200b\u793a\u4f8b\u200b\u4e4b\u4e00\u200b\uff01\uff09\uff1a</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\uff01</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-with-vision-transformers/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-with-vision-transformers/#1-vision","title":"\u6b65\u9aa4\u200b 1 - \u200b\u9009\u62e9\u200b Vision \u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200bHugging Face Model Hub\u200b\u4e0a\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\u3002\u200b\u8be5\u200b Hub \u200b\u5305\u542b\u200b\u6570\u5343\u4e2a\u200b\u6a21\u578b\u200b\uff0c\u200b\u6db5\u76d6\u200b\u4e86\u200b\u591a\u79cd\u4e0d\u540c\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u4efb\u52a1\u200b\u3002</p> <p>\u200b\u5728\u200b\u5de6\u4fa7\u200b\u8fb9\u680f\u200b\u4e2d\u200b\u5c55\u5f00\u200b Tasks \u200b\u7c7b\u522b\u200b\uff0c\u200b\u5e76\u200b\u9009\u62e9\u200b\u6211\u4eec\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u201cImage Classification\u201d\u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u770b\u5230\u200b Hub \u200b\u4e0a\u200b\u4e3a\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u6240\u6709\u200b\u6a21\u578b\u200b\u3002</p> <p>\u200b\u5728\u200b\u64b0\u5199\u200b\u65f6\u200b\uff0c\u200b\u6700\u200b\u53d7\u6b22\u8fce\u200b\u7684\u200b\u6a21\u578b\u200b\u662f\u200b <code>google/vit-base-patch16-224</code>\uff0c\u200b\u8be5\u200b\u6a21\u578b\u200b\u5728\u200b\u5206\u8fa8\u7387\u200b\u4e3a\u200b 224x224 \u200b\u50cf\u7d20\u200b\u7684\u200b ImageNet \u200b\u56fe\u50cf\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u6f14\u793a\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u6b64\u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"cn/04_integrating-other-frameworks/image-classification-with-vision-transformers/#2-gradio-vision-transformer","title":"\u6b65\u9aa4\u200b 2 - \u200b\u4f7f\u7528\u200b Gradio \u200b\u52a0\u8f7d\u200b Vision Transformer \u200b\u6a21\u578b","text":"<p>\u200b\u5f53\u200b\u4f7f\u7528\u200b Hugging Face Hub \u200b\u4e0a\u200b\u7684\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u65e0\u9700\u200b\u4e3a\u200b\u6f14\u793a\u200b\u5b9a\u4e49\u200b\u8f93\u5165\u200b\u6216\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u540c\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u200b\u9700\u8981\u200b\u5173\u5fc3\u200b\u9884\u5904\u7406\u200b\u6216\u200b\u540e\u5904\u7406\u200b\u7684\u200b\u7ec6\u8282\u200b\u3002\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u6a21\u578b\u200b\u6807\u7b7e\u200b\u4e2d\u200b\u81ea\u52a8\u200b\u63a8\u65ad\u200b\u51fa\u6765\u200b\u3002</p> <p>\u200b\u9664\u4e86\u200b\u5bfc\u5165\u200b\u8bed\u53e5\u200b\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u8981\u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u5373\u53ef\u200b\u52a0\u8f7d\u200b\u5e76\u200b\u542f\u52a8\u200b\u6f14\u793a\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>gr.Interface.load()</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5e76\u200b\u4f20\u5165\u200b\u5305\u542b\u200b <code>huggingface/</code> \u200b\u7684\u200b\u6a21\u578b\u200b\u8def\u5f84\u200b\uff0c\u200b\u4ee5\u200b\u6307\u5b9a\u200b\u5b83\u200b\u6765\u81ea\u200b Hugging Face Hub\u3002</p> <pre><code>import gradio as gr\n\ngr.Interface.load(\n             \"huggingface/google/vit-base-patch16-224\",\n             examples=[\"alligator.jpg\", \"laptop.jpg\"]).launch()\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>examples</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e00\u4e9b\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u793a\u4f8b\u200b\u9884\u200b\u586b\u5145\u200b\u6211\u4eec\u200b\u7684\u200b\u754c\u9762\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u5c06\u200b\u751f\u6210\u200b\u4ee5\u4e0b\u200b\u63a5\u53e3\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u5c1d\u8bd5\u200b\u3002\u200b\u5f53\u200b\u60a8\u200b\u8f93\u5165\u200b\u56fe\u50cf\u200b\u65f6\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u81ea\u52a8\u200b\u8fdb\u884c\u200b\u9884\u5904\u7406\u200b\u5e76\u53d1\u200b\u9001\u5230\u200b Hugging Face Hub API\uff0c\u200b\u901a\u8fc7\u200b\u6a21\u578b\u200b\u5904\u7406\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u4eba\u7c7b\u200b\u53ef\u200b\u89e3\u91ca\u200b\u7684\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u8fd4\u56de\u200b\u3002\u200b\u5c1d\u8bd5\u200b\u4e0a\u4f20\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u56fe\u50cf\u200b\uff01</p> <p>\u200b\u5b8c\u6210\u200b\uff01\u200b\u53ea\u200b\u9700\u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\uff0c\u200b\u60a8\u200b\u5c31\u200b\u5efa\u7acb\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u5668\u200b\u7684\u200b Web \u200b\u6f14\u793a\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5206\u4eab\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b <code>launch()</code> \u200b\u63a5\u53e3\u200b\u65f6\u200b\u8bbe\u7f6e\u200b <code>share=True</code>\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/","title":"\u8fde\u63a5\u200b\u5230\u200b\u6570\u636e\u5e93","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/gradio/chicago-bike-share-dashboard \u200b\u6807\u7b7e\u200b\uff1aTABULAR, PLOTS</p>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#_2","title":"\u4ecb\u7ecd","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Gradio \u200b\u8fde\u63a5\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u4f1a\u200b \u200b\u8fde\u63a5\u200b\u5230\u200b\u5728\u200b AWS \u200b\u4e0a\u200b\u6258\u7ba1\u200b\u7684\u200b PostgreSQL \u200b\u6570\u636e\u5e93\u200b\uff0c\u200b\u4f46\u200b Gradio \u200b\u5bf9\u4e8e\u200b\u60a8\u200b\u8fde\u63a5\u200b\u7684\u200b\u6570\u636e\u5e93\u200b\u7c7b\u578b\u200b\u548c\u200b\u6258\u7ba1\u200b\u4f4d\u7f6e\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u9650\u5236\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u80fd\u200b\u7f16\u5199\u200b Python \u200b\u4ee3\u7801\u200b\u6765\u200b\u8fde\u63a5\u200b \u200b\u60a8\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u60a8\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Gradio \u200b\u5728\u200b Web \u200b\u754c\u9762\u200b\u4e2d\u200b\u663e\u793a\u200b\u5b83\u200b \ud83d\udcaa</p>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#_3","title":"\u6982\u8ff0","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u5206\u6790\u200b\u6765\u81ea\u200b\u829d\u52a0\u54e5\u200b\u7684\u200b\u81ea\u884c\u8f66\u200b\u5171\u4eab\u200b\u6570\u636e\u200b\u3002\u200b\u6570\u636e\u200b\u6258\u7ba1\u200b\u5728\u200b kaggle \u200b\u8fd9\u91cc\u200b\u3002 \u200b\u6211\u4eec\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u4eea\u8868\u76d8\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5229\u76ca\u200b\u76f8\u5173\u8005\u200b\u80fd\u591f\u200b\u56de\u7b54\u200b\u4ee5\u4e0b\u200b\u95ee\u9898\u200b\uff1a</p> <ol> <li>\u200b\u7535\u52a8\u200b\u81ea\u884c\u8f66\u200b\u662f\u5426\u200b\u6bd4\u200b\u666e\u901a\u200b\u81ea\u884c\u8f66\u200b\u66f4\u200b\u53d7\u6b22\u8fce\u200b\uff1f</li> <li>\u200b\u54ea\u4e9b\u200b\u51fa\u53d1\u200b\u81ea\u884c\u8f66\u200b\u7ad9\u70b9\u200b\u6700\u200b\u53d7\u6b22\u8fce\u200b\uff1f</li> </ol> <p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u7ed3\u675f\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u7684\u200b\u529f\u80fd\u9f50\u5168\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff1a</p> <p> </p>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#1-","title":"\u6b65\u9aa4\u200b 1 - \u200b\u521b\u5efa\u200b\u6570\u636e\u5e93","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b Amazon \u200b\u7684\u200b RDS \u200b\u670d\u52a1\u200b\u4e0a\u200b\u6258\u7ba1\u200b\u6211\u4eec\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u5982\u679c\u200b\u8fd8\u200b\u6ca1\u6709\u200b AWS \u200b\u8d26\u53f7\u200b\uff0c\u200b\u8bf7\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b \u200b\u5e76\u200b\u5728\u200b\u514d\u8d39\u200b\u5c42\u7ea7\u200b\u4e0a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b PostgreSQL \u200b\u6570\u636e\u5e93\u200b\u3002</p> <p>\u200b\u91cd\u8981\u200b\u63d0\u793a\u200b\uff1a\u200b\u5982\u679c\u200b\u60a8\u200b\u8ba1\u5212\u200b\u5728\u200b HuggingFace Spaces \u200b\u4e0a\u200b\u6258\u7ba1\u200b\u6b64\u200b\u6f14\u793a\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u6570\u636e\u5e93\u200b\u5728\u200b 8080 \u200b\u7aef\u53e3\u200b\u4e0a\u200b\u3002Spaces \u200b\u5c06\u200b\u963b\u6b62\u200b\u9664\u200b\u7aef\u53e3\u200b 80\u3001443 \u200b\u6216\u200b 8080 \u200b\u4e4b\u5916\u200b\u7684\u200b\u6240\u6709\u200b\u5916\u90e8\u200b\u8fde\u63a5\u200b\uff0c\u200b\u5982\u6b64\u200b\u5904\u6240\u200b\u793a\u200b\u3002 RDS \u200b\u4e0d\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5728\u200b 80 \u200b\u6216\u200b 443 \u200b\u7aef\u53e3\u200b\u4e0a\u200b\u521b\u5efa\u200b postgreSQL \u200b\u5b9e\u4f8b\u200b\u3002</p> <p>\u200b\u521b\u5efa\u200b\u5b8c\u200b\u6570\u636e\u5e93\u200b\u540e\u200b\uff0c\u200b\u4ece\u200b Kaggle \u200b\u4e0b\u8f7d\u200b\u6570\u636e\u200b\u96c6\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e0a\u200b\u4f20\u5230\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u3002 \u200b\u4e3a\u4e86\u200b\u6f14\u793a\u200b\u7684\u200b\u76ee\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u4f1a\u4e0a\u200b\u4f20\u200b 2022 \u200b\u5e74\u200b 3 \u200b\u6708\u200b\u7684\u200b\u6570\u636e\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#2a-etl","title":"\u6b65\u9aa4\u200b 2.a - \u200b\u7f16\u5199\u200b ETL \u200b\u4ee3\u7801","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u67e5\u8be2\u6570\u636e\u5e93\u200b\uff0c\u200b\u6309\u200b\u81ea\u884c\u8f66\u200b\u7c7b\u578b\u200b\uff08\u200b\u7535\u52a8\u200b\u3001\u200b\u6807\u51c6\u200b\u6216\u200b\u6709\u7801\u200b\uff09\u200b\u8fdb\u884c\u200b\u5206\u7ec4\u200b\uff0c\u200b\u5e76\u200b\u83b7\u53d6\u200b\u603b\u200b\u9a91\u884c\u200b\u6b21\u6570\u200b\u3002 \u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u67e5\u8be2\u200b\u6bcf\u4e2a\u200b\u7ad9\u70b9\u200b\u7684\u200b\u51fa\u53d1\u200b\u9a91\u884c\u200b\u6b21\u6570\u200b\uff0c\u200b\u5e76\u200b\u83b7\u53d6\u200b\u524d\u200b 5 \u200b\u4e2a\u200b\u3002</p> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b matplotlib \u200b\u5c06\u200b\u67e5\u8be2\u200b\u7ed3\u679c\u200b\u53ef\u89c6\u5316\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b pandas \u200b\u7684\u200bread_sql \u200b\u65b9\u6cd5\u200b\u6765\u200b\u8fde\u63a5\u200b\u6570\u636e\u5e93\u200b\u3002\u200b\u8fd9\u200b\u9700\u8981\u200b\u5b89\u88c5\u200b <code>psycopg2</code> \u200b\u5e93\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u8fde\u63a5\u200b\u5230\u200b\u6570\u636e\u5e93\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6307\u5b9a\u200b\u6570\u636e\u5e93\u200b\u7684\u200b\u7528\u6237\u540d\u200b\u3001\u200b\u5bc6\u7801\u200b\u548c\u200b\u4e3b\u673a\u200b\u4f5c\u4e3a\u200b\u73af\u5883\u53d8\u91cf\u200b\u3002 \u200b\u8fd9\u6837\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u907f\u514d\u200b\u5c06\u200b\u654f\u611f\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u660e\u6587\u200b\u5f62\u5f0f\u200b\u5b58\u50a8\u200b\u5728\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u200b\u6211\u4eec\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u66f4\u200b\u5b89\u5168\u200b\u3002</p> <pre><code>import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nDB_USER = os.getenv(\"DB_USER\")\nDB_PASSWORD = os.getenv(\"DB_PASSWORD\")\nDB_HOST = os.getenv(\"DB_HOST\")\nPORT = 8080\nDB_NAME = \"bikeshare\"\n\nconnection_string = f\"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}?port={PORT}&amp;dbname={DB_NAME}\"\n\ndef get_count_ride_type():\n    df = pd.read_sql(\n    \"\"\"\n        SELECT COUNT(ride_id) as n, rideable_type\n        FROM rides\n        GROUP BY rideable_type\n        ORDER BY n DESC\n    \"\"\",\n    con=connection_string\n    )\n    fig_m, ax = plt.subplots()\n    ax.bar(x=df['rideable_type'], height=df['n'])\n    ax.set_title(\"Number of rides by bycycle type\")\n    ax.set_ylabel(\"Number of Rides\")\n    ax.set_xlabel(\"Bicycle Type\")\n    return fig_m\n\n\ndef get_most_popular_stations():\n\n    df = pd.read_sql(\n        \"\"\"\n    SELECT COUNT(ride_id) as n, MAX(start_station_name) as station\n    FROM RIDES\n    WHERE start_station_name is NOT NULL\n    GROUP BY start_station_id\n    ORDER BY n DESC\n    LIMIT 5\n    \"\"\",\n    con=connection_string\n    )\n    fig_m, ax = plt.subplots()\n    ax.bar(x=df['station'], height=df['n'])\n    ax.set_title(\"Most popular stations\")\n    ax.set_ylabel(\"Number of Rides\")\n    ax.set_xlabel(\"Station Name\")\n    ax.set_xticklabels(\n        df['station'], rotation=45, ha=\"right\", rotation_mode=\"anchor\"\n    )\n    ax.tick_params(axis=\"x\", labelsize=8)\n    fig_m.tight_layout()\n    return fig_m\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u672c\u5730\u200b\u8fd0\u884c\u200b\u6211\u4eec\u200b\u7684\u200b\u811a\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u4e0b\u9762\u200b\u8fd9\u6837\u200b\u5c06\u200b\u51ed\u636e\u200b\u4f5c\u4e3a\u200b\u73af\u5883\u53d8\u91cf\u200b\u4f20\u9012\u200b\uff1a</p> <pre><code>DB_USER='username' DB_PASSWORD='password' DB_HOST='host' python app.py\n</code></pre>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#2c-gradio","title":"\u6b65\u9aa4\u200b 2.c - \u200b\u7f16\u5199\u200b\u60a8\u200b\u7684\u200b gradio \u200b\u5e94\u7528\u7a0b\u5e8f","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e24\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b <code>gr.Plot</code> \u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b matplotlib \u200b\u56fe\u8868\u200b\u5e76\u6392\u200b\u663e\u793a\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>gr.Row()</code>\u3002 \u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5728\u200b <code>demo.load()</code> \u200b\u4e8b\u4ef6\u200b\u89e6\u53d1\u5668\u200b\u4e2d\u200b\u5c01\u88c5\u200b\u4e86\u200b\u83b7\u53d6\u6570\u636e\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c \u200b\u6211\u4eec\u200b\u7684\u200b\u6f14\u793a\u200b\u5c06\u200b\u5728\u200b\u6bcf\u6b21\u200b\u7f51\u9875\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u4ece\u200b\u6570\u636e\u5e93\u200b\u52a8\u6001\u200b\u83b7\u53d6\u200b\u6700\u65b0\u200b\u6570\u636e\u200b\u3002\ud83e\ude84</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        bike_type = gr.Plot()\n        station = gr.Plot()\n\n    demo.load(get_count_ride_type, inputs=None, outputs=bike_type)\n    demo.load(get_most_popular_stations, inputs=None, outputs=station)\n\ndemo.launch()\n</code></pre>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#3-","title":"\u6b65\u9aa4\u200b 3 - \u200b\u90e8\u7f72","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u8fd0\u884c\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5c06\u200b\u5728\u200b\u672c\u5730\u200b\u8fd0\u884c\u200b\u3002 \u200b\u60a8\u200b\u751a\u81f3\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5c06\u200b <code>share=True</code> \u200b\u53c2\u6570\u4f20\u9012\u200b\u7ed9\u200b <code>launch</code> \u200b\u6765\u200b\u83b7\u5f97\u200b\u4e00\u4e2a\u200b\u4e34\u65f6\u200b\u5171\u4eab\u200b\u94fe\u63a5\u200b\u3002</p> <p>\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u8981\u200b\u4e00\u4e2a\u200b\u6c38\u4e45\u200b\u7684\u200b\u90e8\u7f72\u200b\u89e3\u51b3\u65b9\u6848\u200b\u5462\u200b\uff1f \u200b\u8ba9\u200b\u6211\u4eec\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u90e8\u7f72\u200b\u5230\u200b\u514d\u8d39\u200b\u7684\u200b HuggingFace Spaces \u200b\u5e73\u53f0\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4e4b\u524d\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u8fc7\u200b Spaces\uff0c\u200b\u8bf7\u200b\u6309\u7167\u200b\u4e4b\u524d\u200b\u7684\u200b\u6307\u5357\u200b\u8fd9\u91cc\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002 \u200b\u60a8\u200b\u5c06\u200b\u9700\u8981\u200b\u5c06\u200b <code>DB_USER</code>\u3001<code>DB_PASSWORD</code> \u200b\u548c\u200b <code>DB_HOST</code> \u200b\u53d8\u91cf\u200b\u6dfb\u52a0\u200b\u4e3a\u200b \"Repo Secrets\"\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b \" \u200b\u8bbe\u7f6e\u200b \" \u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u3002</p> <p></p>"},{"location":"cn/05_tabular-data-science-and-plots/01_connecting-to-a-database/#_4","title":"\u7ed3\u8bba","text":"<p>\u200b\u606d\u559c\u200b\u4f60\u200b\uff01\u200b\u60a8\u200b\u77e5\u9053\u200b\u5982\u4f55\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8fde\u63a5\u200b\u5230\u200b\u4e91\u7aef\u200b\u6258\u7ba1\u200b\u7684\u200b\u6570\u636e\u5e93\u200b\uff01\u2601\ufe0f</p> <p>\u200b\u6211\u4eec\u200b\u7684\u200b\u4eea\u8868\u677f\u200b\u73b0\u5728\u200b\u6b63\u5728\u200bSpaces\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u3002 \u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\u5728\u200b\u8fd9\u91cc\u200b</p> <p>\u200b\u6b63\u5982\u200b\u60a8\u200b\u6240\u89c1\u200b\uff0cGradio \u200b\u4f7f\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8fde\u63a5\u200b\u5230\u200b\u60a8\u200b\u7684\u200b\u6570\u636e\u200b\u5e76\u200b\u4ee5\u200b\u60a8\u200b\u60f3\u8981\u200b\u7684\u200b\u65b9\u5f0f\u200b\u663e\u793a\u200b\uff01\ud83d\udd25</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/","title":"\u4ece\u200b BigQuery \u200b\u6570\u636e\u200b\u521b\u5efa\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8","text":"<p>Tags: \u200b\u8868\u683c\u200b , \u200b\u4eea\u8868\u76d8\u200b , \u200b\u7ed8\u56fe\u200b</p> <p>Google BigQuery \u200b\u662f\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u4e91\u200b\u7684\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u5927\u89c4\u6a21\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u670d\u52a1\u200b\u3002\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u65e0\u200b\u670d\u52a1\u5668\u200b\u4e14\u200b\u9ad8\u5ea6\u200b\u53ef\u200b\u6269\u5c55\u200b\u7684\u200b\u6570\u636e\u4ed3\u5e93\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff0c\u200b\u4f7f\u200b\u7528\u6237\u200b\u80fd\u591f\u200b\u4f7f\u7528\u200b\u7c7b\u4f3c\u200b SQL \u200b\u7684\u200b\u67e5\u8be2\u200b\u5206\u6790\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5411\u200b\u60a8\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>gradio</code> \u200b\u5728\u200b Python \u200b\u4e2d\u200b\u67e5\u8be2\u200b BigQuery \u200b\u6570\u636e\u200b\u96c6\u200b\u5e76\u200b\u5728\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8\u200b\u4e2d\u200b\u663e\u793a\u200b\u6570\u636e\u200b\u3002\u200b\u4eea\u8868\u677f\u200b\u5c06\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u8bbe\u7f6e\u200b BigQuery \u200b\u51ed\u636e\u200b</li> <li>\u200b\u4f7f\u7528\u200b BigQuery \u200b\u5ba2\u6237\u7aef\u200b</li> <li>\u200b\u6784\u5efa\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8\u200b\uff08\u200b\u4ec5\u200b\u9700\u200b 7 \u200b\u884c\u200b Python \u200b\u4ee3\u7801\u200b\uff09</li> </ol> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u7ebd\u7ea6\u65f6\u62a5\u200b\u7684\u200b COVID \u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u8be5\u200b\u6570\u636e\u200b\u96c6\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u516c\u5171\u6570\u636e\u200b\u96c6\u53ef\u200b\u5728\u200b BigQuery \u200b\u4e0a\u200b\u4f7f\u7528\u200b\u3002\u200b\u6570\u636e\u200b\u96c6\u200b\u540d\u4e3a\u200b <code>covid19_nyt.us_counties</code>\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u6709\u5173\u200b\u7f8e\u56fd\u200b\u5404\u53bf\u200b COVID \u200b\u786e\u8bca\u200b\u75c5\u4f8b\u200b\u548c\u200b\u6b7b\u4ea1\u200b\u4eba\u6570\u200b\u7684\u200b\u6700\u65b0\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1a\u200b\u672c\u200b\u6307\u5357\u200b\u4f7f\u7528\u200b Gradio Blocks\uff0c\u200b\u56e0\u6b64\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u719f\u6089\u200b Blocks \u200b\u7c7b\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/#bigquery_1","title":"\u8bbe\u7f6e\u200b BigQuery \u200b\u51ed\u636e","text":"<p>\u200b\u8981\u200b\u4f7f\u7528\u200b Gradio \u200b\u548c\u200b BigQuery\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u83b7\u53d6\u200b\u60a8\u200b\u7684\u200b BigQuery \u200b\u51ed\u636e\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e0e\u200b BigQuery Python \u200b\u5ba2\u6237\u7aef\u200b \u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u62e5\u6709\u200b BigQuery \u200b\u51ed\u636e\u200b\uff08\u200b\u4f5c\u4e3a\u200b <code>.json</code> \u200b\u6587\u4ef6\u200b\uff09\uff0c\u200b\u5219\u200b\u53ef\u4ee5\u200b\u8df3\u8fc7\u200b\u6b64\u200b\u90e8\u5206\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u51e0\u5206\u949f\u200b\u5185\u200b\u514d\u8d39\u200b\u5b8c\u6210\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u3002</p> <ol> <li> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u767b\u5f55\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Google Cloud \u200b\u5e10\u6237\u200b\uff0c\u200b\u5e76\u200b\u8f6c\u5230\u200b Google Cloud \u200b\u63a7\u5236\u53f0\u200b (https://console.cloud.google.com/)</p> </li> <li> <p>\u200b\u5728\u200b Cloud \u200b\u63a7\u5236\u53f0\u200b\u4e2d\u200b\uff0c\u200b\u5355\u51fb\u200b\u5de6\u4e0a\u89d2\u200b\u7684\u200b\u6c49\u5821\u200b\u83dc\u5355\u200b\uff0c\u200b\u7136\u540e\u200b\u4ece\u200b\u83dc\u5355\u4e2d\u9009\u62e9\u200b\u201cAPI \u200b\u4e0e\u200b\u670d\u52a1\u200b\u201d\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u6ca1\u6709\u200b\u73b0\u6709\u200b\u9879\u76ee\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u9879\u76ee\u200b\u3002</p> </li> <li> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u5355\u51fb\u200b\u201c+ \u200b\u542f\u7528\u200b\u7684\u200b API \u200b\u4e0e\u200b\u670d\u52a1\u200b\u201d\u200b\u6309\u94ae\u200b\uff0c\u200b\u8be5\u200b\u6309\u94ae\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4e3a\u200b\u9879\u76ee\u200b\u542f\u7528\u200b\u7279\u5b9a\u200b\u670d\u52a1\u200b\u3002\u200b\u641c\u7d22\u200b\u201cBigQuery API\u201d\uff0c\u200b\u5355\u51fb\u200b\u5b83\u200b\uff0c\u200b\u7136\u540e\u200b\u5355\u51fb\u200b\u201c\u200b\u542f\u7528\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u770b\u5230\u200b\u201c\u200b\u7ba1\u7406\u200b\u201d\u200b\u6309\u94ae\u200b\uff0c\u200b\u5219\u200b\u8868\u793a\u200b BigQuery \u200b\u5df2\u200b\u542f\u7528\u200b\uff0c\u200b\u60a8\u200b\u5df2\u200b\u51c6\u5907\u5c31\u7eea\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u201cAPI \u200b\u4e0e\u200b\u670d\u52a1\u200b\u201d\u200b\u83dc\u5355\u200b\u4e2d\u200b\uff0c\u200b\u5355\u51fb\u200b\u201c\u200b\u51ed\u636e\u200b\u201d\u200b\u9009\u9879\u5361\u200b\uff0c\u200b\u7136\u540e\u200b\u5355\u51fb\u200b\u201c\u200b\u521b\u5efa\u200b\u51ed\u636e\u200b\u201d\u200b\u6309\u94ae\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u201c\u200b\u521b\u5efa\u200b\u51ed\u636e\u200b\u201d\u200b\u5bf9\u8bdd\u6846\u200b\u4e2d\u200b\uff0c\u200b\u9009\u62e9\u200b\u201c\u200b\u670d\u52a1\u200b\u5e10\u53f7\u200b\u5bc6\u94a5\u200b\u201d\u200b\u4f5c\u4e3a\u200b\u8981\u200b\u521b\u5efa\u200b\u7684\u200b\u51ed\u636e\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u5176\u200b\u547d\u540d\u200b\u3002\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4e3a\u200b\u5176\u200b\u6388\u4e88\u200b\u89d2\u8272\u200b\uff08\u200b\u4f8b\u5982\u200b\u201cBigQuery \u200b\u7528\u6237\u200b\u201d\uff09\u200b\u4e3a\u200b\u670d\u52a1\u200b\u5e10\u53f7\u200b\u6388\u4e88\u200b\u6743\u9650\u200b\uff0c\u200b\u4ece\u800c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u8fd0\u884c\u200b\u67e5\u8be2\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u9009\u62e9\u200b\u670d\u52a1\u200b\u5e10\u53f7\u200b\u540e\u200b\uff0c\u200b\u9009\u62e9\u200b\u201cJSON\u201d\u200b\u5bc6\u94a5\u200b\u7c7b\u578b\u200b\uff0c\u200b\u7136\u540e\u200b\u5355\u51fb\u200b\u201c\u200b\u521b\u5efa\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u4e0b\u8f7d\u200b\u5305\u542b\u200b\u60a8\u200b\u51ed\u636e\u200b\u7684\u200b JSON \u200b\u5bc6\u94a5\u200b\u6587\u4ef6\u200b\u5230\u200b\u60a8\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u5916\u89c2\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a</p> </li> </ol> <pre><code>{\n    \"type\": \"service_account\",\n    \"project_id\": \"your project\",\n    \"private_key_id\": \"your private key id\",\n    \"private_key\": \"private key\",\n    \"client_email\": \"email\",\n    \"client_id\": \"client id\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/email_id\"\n}\n</code></pre>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/#bigquery_2","title":"\u4f7f\u7528\u200b BigQuery \u200b\u5ba2\u6237\u7aef","text":"<p>\u200b\u83b7\u5f97\u200b\u51ed\u636e\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b BigQuery Python \u200b\u5ba2\u6237\u7aef\u200b\u4f7f\u7528\u200b\u60a8\u200b\u7684\u200b\u51ed\u636e\u200b\u8fdb\u884c\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u3002\u200b\u4e3a\u6b64\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u5b89\u88c5\u200b BigQuery Python \u200b\u5ba2\u6237\u7aef\u200b\uff1a</p> <pre><code>pip install google-cloud-bigquery[pandas]\n</code></pre> <p>\u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\u6211\u4eec\u200b\u5df2\u200b\u5b89\u88c5\u200b\u4e86\u200b pandas \u200b\u63d2\u4ef6\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u5c06\u200b BigQuery \u200b\u6570\u636e\u200b\u96c6\u200b\u5904\u7406\u200b\u4e3a\u200b pandas \u200b\u6570\u636e\u200b\u5e27\u200b\u5c06\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u3002\u200b\u5b89\u88c5\u200b\u4e86\u200b\u5ba2\u6237\u7aef\u200b\u4e4b\u540e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\u4f7f\u7528\u200b\u60a8\u200b\u7684\u200b\u51ed\u636e\u200b\u8fdb\u884c\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\uff1a</p> <pre><code>from google.cloud import bigquery\n\nclient = bigquery.Client.from_service_account_json(\"path/to/key.json\")\n</code></pre> <p>\u200b\u5b8c\u6210\u200b\u51ed\u636e\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b BigQuery Python \u200b\u5ba2\u6237\u7aef\u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b BigQuery \u200b\u6570\u636e\u200b\u96c6\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\u51fd\u6570\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u5728\u200b BigQuery \u200b\u4e2d\u200b\u67e5\u8be2\u200b <code>covid19_nyt.us_counties</code> \u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u4ee5\u200b\u663e\u793a\u200b\u622a\u81f3\u200b\u5f53\u524d\u200b\u65e5\u671f\u200b\u7684\u200b\u786e\u8bca\u200b\u4eba\u200b\u6570\u6700\u591a\u200b\u7684\u200b\u524d\u200b 20 \u200b\u4e2a\u200b\u53bf\u200b\uff1a</p> <pre><code>import numpy as np\n\nQUERY = (\n    'SELECT * FROM `bigquery-public-data.covid19_nyt.us_counties` '\n    'ORDER BY date DESC,confirmed_cases DESC '\n    'LIMIT 20')\n\ndef run_query():\n    query_job = client.query(QUERY)\n    query_result = query_job.result()\n    df = query_result.to_dataframe()\n    # Select a subset of columns\n    df = df[[\"confirmed_cases\", \"deaths\", \"county\", \"state_name\"]]\n    # Convert numeric columns to standard numpy types\n    df = df.astype({\"deaths\": np.int64, \"confirmed_cases\": np.int64})\n    return df\n</code></pre>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-bigquery-data/#_1","title":"\u6784\u5efa\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8","text":"<p>\u200b\u4e00\u65e6\u200b\u60a8\u200b\u6709\u200b\u4e86\u200b\u67e5\u8be2\u200b\u6570\u636e\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Gradio \u200b\u5e93\u200b\u7684\u200b <code>gr.DataFrame</code> \u200b\u7ec4\u4ef6\u200b\u4ee5\u200b\u8868\u683c\u200b\u5f62\u5f0f\u200b\u663e\u793a\u200b\u7ed3\u679c\u200b\u3002\u200b\u8fd9\u662f\u200b\u4e00\u79cd\u200b\u68c0\u67e5\u6570\u636e\u200b\u5e76\u200b\u786e\u4fdd\u200b\u67e5\u8be2\u200b\u6b63\u786e\u200b\u7684\u200b\u6709\u7528\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>gr.DataFrame</code> \u200b\u7ec4\u4ef6\u200b\u663e\u793a\u200b\u7ed3\u679c\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002\u200b\u901a\u8fc7\u200b\u5c06\u200b <code>run_query</code> \u200b\u51fd\u6570\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>gr.DataFrame</code>\uff0c\u200b\u6211\u4eec\u200b\u6307\u793a\u200b Gradio \u200b\u5728\u200b\u9875\u9762\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u7acb\u5373\u200b\u8fd0\u884c\u200b\u8be5\u200b\u51fd\u6570\u200b\u5e76\u200b\u663e\u793a\u200b\u7ed3\u679c\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u5173\u952e\u5b57\u200b <code>every</code>\uff0c\u200b\u4ee5\u200b\u544a\u77e5\u200b\u4eea\u8868\u677f\u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u5237\u65b0\u200b\u4e00\u6b21\u200b\uff0860*60 \u200b\u79d2\u200b\uff09\u3002</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.DataFrame(run_query, every=60*60)\n\ndemo.queue().launch()  # Run the demo using queuing\n</code></pre> <p>\u200b\u4e5f\u8bb8\u200b\u60a8\u200b\u60f3\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u4eea\u8868\u76d8\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u53ef\u89c6\u5316\u200b\u6548\u679c\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gr.ScatterPlot()</code> \u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u6570\u636e\u200b\u53ef\u89c6\u5316\u200b\u4e3a\u200b\u6563\u70b9\u56fe\u200b\u3002\u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u60a8\u200b\u67e5\u770b\u200b\u6570\u636e\u200b\u4e2d\u200b\u4e0d\u540c\u200b\u53d8\u91cf\u200b\uff08\u200b\u4f8b\u5982\u200b\u75c5\u4f8b\u200b\u6570\u200b\u548c\u200b\u6b7b\u4ea1\u6570\u200b\uff09\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u5e76\u200b\u53ef\u200b\u7528\u4e8e\u200b\u63a2\u7d22\u200b\u6570\u636e\u200b\u548c\u200b\u83b7\u53d6\u200b\u89c1\u89e3\u200b\u3002\u200b\u540c\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5b9e\u65f6\u200b\u5b8c\u6210\u200b\u8fd9\u4e00\u200b\u64cd\u4f5c\u200b \u200b\u901a\u8fc7\u200b\u4f20\u9012\u200b <code>every</code> \u200b\u53c2\u6570\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5c55\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u5728\u200b\u663e\u793a\u200b\u6570\u636e\u200b\u65f6\u200b\u4f7f\u7528\u200b <code>gr.ScatterPlot</code> \u200b\u6765\u200b\u8fdb\u884c\u200b\u53ef\u89c6\u5316\u200b\u3002</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \ud83d\udc89 Covid Dashboard (Updated Hourly)\")\n    with gr.Row():\n        gr.DataFrame(run_query, every=60*60)\n        gr.ScatterPlot(run_query, every=60*60, x=\"confirmed_cases\",\n                        y=\"deaths\", tooltip=\"county\", width=500, height=500)\n\ndemo.queue().launch()  # Run the demo with queuing enabled\n</code></pre>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/","title":"\u4ece\u200b Supabase \u200b\u6570\u636e\u200b\u521b\u5efa\u200b\u4eea\u8868\u76d8","text":"<p>Tags: TABULAR, DASHBOARD, PLOTS</p> <p>Supabase \u200b\u662f\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u4e91\u200b\u7684\u200b\u5f00\u6e90\u200b\u540e\u200b\u7aef\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b PostgreSQL \u200b\u6570\u636e\u5e93\u200b\u3001\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u548c\u200b\u5176\u4ed6\u200b\u6709\u7528\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b Web \u200b\u548c\u200b\u79fb\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u4ece\u200b Supabase \u200b\u8bfb\u53d6\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b Gradio \u200b\u4eea\u8868\u76d8\u200b\u4e0a\u4ee5\u200b\u5b9e\u65f6\u200b\u65b9\u5f0f\u200b\u7ed8\u5236\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b : \u200b\u8981\u200b\u5f00\u59cb\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u514d\u8d39\u200b\u7684\u200b Supabase \u200b\u8d26\u6237\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6b64\u5904\u200b\u6ce8\u518c\u200b\uff1ahttps://app.supabase.com/</p> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u7aef\u5230\u200b\u7aef\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200b Supabase \u200b\u4e2d\u200b\u521b\u5efa\u200b\u8868\u200b</li> <li>\u200b\u4f7f\u7528\u200b Supabase Python \u200b\u5ba2\u6237\u7aef\u200b\u5411\u200b Supabase \u200b\u5199\u5165\u200b\u6570\u636e\u200b</li> <li>\u200b\u4f7f\u7528\u200b Gradio \u200b\u5728\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8\u200b\u4e2d\u200b\u53ef\u89c6\u5316\u200b\u6570\u636e\u200b</li> </ul> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u5728\u200b Supabase \u200b\u4e0a\u200b\u6709\u200b\u6570\u636e\u200b\u60f3\u8981\u200b\u5728\u200b\u4eea\u8868\u76d8\u200b\u4e2d\u200b\u53ef\u89c6\u5316\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8df3\u8fc7\u200b\u524d\u200b\u4e24\u4e2a\u200b\u90e8\u5206\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5230\u200b\u53ef\u89c6\u5316\u200b\u6570\u636e\u200b\uff01</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#supabase_1","title":"\u5728\u200b Supabase \u200b\u4e2d\u200b\u521b\u5efa\u200b\u8868","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e00\u4e9b\u200b\u8981\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u6839\u636e\u200b\u8fd9\u4e2a\u200b\u51fa\u8272\u200b\u7684\u200b\u6307\u5357\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e9b\u200b\u865a\u5047\u200b\u7684\u200b\u5546\u52a1\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u653e\u5165\u200b Supabase \u200b\u4e2d\u200b\u3002</p> <p>1. \u200b\u5728\u200b Supabase \u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u9879\u76ee\u200b\u3002\u200b\u4e00\u65e6\u200b\u60a8\u200b\u767b\u5f55\u200b\uff0c\u200b\u70b9\u51fb\u200b \"New Project\" \u200b\u6309\u94ae\u200b</p> <p>2. \u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u200b\u547d\u540d\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u6570\u636e\u5e93\u200b\u5bc6\u7801\u200b\u3002\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u5b9a\u4ef7\u200b\u8ba1\u5212\u200b\uff08\u200b\u5bf9\u4e8e\u200b\u6211\u4eec\u200b\u6765\u8bf4\u200b\uff0c\u200b\u514d\u8d39\u200b\u8ba1\u5212\u200b\u5df2\u200b\u8db3\u591f\u200b\uff01\uff09</p> <p>3. \u200b\u5728\u200b\u6570\u636e\u5e93\u200b\u542f\u52a8\u200b\u65f6\u200b\uff08\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u591a\u8fbe\u200b 2 \u200b\u5206\u949f\u200b\uff09\uff0c\u200b\u60a8\u200b\u5c06\u200b\u770b\u5230\u200b\u60a8\u200b\u7684\u200b API \u200b\u5bc6\u94a5\u200b\u3002</p> <p>4. \u200b\u5728\u200b\u5de6\u4fa7\u200b\u7a97\u683c\u200b\u4e2d\u200b\u5355\u51fb\u200b \"Table Editor\"\uff08\u200b\u8868\u200b\u56fe\u6807\u200b\uff09\u200b\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u8868\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b <code>Product</code> \u200b\u7684\u200b\u5355\u8868\u200b\uff0c\u200b\u5177\u6709\u200b\u4ee5\u4e0b\u200b\u6a21\u5f0f\u200b\uff1a</p> <p> product_idint8 inventory_countint8 pricefloat8 product_namevarchar <p></p> <p>5. \u200b\u70b9\u51fb\u200b\u4fdd\u5b58\u200b\u4ee5\u200b\u4fdd\u5b58\u200b\u8868\u200b\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u7684\u200b\u8868\u200b\u5df2\u7ecf\u200b\u51c6\u5907\u200b\u597d\u200b\u4e86\u200b\uff01</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#supabase_2","title":"\u5c06\u200b\u6570\u636e\u200b\u5199\u5165\u200b Supabase","text":"<p>\u200b\u4e0b\u200b\u4e00\u6b65\u200b\u662f\u200b\u5411\u200b Supabase \u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u5199\u5165\u200b\u6570\u636e\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b Supabase Python \u200b\u5e93\u6765\u200b\u5b8c\u6210\u200b\u8fd9\u4e2a\u200b\u4efb\u52a1\u200b\u3002</p> <p>6. \u200b\u901a\u8fc7\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u6765\u200b\u5b89\u88c5\u200b <code>supabase</code> \u200b\u5e93\u200b\uff1a</p> <pre><code>pip install supabase\n</code></pre> <p>7. \u200b\u83b7\u53d6\u200b\u9879\u76ee\u200b URL \u200b\u548c\u200b API \u200b\u5bc6\u94a5\u200b\u3002\u200b\u70b9\u51fb\u200b\u5de6\u4fa7\u200b\u7a97\u683c\u200b\u4e0a\u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff08\u200b\u9f7f\u8f6e\u200b\u56fe\u6807\u200b\uff09\uff0c\u200b\u7136\u540e\u200b\u70b9\u51fb\u200b 'API'\u3002URL \u200b\u5217\u200b\u5728\u200b\u9879\u76ee\u200b URL \u200b\u6846\u4e2d\u200b\uff0cAPI \u200b\u5bc6\u94a5\u200b\u5217\u200b\u5728\u200b\u9879\u76ee\u200b API \u200b\u5bc6\u94a5\u200b\uff08\u200b\u5e26\u6709\u200b <code>service_role</code>\u3001<code>secret</code> \u200b\u6807\u7b7e\u200b\uff09\u200b\u4e2d\u200b</p> <p>8. \u200b\u73b0\u5728\u200b\uff0c\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b Python \u200b\u811a\u672c\u200b\u5c06\u200b\u4e00\u4e9b\u200b\u865a\u5047\u200b\u6570\u636e\u200b\u5199\u5165\u200b\u8868\u4e2d\u200b\uff08\u200b\u6ce8\u610f\u200b\u60a8\u200b\u9700\u8981\u200b\u5728\u200b\u6b65\u9aa4\u200b 7 \u200b\u4e2d\u200b\u653e\u5165\u200b <code>SUPABASE_URL</code> \u200b\u548c\u200b <code>SUPABASE_SECRET_KEY</code> \u200b\u7684\u200b\u503c\u200b\uff09\uff1a</p> <pre><code>import supabase\n\n# \u200b\u521d\u59cb\u5316\u200bSupabase\u200b\u5ba2\u6237\u7aef\u200b\nclient = supabase.create_client('SUPABASE_URL', 'SUPABASE_SECRET_KEY')\n\n# \u200b\u5b9a\u4e49\u200b\u8981\u200b\u5199\u5165\u200b\u7684\u200b\u6570\u636e\u200b\nimport random\n\nmain_list = []\nfor i in range(10):\n    value = {'product_id': i,\n             'product_name': f\"Item {i}\",\n             'inventory_count': random.randint(1, 100),\n             'price': random.random()*100\n            }\n    main_list.append(value)\n\n# \u200b\u5c06\u200b\u6570\u636e\u200b\u5199\u5165\u200b\u8868\u4e2d\u200b\ndata = client.table('Product').insert(main_list).execute()\n</code></pre> <p>\u200b\u8fd4\u56de\u200b Supabase \u200b\u4eea\u8868\u677f\u200b\u5e76\u200b\u5237\u65b0\u200b\u9875\u9762\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u770b\u5230\u200b 10 \u200b\u884c\u200b\u6570\u636e\u200b\u586b\u5145\u200b\u5230\u200b <code>Product</code> \u200b\u8868\u4e2d\u200b\uff01</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#gradio","title":"\u5728\u200b\u5b9e\u65f6\u200b Gradio \u200b\u4eea\u8868\u76d8\u200b\u4e2d\u200b\u53ef\u89c6\u5316\u200b\u6570\u636e","text":"<p>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200b <code>supabase</code> Python \u200b\u5e93\u200b\u4ece\u200b Supabase \u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u8bfb\u53d6\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b <code>gradio</code> \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u6211\u4eec\u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\u91cd\u590d\u200b\u4e86\u200b\u67d0\u4e9b\u200b\u6b65\u9aa4\u200b\uff08\u200b\u6bd4\u5982\u200b\u521b\u5efa\u200b Supabase \u200b\u5ba2\u6237\u7aef\u200b\uff09\uff0c\u200b\u4ee5\u9632\u200b\u60a8\u200b\u6ca1\u6709\u200b\u5b8c\u6210\u200b\u4e4b\u524d\u200b\u7684\u200b\u90e8\u5206\u200b\u3002\u200b\u5982\u200b\u7b2c\u200b 7 \u200b\u6b65\u200b\u6240\u8ff0\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u9700\u8981\u200b\u6570\u636e\u5e93\u200b\u7684\u200b\u9879\u76ee\u200b URL \u200b\u548c\u200b API \u200b\u5bc6\u94a5\u200b\u3002</p> <p>9. \u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ece\u200b <code>Product</code> \u200b\u8868\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4f5c\u4e3a\u200b pandas DataFrame \u200b\u8fd4\u56de\u200b\uff1a</p> <p>import supabase</p> <pre><code>import supabase\nimport pandas as pd\n\nclient = supabase.create_client('SUPABASE_URL', 'SUPABASE_SECRET_KEY')\n\ndef read_data():\n    response = client.table('Product').select(\"*\").execute()\n    df = pd.DataFrame(response.data)\n    return df\n</code></pre> <p>10. \u200b\u4f7f\u7528\u200b\u4e24\u4e2a\u200b\u6761\u5f62\u56fe\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5c0f\u200b\u7684\u200b Gradio \u200b\u4eea\u8868\u76d8\u200b\uff0c\u200b\u6bcf\u5206\u949f\u200b\u7ed8\u5236\u200b\u6240\u6709\u200b\u9879\u76ee\u200b\u7684\u200b\u4ef7\u683c\u200b\u548c\u200b\u5e93\u5b58\u91cf\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u65f6\u200b\u66f4\u65b0\u200b\uff1a</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as dashboard:\n    with gr.Row():\n        gr.BarPlot(read_data, x=\"product_id\", y=\"price\", title=\"\u200b\u4ef7\u683c\u200b\", every=60)\n        gr.BarPlot(read_data, x=\"product_id\", y=\"inventory_count\", title=\"\u200b\u5e93\u5b58\u200b\", every=60)\n\ndashboard.queue().launch()\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5c06\u200b\u51fd\u6570\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>gr.BarPlot()</code>\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7f51\u7edc\u5e94\u7528\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u67e5\u8be2\u6570\u636e\u5e93\u200b\uff08\u200b\u7136\u540e\u200b\u6bcf\u200b 60 \u200b\u79d2\u200b\u67e5\u8be2\u200b\u4e00\u6b21\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6709\u200b <code>every</code> \u200b\u53c2\u6570\u200b\uff09\u3002\u200b\u60a8\u200b\u7684\u200b\u6700\u7ec8\u200b\u4eea\u8868\u76d8\u200b\u5e94\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p></p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-dashboard-from-supabase-data/#_1","title":"\u7ed3\u8bba","text":"<p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u5b66\u4e60\u200b\u4e86\u200b\u5982\u4f55\u200b\u5c06\u200b\u6570\u636e\u200b\u5199\u5165\u200b Supabase \u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u7136\u540e\u200b\u8bfb\u53d6\u200b\u8be5\u200b\u6570\u636e\u200b\u5e76\u200b\u5c06\u200b\u7ed3\u679c\u200b\u7ed8\u5236\u200b\u4e3a\u200b\u6761\u5f62\u56fe\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u66f4\u65b0\u200b Supabase \u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b Gradio \u200b\u4eea\u8868\u76d8\u200b\u5c06\u200b\u5728\u200b\u4e00\u5206\u949f\u200b\u5185\u200b\u66f4\u65b0\u200b\u3002</p> <p>\u200b\u5c1d\u8bd5\u200b\u5728\u200b\u6b64\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u66f4\u200b\u591a\u200b\u7ed8\u56fe\u200b\u548c\u200b\u53ef\u89c6\u5316\u200b\uff08\u200b\u6216\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\uff09\uff0c\u200b\u4ee5\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u4eea\u8868\u76d8\u200b\uff01</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/","title":"\u4ece\u200b Google Sheets \u200b\u521b\u5efa\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8","text":"<p>Tags: TABULAR, DASHBOARD, PLOTS Google Sheets \u200b\u662f\u200b\u4e00\u79cd\u200b\u4ee5\u200b\u7535\u5b50\u8868\u683c\u200b\u5f62\u5f0f\u200b\u5b58\u50a8\u200b\u8868\u683c\u200b\u6570\u636e\u200b\u7684\u200b\u7b80\u4fbf\u200b\u65b9\u6cd5\u200b\u3002\u200b\u501f\u52a9\u200b Gradio \u200b\u548c\u200b pandas\uff0c\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u4ece\u200b\u516c\u5171\u200b\u6216\u200b\u79c1\u6709\u200b Google Sheets \u200b\u8bfb\u53d6\u6570\u636e\u200b\uff0c\u200b\u7136\u540e\u200b\u663e\u793a\u200b\u6570\u636e\u200b\u6216\u200b\u7ed8\u5236\u200b\u6570\u636e\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u535a\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u5c0f\u578b\u200b real-time \u200b\u4eea\u8868\u76d8\u200b\uff0c\u200b\u8be5\u200b\u4eea\u8868\u76d8\u200b\u5728\u200b Google Sheets \u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u66f4\u65b0\u200b\u65f6\u200b\u8fdb\u884c\u200b\u66f4\u65b0\u200b\u3002 \u200b\u6784\u5efa\u200b\u4eea\u8868\u76d8\u200b\u672c\u8eab\u200b\u53ea\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200b 9 \u200b\u884c\u200b Python \u200b\u4ee3\u7801\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u6700\u7ec8\u200b\u4eea\u8868\u76d8\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a </p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1a\u200b\u672c\u200b\u6307\u5357\u200b\u4f7f\u7528\u200bGradio Blocks\uff0c\u200b\u56e0\u6b64\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u719f\u6089\u200b Blocks \u200b\u7c7b\u200b\u3002 \u200b\u5177\u4f53\u6b65\u9aa4\u200b\u7565\u6709\u4e0d\u540c\u200b\uff0c\u200b\u5177\u4f53\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u662f\u200b\u4f7f\u7528\u200b\u516c\u5f00\u200b\u8bbf\u95ee\u200b\u8fd8\u662f\u200b\u79c1\u6709\u200b Google Sheet\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u5206\u522b\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\uff01</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#public-google-sheets","title":"Public Google Sheets","text":"<p>\u200b\u7531\u4e8e\u200b<code>pandas</code> \u200b\u5e93\u200b\u7684\u200b\u5b58\u5728\u200b\uff0c\u200b\u4ece\u200b\u516c\u5171\u200b Google Sheet \u200b\u6784\u5efa\u200b\u4eea\u8868\u76d8\u200b\u975e\u5e38\u7b80\u5355\u200b\uff1a</p> <ol> <li>\u200b\u83b7\u53d6\u200b\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b Google Sheets \u200b\u7684\u200b\u7f51\u5740\u200b\u3002\u200b\u4e3a\u6b64\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u8fdb\u5165\u200b Google Sheets\uff0c\u200b\u5355\u51fb\u200b\u53f3\u4e0a\u89d2\u200b\u7684\u200b\u201c\u200b\u5171\u4eab\u200b\u201d\u200b\u6309\u94ae\u200b\uff0c\u200b\u7136\u540e\u200b\u5355\u51fb\u200b\u201c\u200b\u83b7\u53d6\u200b\u53ef\u200b\u5171\u4eab\u200b\u94fe\u63a5\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u7ed9\u200b\u60a8\u200b\u4e00\u4e2a\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u4ee5\u4e0b\u200b\u793a\u4f8b\u200b\u7684\u200b\u7f51\u5740\u200b\uff1a</li> </ol> <pre><code>https://docs.google.com/spreadsheets/d/1UoKzzRzOCt-FXLLqDKLbryEKEgllGAQUEJ5qtmmQwpU/edit#gid=0\n</code></pre> <ol> <li>\u200b\u73b0\u5728\u200b\uff0c\u200b\u4fee\u6539\u200b\u6b64\u200b\u7f51\u5740\u200b\u5e76\u200b\u4f7f\u7528\u200b\u5b83\u200b\u4ece\u200b Google Sheets \u200b\u8bfb\u53d6\u6570\u636e\u200b\u5230\u200b Pandas DataFrame \u200b\u4e2d\u200b\u3002 (\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u7528\u200b\u60a8\u200b\u7684\u200b\u516c\u5f00\u200b Google Sheet \u200b\u7684\u200b\u7f51\u5740\u200b\u66ff\u6362\u200b <code>URL</code> \u200b\u53d8\u91cf\u200b)\uff1a</li> </ol> <pre><code>import pandas as pd\nURL = \"https://docs.google.com/spreadsheets/d/1UoKzzRzOCt-FXLLqDKLbryEKEgllGAQUEJ5qtmmQwpU/edit#gid=0\"csv_url = URL.replace('/edit#gid=', '/export?format=csv&amp;gid=')\ndef get_data():\n    return pd.read_csv(csv_url)\n</code></pre> <ol> <li>\u200b\u6570\u636e\u200b\u67e5\u8be2\u200b\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gr.DataFrame</code> \u200b\u7ec4\u4ef6\u200b\u5b9e\u65f6\u200b\u663e\u793a\u200b\u6216\u200b\u4f7f\u7528\u200b <code>gr.LinePlot</code> \u200b\u7ec4\u4ef6\u200b\u5b9e\u65f6\u200b\u7ed8\u5236\u200b\u6570\u636e\u200b\uff08\u200b\u5f53\u7136\u200b\uff0c\u200b\u6839\u636e\u200b\u6570\u636e\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ed8\u56fe\u200b\u65b9\u6cd5\u200b\uff09\u3002\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b\u51fd\u6570\u200b\u4f20\u9012\u200b\u7ed9\u200b\u76f8\u5e94\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u7ec4\u4ef6\u200b\u5237\u65b0\u200b\u7684\u200b\u9891\u7387\u200b\uff08\u200b\u4ee5\u200b\u79d2\u200b\u4e3a\u200b\u5355\u4f4d\u200b\uff09\u200b\u8bbe\u7f6e\u200b <code>every</code> \u200b\u53c2\u6570\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b Gradio \u200b\u4ee3\u7801\u200b\uff1a</li> </ol> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \ud83d\udcc8 Real-Time Line Plot\")\n    with gr.Row():\n        with gr.Column():\n            gr.DataFrame(get_data, every=5)\n        with gr.Column():\n            gr.LinePlot(get_data, every=5, x=\"Date\", y=\"Sales\", y_title=\"Sales ($ millions)\", overlay_point=True, width=500, height=500)\n\ndemo.queue().launch()  # Run the demo with queuing enabled\n</code></pre> <p>\u200b\u5230\u6b64\u4e3a\u6b62\u200b\uff01\u200b\u60a8\u200b\u73b0\u5728\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b\u4eea\u8868\u76d8\u200b\uff0c\u200b\u6bcf\u200b 5 \u200b\u79d2\u200b\u5237\u65b0\u200b\u4e00\u6b21\u200b\uff0c\u200b\u4ece\u200b Google Sheets \u200b\u4e2d\u200b\u83b7\u53d6\u6570\u636e\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#google-sheets_1","title":"\u79c1\u6709\u200b Google Sheets","text":"<p>\u200b\u5bf9\u4e8e\u200b\u79c1\u6709\u200b Google Sheets\uff0c\u200b\u6d41\u7a0b\u200b\u9700\u8981\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u5de5\u4f5c\u91cf\u200b\uff0c\u200b\u4f46\u200b\u5e76\u4e0d\u591a\u200b\uff01\u200b\u5173\u952e\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\uff0c\u200b\u73b0\u5728\u200b\u60a8\u200b\u5fc5\u987b\u200b\u7ecf\u8fc7\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\uff0c\u200b\u4ee5\u200b\u6388\u6743\u200b\u8bbf\u95ee\u200b\u79c1\u6709\u200b Google Sheets\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#_1","title":"\u8eab\u4efd\u9a8c\u8bc1","text":"<p>\u200b\u8981\u200b\u8fdb\u884c\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\uff0c\u200b\u9700\u4ece\u200b Google Cloud \u200b\u83b7\u53d6\u200b\u51ed\u636e\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200b Google Cloud \u200b\u51ed\u636e\u200b\uff1a</p> <ol> <li>\u200b\u9996\u5148\u200b\uff0c\u200b\u767b\u5f55\u200b\u60a8\u200b\u7684\u200b Google Cloud \u200b\u5e10\u6237\u200b\u5e76\u200b\u8f6c\u5230\u200b Google Cloud \u200b\u63a7\u5236\u53f0\u200b\uff08https://console.cloud.google.com/\uff09</li> <li>\u200b\u5728\u200b Cloud \u200b\u63a7\u5236\u53f0\u200b\u4e2d\u200b\uff0c\u200b\u5355\u51fb\u200b\u5de6\u4e0a\u89d2\u200b\u7684\u200b\u6c49\u5821\u200b\u83dc\u5355\u200b\uff0c\u200b\u7136\u540e\u200b\u4ece\u200b\u83dc\u5355\u4e2d\u9009\u62e9\u200b\u201cAPI \u200b\u548c\u200b\u670d\u52a1\u200b\u201d\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u6ca1\u6709\u200b\u73b0\u6709\u200b\u9879\u76ee\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u3002</li> <li>\u200b\u7136\u540e\u200b\uff0c\u200b\u70b9\u51fb\u200b\u201c+ \u200b\u542f\u7528\u200b\u7684\u200b API \u200b\u548c\u200b\u670d\u52a1\u200b\u201d\u200b\u6309\u94ae\u200b\uff0c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4e3a\u200b\u9879\u76ee\u200b\u542f\u7528\u200b\u7279\u5b9a\u200b\u7684\u200b\u670d\u52a1\u200b\u3002\u200b\u641c\u7d22\u200b\u201cGoogle Sheets API\u201d\uff0c\u200b\u70b9\u51fb\u200b\u5b83\u200b\uff0c\u200b\u7136\u540e\u200b\u5355\u51fb\u200b\u201c\u200b\u542f\u7528\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u5982\u679c\u200b\u770b\u5230\u200b\u201c\u200b\u7ba1\u7406\u200b\u201d\u200b\u6309\u94ae\u200b\uff0c\u200b\u5219\u200b\u8868\u793a\u200b Google Sheets \u200b\u5df2\u200b\u542f\u7528\u200b\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u5df2\u200b\u51c6\u5907\u5c31\u7eea\u200b\u3002</li> <li>\u200b\u5728\u200b API \u200b\u548c\u200b\u670d\u52a1\u200b\u83dc\u5355\u200b\u4e2d\u200b\uff0c\u200b\u70b9\u51fb\u200b\u201c\u200b\u51ed\u636e\u200b\u201d\u200b\u9009\u9879\u5361\u200b\uff0c\u200b\u7136\u540e\u200b\u70b9\u51fb\u200b\u201c\u200b\u521b\u5efa\u200b\u51ed\u636e\u200b\u201d\u200b\u6309\u94ae\u200b\u3002</li> <li>\u200b\u5728\u200b\u201c\u200b\u521b\u5efa\u200b\u51ed\u636e\u200b\u201d\u200b\u5bf9\u8bdd\u6846\u200b\u4e2d\u200b\uff0c\u200b\u9009\u62e9\u200b\u201c\u200b\u670d\u52a1\u200b\u5e10\u53f7\u200b\u5bc6\u94a5\u200b\u201d\u200b\u4f5c\u4e3a\u200b\u8981\u200b\u521b\u5efa\u200b\u7684\u200b\u51ed\u636e\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u5176\u200b\u547d\u540d\u200b\u3002\u200b\u8bb0\u4e0b\u200b\u670d\u52a1\u200b\u5e10\u53f7\u200b\u7684\u200b\u7535\u5b50\u90ae\u4ef6\u200b\u5730\u5740\u200b</li> <li>\u200b\u5728\u200b\u9009\u62e9\u200b\u670d\u52a1\u200b\u5e10\u53f7\u200b\u4e4b\u540e\u200b\uff0c\u200b\u9009\u62e9\u200b\u201cJSON\u201d\u200b\u5bc6\u94a5\u200b\u7c7b\u578b\u200b\uff0c\u200b\u7136\u540e\u200b\u70b9\u51fb\u200b\u201c\u200b\u521b\u5efa\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u4e0b\u8f7d\u200b\u5305\u542b\u200b\u60a8\u200b\u51ed\u636e\u200b\u7684\u200b JSON \u200b\u5bc6\u94a5\u200b\u6587\u4ef6\u200b\u5230\u200b\u60a8\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\u3002\u200b\u6587\u4ef6\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u4ee5\u4e0b\u200b\u793a\u4f8b\u200b\uff1a</li> </ol> <pre><code>{\n    \"type\": \"service_account\",\n    \"project_id\": \"your project\",\n    \"private_key_id\": \"your private key id\",\n    \"private_key\": \"private key\",\n    \"client_email\": \"email\",\n    \"client_id\": \"client id\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/email_id\"\n}\n</code></pre>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#_2","title":"\u67e5\u8be2","text":"<p>\u200b\u5728\u200b\u83b7\u5f97\u200b\u51ed\u636e\u200b\u7684\u200b <code>.json</code> \u200b\u6587\u4ef6\u200b\u540e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b\u67e5\u8be2\u200b\u60a8\u200b\u7684\u200b Google Sheet\uff1a</p> <ol> <li>\u200b\u5355\u51fb\u200b Google Sheet \u200b\u53f3\u4e0a\u89d2\u200b\u7684\u200b\u201c\u200b\u5171\u4eab\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u4f7f\u7528\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u5b50\u200b\u90e8\u5206\u200b\u7b2c\u200b 5 \u200b\u6b65\u200b\u7684\u200b\u670d\u52a1\u200b\u7684\u200b\u7535\u5b50\u90ae\u4ef6\u200b\u5730\u5740\u200b\u5171\u4eab\u200b Google Sheets\uff08\u200b\u6b64\u200b\u6b65\u9aa4\u200b\u5f88\u200b\u91cd\u8981\u200b\uff01\uff09\u3002\u200b\u7136\u540e\u200b\u5355\u51fb\u200b\u201c\u200b\u83b7\u53d6\u200b\u53ef\u200b\u5171\u4eab\u200b\u94fe\u63a5\u200b\u201d\u200b\u6309\u94ae\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u7ed9\u200b\u60a8\u200b\u4e00\u4e2a\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u4ee5\u4e0b\u200b\u793a\u4f8b\u200b\u7684\u200b\u7f51\u5740\u200b\uff1a</li> </ol> <pre><code>https://docs.google.com/spreadsheets/d/1UoKzzRzOCt-FXLLqDKLbryEKEgllGAQUEJ5qtmmQwpU/edit#gid=0\n</code></pre> <ol> <li>\u200b\u5b89\u88c5\u200b <code>gspread</code> \u200b\u5e93\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5728\u200b\u7ec8\u7aef\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u4f7f\u200b Python \u200b\u4e2d\u200b\u4f7f\u7528\u200b Google Sheets API \u200b\u66f4\u52a0\u200b\u7b80\u5355\u200b\uff1a<code>pip install gspread</code></li> <li>\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u6765\u200b\u4ece\u200b Google Sheet \u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff08\u200b\u7528\u200b\u60a8\u200b\u7684\u200b\u79c1\u6709\u200b Google Sheet \u200b\u7684\u200b URL \u200b\u66ff\u6362\u200b <code>URL</code> \u200b\u53d8\u91cf\u200b\uff09\uff1a</li> </ol> <pre><code>import gspreadimport pandas as pd\n# \u200b\u4e0e\u200b Google \u200b\u8fdb\u884c\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u5e76\u200b\u83b7\u53d6\u200b\u8868\u683c\u200bURL = 'https://docs.google.com/spreadsheets/d/1_91Vps76SKOdDQ8cFxZQdgjTJiz23375sAT7vPvaj4k/edit#gid=0'\ngc = gspread.service_account(\"path/to/key.json\")sh = gc.open_by_url(URL)worksheet = sh.sheet1\ndef get_data():\n    values = worksheet.get_all_values()\n    df = pd.DataFrame(values[1:], columns=values[0])\n    return df\n</code></pre> <p>4. \u200b\u6570\u636e\u200b\u67e5\u8be2\u200b\u662f\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gr.DataFrame</code> \u200b\u7ec4\u4ef6\u200b\u5b9e\u65f6\u200b\u663e\u793a\u200b\u6570\u636e\u200b\uff0c\u200b\u6216\u200b\u4f7f\u7528\u200b <code>gr.LinePlot</code> \u200b\u7ec4\u4ef6\u200b\u5b9e\u65f6\u200b\u7ed8\u5236\u200b\u6570\u636e\u200b\uff08\u200b\u5f53\u7136\u200b\uff0c\u200b\u6839\u636e\u200b\u6570\u636e\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u56fe\u8868\u200b\uff09\u3002\u200b\u8981\u200b\u5b9e\u73b0\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b\u51fd\u6570\u200b\u4f20\u9012\u200b\u7ed9\u200b\u76f8\u5e94\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200b <code>every</code> \u200b\u53c2\u6570\u200b\u6765\u200b\u786e\u5b9a\u200b\u7ec4\u4ef6\u200b\u5237\u65b0\u200b\u7684\u200b\u9891\u7387\u200b\uff08\u200b\u4ee5\u200b\u79d2\u200b\u4e3a\u200b\u5355\u4f4d\u200b\uff09\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b Gradio \u200b\u4ee3\u7801\u200b\uff1a</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \ud83d\udcc8 \u200b\u5b9e\u65f6\u200b\u6298\u7ebf\u56fe\u200b\")\n    with gr.Row():\n        with gr.Column():\n            gr.DataFrame(get_data, every=5)\n        with gr.Column():\n            gr.LinePlot(get_data, every=5, x=\"\u200b\u65e5\u671f\u200b\", y=\"\u200b\u9500\u552e\u989d\u200b\", y_title=\"\u200b\u9500\u552e\u989d\u200b\uff08\u200b\u767e\u4e07\u7f8e\u5143\u200b\uff09\", overlay_point=True, width=500, height=500)\n\ndemo.queue().launch()  # \u200b\u542f\u52a8\u200b\u5e26\u6709\u200b\u6392\u961f\u200b\u529f\u80fd\u200b\u7684\u200b\u6f14\u793a\u200b\n</code></pre> <p>\u200b\u73b0\u5728\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6bcf\u200b 5 \u200b\u79d2\u200b\u5237\u65b0\u200b\u4e00\u6b21\u200b\u7684\u200b\u4eea\u8868\u76d8\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u4f60\u200b\u7684\u200b Google \u200b\u8868\u683c\u200b\u4e2d\u200b\u83b7\u53d6\u6570\u636e\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/creating-a-realtime-dashboard-from-google-sheets/#_3","title":"\u7ed3\u8bba","text":"<p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u53ea\u200b\u9700\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>gradio</code> \u200b\u548c\u200b\u5176\u4ed6\u200b\u5e93\u200b\u4ece\u200b\u516c\u5171\u200b\u6216\u200b\u79c1\u6709\u200b\u7684\u200b Google \u200b\u8868\u683c\u200b\u4e2d\u200b\u8bfb\u53d6\u6570\u636e\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u5b9e\u65f6\u200b\u4eea\u8868\u76d8\u200b\u4e2d\u200b\u663e\u793a\u200b\u548c\u200b\u7ed8\u5236\u200b\u6570\u636e\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200b\u5730\u56fe\u200b\u7ec4\u4ef6\u200b\u7ed8\u5236\u200b\u56fe\u8868","text":"<p>Related spaces: Tags: PLOTS, MAPS</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#_2","title":"\u7b80\u4ecb","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200b <code>Plot</code> \u200b\u7ec4\u4ef6\u200b\u5728\u200b\u5730\u56fe\u200b\u4e0a\u200b\u7ed8\u5236\u200b\u5730\u7406\u200b\u6570\u636e\u200b\u3002Gradio \u200b\u7684\u200b <code>Plot</code> \u200b\u7ec4\u4ef6\u200b\u53ef\u4ee5\u200b\u4e0e\u200b Matplotlib\u3001Bokeh \u200b\u548c\u200b Plotly \u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b Plotly \u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002Plotly \u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u5f00\u53d1\u4eba\u5458\u200b\u8f7b\u677e\u200b\u521b\u5efa\u200b\u5404\u79cd\u200b\u5730\u56fe\u200b\u6765\u200b\u5c55\u793a\u200b\u4ed6\u4eec\u200b\u7684\u200b\u5730\u7406\u200b\u6570\u636e\u200b\u3002\u200b\u70b9\u51fb\u200b\u8fd9\u91cc\u200b\u67e5\u770b\u200b\u4e00\u4e9b\u200b\u793a\u4f8b\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#_3","title":"\u6982\u8ff0","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u7ebd\u7ea6\u5e02\u200b\u7684\u200b Airbnb \u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u8be5\u200b\u6570\u636e\u200b\u96c6\u200b\u6258\u7ba1\u200b\u5728\u200b kaggle \u200b\u4e0a\u200b\uff0c\u200b\u70b9\u51fb\u200b\u8fd9\u91cc\u200b\u3002\u200b\u6211\u200b\u5df2\u7ecf\u200b\u5c06\u200b\u5176\u200b\u4e0a\u200b\u4f20\u5230\u200b Hugging Face Hub \u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u65b9\u4fbf\u4f7f\u7528\u200b\u548c\u200b\u4e0b\u8f7d\u200b\uff0c\u200b\u70b9\u51fb\u200b\u8fd9\u91cc\u200b\u3002\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u6570\u636e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u5730\u56fe\u200b\u4e0a\u200b\u7ed8\u5236\u200b Airbnb \u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u5e76\u200b\u5141\u8bb8\u200b\u57fa\u4e8e\u200b\u4ef7\u683c\u200b\u548c\u200b\u4f4d\u7f6e\u200b\u8fdb\u884c\u200b\u7b5b\u9009\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u6211\u4eec\u200b\u5c06\u8981\u200b\u6784\u5efa\u200b\u7684\u200b\u6f14\u793a\u200b\u3002 \u26a1\ufe0f</p> <p>$demo_map_airbnb</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#1-csv","title":"\u6b65\u9aa4\u200b 1-\u200b\u52a0\u8f7d\u200b CSV \u200b\u6570\u636e\u200b \ud83d\udcbe","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u4ece\u200b Hugging Face Hub \u200b\u52a0\u8f7d\u200b\u7ebd\u7ea6\u5e02\u200b\u7684\u200b Airbnb \u200b\u6570\u636e\u200b\u3002</p> <pre><code>from datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &amp;\n            (df['price'] &gt; min_price) &amp; (df['price'] &lt; max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5148\u200b\u5c06\u200b CSV \u200b\u6570\u636e\u200b\u52a0\u8f7d\u200b\u5230\u200b\u4e00\u4e2a\u200b pandas dataframe \u200b\u4e2d\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u4f5c\u4e3a\u200b gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u3002\u200b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u200b\u63a5\u53d7\u200b\u6700\u4f4e\u200b\u4ef7\u683c\u200b\u3001\u200b\u6700\u9ad8\u200b\u4ef7\u683c\u200b\u8303\u56f4\u200b\u548c\u200b\u7b5b\u9009\u200b\u7ed3\u679c\u200b\u5730\u533a\u200b\u7684\u200b\u5217\u8868\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4f20\u5165\u200b\u7684\u200b\u503c\u200b (<code>min_price</code>\u3001<code>max_price</code> \u200b\u548c\u200b\u5730\u533a\u200b\u5217\u8868\u200b) \u200b\u6765\u200b\u7b5b\u9009\u200b\u6570\u636e\u200b\u6846\u200b\u5e76\u200b\u521b\u5efa\u200b <code>new_df</code>\u3002\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u5305\u542b\u200b\u6bcf\u4e2a\u200b Airbnb \u200b\u7684\u200b\u540d\u79f0\u200b\u548c\u200b\u4ef7\u683c\u200b\u7684\u200b <code>text_list</code>\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u5730\u56fe\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u4f5c\u4e3a\u200b\u6807\u7b7e\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#2-","title":"\u6b65\u9aa4\u200b 2-\u200b\u5730\u56fe\u200b\u56fe\u8868\u200b \ud83c\udf10","text":"<p>Plotly \u200b\u4f7f\u5f97\u200b\u5904\u7406\u200b\u5730\u56fe\u200b\u53d8\u5f97\u200b\u5f88\u200b\u5bb9\u6613\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u200b\u4e00\u4e0b\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u5730\u56fe\u200b\u56fe\u8868\u200b\u3002</p> <pre><code>import plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='&lt;b&gt;Name&lt;/b&gt;: %{customdata[0]}&lt;br&gt;&lt;b&gt;Price&lt;/b&gt;: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n</code></pre> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b\u7ecf\u7eac\u5ea6\u200b\u5217\u8868\u200b\u6765\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6563\u70b9\u56fe\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u4f20\u5165\u200b\u4e86\u200b\u540d\u79f0\u200b\u548c\u200b\u4ef7\u683c\u200b\u7684\u200b\u81ea\u200b\u5b9a\u4e49\u6570\u636e\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u9f20\u6807\u60ac\u505c\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u6807\u8bb0\u200b\u4e0a\u65f6\u200b\u663e\u793a\u200b\u989d\u5916\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>update_layout</code> \u200b\u6765\u200b\u6307\u5b9a\u200b\u5176\u4ed6\u200b\u5730\u56fe\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u7f29\u653e\u200b\u548c\u200b\u5c45\u4e2d\u200b\u3002</p> <p>\u200b\u6709\u5173\u200b\u4f7f\u7528\u200b Mapbox \u200b\u548c\u200b Plotly \u200b\u521b\u5efa\u200b\u6563\u70b9\u56fe\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u70b9\u51fb\u200b\u8fd9\u91cc\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#3-gradio","title":"\u6b65\u9aa4\u200b 3-Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b \u26a1\ufe0f","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e24\u4e2a\u200b <code>gr.Number</code> \u200b\u7ec4\u4ef6\u200b\u548c\u200b\u4e00\u4e2a\u200b <code>gr.CheckboxGroup</code> \u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u6307\u5b9a\u200b\u4ef7\u683c\u200b\u8303\u56f4\u200b\u548c\u200b\u5730\u533a\u200b\u4f4d\u7f6e\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>gr.Plot</code> \u200b\u7ec4\u4ef6\u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u521b\u5efa\u200b\u7684\u200b Plotly + Mapbox \u200b\u5730\u56fe\u200b\u7684\u200b\u8f93\u51fa\u200b\u3002</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>gr.Column</code> \u200b\u548c\u200b <code>gr.Row</code> \u200b\u5e03\u5c40\u200b\u8fd9\u4e9b\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u6f14\u793a\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u548c\u200b\u70b9\u51fb\u200b \" \u200b\u66f4\u65b0\u200b\u7b5b\u9009\u200b \" \u200b\u6309\u94ae\u200b\u65f6\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u4e8b\u4ef6\u200b\u89e6\u53d1\u5668\u200b\uff0c\u200b\u4ee5\u200b\u89e6\u53d1\u200b\u5730\u56fe\u66f4\u65b0\u200b\u65b0\u200b\u7684\u200b\u7b5b\u9009\u200b\u6761\u4ef6\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5b8c\u6574\u200b\u6f14\u793a\u200b\u4ee3\u7801\u200b\uff1a</p> <p>$code_map_airbnb</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#4-deployment","title":"\u6b65\u9aa4\u200b 4-\u200b\u90e8\u7f72\u200b Deployment \ud83e\udd17","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u8fd0\u884c\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5c06\u200b\u5728\u200b\u672c\u5730\u200b\u8fd0\u884c\u200b\u3002 \u200b\u5982\u679c\u200b\u8981\u200b\u83b7\u53d6\u200b\u4e34\u65f6\u200b\u5171\u4eab\u200b\u94fe\u63a5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b <code>share=True</code> \u200b\u53c2\u6570\u4f20\u9012\u200b\u7ed9\u200b <code>launch</code>\u3002</p> <p>\u200b\u4f46\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u8981\u200b\u4e00\u4e2a\u200b\u6c38\u4e45\u200b\u7684\u200b\u90e8\u7f72\u200b\u89e3\u51b3\u65b9\u6848\u200b\u5462\u200b\uff1f \u200b\u8ba9\u200b\u6211\u4eec\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u90e8\u7f72\u200b\u5230\u200b\u514d\u8d39\u200b\u7684\u200b HuggingFace Spaces \u200b\u5e73\u53f0\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4ee5\u524d\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u8fc7\u200b Spaces\uff0c\u200b\u8bf7\u200b\u6309\u7167\u200b\u4e4b\u524d\u200b\u7684\u200b\u6307\u5357\u200b\u8fd9\u91cc\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/plot-component-for-maps/#_4","title":"\u7ed3\u8bba\u200b \ud83c\udf89","text":"<p>\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u5b8c\u6210\u200b\u4e86\u200b\uff01\u200b\u8fd9\u662f\u200b\u6784\u5efa\u200b\u5730\u56fe\u200b\u6f14\u793a\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u4ee3\u7801\u200b\u3002</p> <p>\u200b\u94fe\u63a5\u200b\u5230\u200b\u6f14\u793a\u200b\uff1a\u200b\u5730\u56fe\u200b\u6f14\u793a\u200b\u548c\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\uff08\u200b\u5728\u200b Hugging Face Spaces\uff09</p>"},{"location":"cn/05_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/","title":"Using gradio for tabular workflows","text":""},{"location":"cn/05_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#gradio","title":"\u4f7f\u7528\u200b Gradio \u200b\u8fdb\u884c\u200b\u8868\u683c\u200b\u6570\u636e\u200b\u79d1\u5b66\u200b\u5de5\u4f5c\u200b\u6d41","text":"<p>Related spaces: https://huggingface.co/spaces/scikit-learn/gradio-skops-integration\uff0chttps://huggingface.co/spaces/scikit-learn/tabular-playground\uff0chttps://huggingface.co/spaces/merve/gradio-analysis-dashboard</p>"},{"location":"cn/05_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u8868\u683c\u200b\u6570\u636e\u200b\u79d1\u5b66\u200b\u662f\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u4e2d\u200b\u5e94\u7528\u200b\u6700\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u9886\u57df\u200b\uff0c\u200b\u6d89\u53ca\u200b\u7684\u200b\u95ee\u9898\u200b\u4ece\u200b\u5ba2\u6237\u200b\u5206\u5272\u200b\u5230\u200b\u6d41\u5931\u200b\u9884\u6d4b\u200b\u4e0d\u200b\u7b49\u200b\u3002\u200b\u5728\u200b\u8868\u683c\u200b\u6570\u636e\u200b\u79d1\u5b66\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u7684\u200b\u5404\u4e2a\u200b\u9636\u6bb5\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b\u5de5\u4f5c\u200b\u5185\u5bb9\u200b\u4f20\u8fbe\u200b\u7ed9\u200b\u5229\u76ca\u200b\u76f8\u5173\u8005\u200b\u6216\u200b\u5ba2\u6237\u200b\u53ef\u80fd\u200b\u5f88\u200b\u9ebb\u70e6\u200b\uff0c\u200b\u8fd9\u4f1a\u200b\u963b\u788d\u200b\u6570\u636e\u200b\u79d1\u5b66\u5bb6\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u91cd\u8981\u200b\u4e8b\u9879\u200b\uff0c\u200b\u5982\u200b\u6570\u636e\u5206\u6790\u200b\u548c\u200b\u6a21\u578b\u200b\u6784\u5efa\u200b\u3002\u200b\u6570\u636e\u200b\u79d1\u5b66\u5bb6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u82b1\u8d39\u200b\u6570\u200b\u5c0f\u65f6\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u63a5\u53d7\u200b DataFrame \u200b\u5e76\u200b\u8fd4\u56de\u200b\u56fe\u8868\u200b\u3001\u200b\u9884\u6d4b\u200b\u6216\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u7684\u200b\u805a\u7c7b\u200b\u56fe\u200b\u7684\u200b\u4eea\u8868\u677f\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>gradio</code> \u200b\u6539\u8fdb\u200b\u60a8\u200b\u7684\u200b\u6570\u636e\u200b\u79d1\u5b66\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u8ba8\u8bba\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>gradio</code> \u200b\u548c\u200bskops\u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u5373\u53ef\u200b\u6784\u5efa\u200b\u754c\u9762\u200b\uff01</p>"},{"location":"cn/05_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u8f6f\u4ef6\u5305\u200b\u3002</p>"},{"location":"cn/05_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#_3","title":"\u8ba9\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u754c\u9762\u200b\uff01","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u770b\u200b\u4e00\u4e0b\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u754c\u9762\u200b\uff0c\u200b\u8be5\u200b\u754c\u9762\u200b\u6839\u636e\u200b\u4ea7\u54c1\u200b\u4fe1\u606f\u200b\u9884\u6d4b\u200b\u6545\u969c\u200b\u3002</p> <pre><code>import gradio as gr\nimport pandas as pd\nimport joblib\nimport datasets\n\n\ninputs = [gr.Dataframe(row_count = (2, \"dynamic\"), col_count=(4,\"dynamic\"), label=\"Input Data\", interactive=1)]\n\noutputs = [gr.Dataframe(row_count = (2, \"dynamic\"), col_count=(1, \"fixed\"), label=\"Predictions\", headers=[\"Failures\"])]\n\nmodel = joblib.load(\"model.pkl\")\n\n# we will give our dataframe as example\ndf = datasets.load_dataset(\"merve/supersoaker-failures\")\ndf = df[\"train\"].to_pandas()\n\ndef infer(input_dataframe):\n  return pd.DataFrame(model.predict(input_dataframe))\n\ngr.Interface(fn = infer, inputs = inputs, outputs = outputs, examples = [[df.head(2)]]).launch()\n</code></pre> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u89e3\u6790\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\u3002</p> <ul> <li><code>fn</code>\uff1a\u200b\u63a8\u7406\u200b\u51fd\u6570\u200b\uff0c\u200b\u63a5\u53d7\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u5e27\u200b\u5e76\u200b\u8fd4\u56de\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u3002</li> <li><code>inputs</code>\uff1a\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>Dataframe</code> \u200b\u7ec4\u4ef6\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u8f93\u5165\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u5177\u6709\u200b 2 \u200b\u884c\u200b 4 \u200b\u5217\u200b\u7684\u200b\u6570\u636e\u200b\u5e27\u200b\uff0c\u200b\u6700\u521d\u200b\u7684\u200b\u6570\u636e\u200b\u5e27\u200b\u5c06\u200b\u5448\u73b0\u51fa\u200b\u4e0a\u8ff0\u200b\u5f62\u72b6\u200b\u7684\u200b\u7a7a\u200b\u6570\u636e\u200b\u5e27\u200b\u3002\u200b\u5f53\u200b\u5c06\u200b <code>row_count</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>dynamic</code> \u200b\u65f6\u200b\uff0c\u200b\u4e0d\u5fc5\u200b\u4f9d\u8d56\u4e8e\u200b\u6b63\u5728\u200b\u8f93\u5165\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7ec4\u4ef6\u200b\u3002</li> <li><code>outputs</code>\uff1a\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u8f93\u51fa\u200b\u7684\u200b\u6570\u636e\u200b\u5e27\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8be5\u200b\u754c\u9762\u200b\u53ef\u4ee5\u200b\u63a5\u53d7\u200b\u5355\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u6837\u672c\u200b\u8fdb\u884c\u200b\u63a8\u65ad\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u4e00\u5217\u200b\u4e2d\u4e3a\u200b\u6bcf\u4e2a\u200b\u6837\u672c\u200b\u8fd4\u56de\u200b 0 \u200b\u6216\u200b 1\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u5c06\u200b <code>row_count</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b 2\uff0c<code>col_count</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b 1\u3002<code>headers</code> \u200b\u662f\u200b\u7531\u200b\u6570\u636e\u200b\u5e27\u200b\u7684\u200b\u5217\u540d\u200b\u7ec4\u6210\u200b\u7684\u200b\u5217\u8868\u200b\u3002</li> <li><code>examples</code>\uff1a\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u62d6\u653e\u200b CSV \u200b\u6587\u4ef6\u200b\u6216\u200b\u901a\u8fc7\u200b\u793a\u4f8b\u200b\u4f20\u9012\u200b pandas DataFrame\uff0c\u200b\u754c\u9762\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u83b7\u53d6\u200b\u5176\u200b\u6807\u9898\u200b\u3002</li> </ul> <p>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5c06\u200b\u4e3a\u200b\u7b80\u5316\u7248\u200b\u6570\u636e\u200b\u53ef\u89c6\u5316\u200b\u4eea\u8868\u677f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u627e\u5230\u200b\u66f4\u200b\u5168\u9762\u200b\u7684\u200b\u7248\u672c\u200b\u3002</p> <p></p> <pre><code>import gradio as gr\nimport pandas as pd\nimport datasets\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = datasets.load_dataset(\"merve/supersoaker-failures\")\ndf = df[\"train\"].to_pandas()\ndf.dropna(axis=0, inplace=True)\n\ndef plot(df):\n  plt.scatter(df.measurement_13, df.measurement_15, c = df.loading,alpha=0.5)\n  plt.savefig(\"scatter.png\")\n  df['failure'].value_counts().plot(kind='bar')\n  plt.savefig(\"bar.png\")\n  sns.heatmap(df.select_dtypes(include=\"number\").corr())\n  plt.savefig(\"corr.png\")\n  plots = [\"corr.png\",\"scatter.png\", \"bar.png\"]\n  return plots\n\ninputs = [gr.Dataframe(label=\"Supersoaker Production Data\")]\noutputs = [gr.Gallery(label=\"Profiling Dashboard\", columns=(1,3))]\n\ngr.Interface(plot, inputs=inputs, outputs=outputs, examples=[df.head(100)], title=\"Supersoaker Failures Analysis Dashboard\").launch()\n</code></pre> <p></p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e0e\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u76f8\u540c\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u6b21\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u53ef\u89c6\u5316\u200b\u4eea\u8868\u677f\u200b\u4ee5\u200b\u5c55\u793a\u200b\u5b83\u200b\u3002</p> <ul> <li><code>fn</code>\uff1a\u200b\u6839\u636e\u200b\u6570\u636e\u200b\u521b\u5efa\u200b\u56fe\u8868\u200b\u7684\u200b\u51fd\u6570\u200b\u3002</li> <li><code>inputs</code>\uff1a\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e0e\u200b\u4e0a\u8ff0\u200b\u76f8\u540c\u200b\u7684\u200b <code>Dataframe</code> \u200b\u7ec4\u4ef6\u200b\u3002</li> <li><code>outputs</code>\uff1a\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b <code>Gallery</code> \u200b\u7ec4\u4ef6\u200b\u6765\u200b\u5b58\u653e\u200b\u6211\u4eec\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u7ed3\u679c\u200b\u3002</li> <li><code>examples</code>\uff1a\u200b\u6211\u4eec\u200b\u5c06\u200b\u6570\u636e\u200b\u96c6\u200b\u672c\u8eab\u200b\u4f5c\u4e3a\u200b\u793a\u4f8b\u200b\u3002</li> </ul>"},{"location":"cn/05_tabular-data-science-and-plots/using-gradio-for-tabular-workflows/#skops","title":"\u4f7f\u7528\u200b skops \u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u8f7b\u677e\u200b\u52a0\u8f7d\u200b\u8868\u683c\u200b\u6570\u636e\u200b\u754c\u9762","text":"<p><code>skops</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u6784\u5efa\u200b\u5728\u200b <code>huggingface_hub</code> \u200b\u548c\u200b <code>sklearn</code> \u200b\u4e4b\u4e0a\u200b\u7684\u200b\u5e93\u200b\u3002\u200b\u901a\u8fc7\u200b\u6700\u65b0\u200b\u7684\u200b <code>gradio</code> \u200b\u96c6\u6210\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u6784\u5efa\u200b\u8868\u683c\u200b\u6570\u636e\u200b\u754c\u9762\u200b\uff01</p> <pre><code>import gradio as gr\n\n# \u200b\u6807\u9898\u200b\u548c\u200b\u63cf\u8ff0\u200b\u662f\u200b\u53ef\u9009\u200b\u7684\u200b\ntitle = \"Supersoaker\u200b\u4ea7\u54c1\u200b\u7f3a\u9677\u200b\u9884\u6d4b\u200b\"\ndescription = \"\u200b\u8be5\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200bSupersoaker\u200b\u751f\u4ea7\u7ebf\u200b\u6545\u969c\u200b\u3002\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u6570\u636e\u200b\u5e27\u200b\u7ec4\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u62d6\u653e\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u4efb\u610f\u200b\u5207\u7247\u200b\u6216\u200b\u81ea\u884c\u200b\u7f16\u8f91\u200b\u503c\u200b\u3002\"\n\ngr.Interface.load(\"huggingface/scikit-learn/tabular-playground\", title=title, description=description).launch()\n</code></pre> <p></p> <p>\u200b\u4f7f\u7528\u200b <code>skops</code> \u200b\u5c06\u200b <code>sklearn</code> \u200b\u6a21\u578b\u200b\u63a8\u9001\u200b\u5230\u200b Hugging Face Hub \u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u793a\u4f8b\u200b\u8f93\u5165\u200b\u548c\u200b\u5217\u540d\u200b\u7684\u200b <code>config.json</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u89e3\u51b3\u200b\u7684\u200b\u4efb\u52a1\u200b\u7c7b\u578b\u200b\u662f\u200b <code>tabular-classification</code> \u200b\u6216\u200b <code>tabular-regression</code>\u3002\u200b\u6839\u636e\u200b\u4efb\u52a1\u200b\u7c7b\u578b\u200b\uff0c<code>gradio</code> \u200b\u6784\u5efa\u200b\u754c\u9762\u200b\u5e76\u200b\u4f7f\u7528\u200b\u5217\u540d\u200b\u548c\u200b\u793a\u4f8b\u200b\u8f93\u5165\u200b\u6765\u200b\u6784\u5efa\u200b\u5b83\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b skops \u200b\u5728\u200b Hub \u200b\u4e0a\u200b\u6258\u7ba1\u200b\u6a21\u578b\u200b\u7684\u200b\u6587\u6863\u200b\u6765\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>skops</code> \u200b\u5c06\u200b\u6a21\u578b\u200b\u63a8\u9001\u200b\u5230\u200b Hub\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/","title":"\u4f7f\u7528\u200b Gradio Python \u200b\u5ba2\u6237\u7aef\u200b\u5165\u95e8","text":"<p>Tags: CLIENT, API, SPACES</p> <p>Gradio Python \u200b\u5ba2\u6237\u7aef\u200b\u4f7f\u5f97\u200b\u5c06\u200b\u4efb\u4f55\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4f5c\u4e3a\u200b API \u200b\u4f7f\u7528\u200b\u53d8\u5f97\u200b\u975e\u5e38\u5bb9\u6613\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8003\u8651\u4e00\u4e0b\u200b\u4ece\u200b\u9ea6\u514b\u98ce\u200b\u5f55\u5236\u200b\u7684\u200bWhisper \u200b\u97f3\u9891\u6587\u4ef6\u200b\u7684\u200b\u8f6c\u5f55\u200b\u3002</p> <p></p> <p>\u200b\u4f7f\u7528\u200b <code>gradio_client</code> \u200b\u5e93\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u5c06\u200b Gradio \u200b\u7528\u4f5c\u200b API\uff0c\u200b\u4ee5\u200b\u7f16\u7a0b\u200b\u65b9\u5f0f\u200b\u8f6c\u5f55\u200b\u97f3\u9891\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u5b8c\u6210\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u7684\u200b\u6574\u4e2a\u200b\u4ee3\u7801\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/whisper\")\nclient.predict(\"audio_sample.wav\")\n\n&gt;&gt; \"\u200b\u8fd9\u662f\u200bWhisper\u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u3002\"\n</code></pre> <p>Gradio \u200b\u5ba2\u6237\u7aef\u200b\u9002\u7528\u200b\u4e8e\u200b\u4efb\u4f55\u200b\u6258\u7ba1\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u65e0\u8bba\u662f\u200b\u56fe\u50cf\u200b\u751f\u6210\u5668\u200b\u3001\u200b\u6587\u672c\u200b\u6458\u8981\u200b\u751f\u6210\u5668\u200b\u3001\u200b\u6709\u200b\u72b6\u6001\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u3001\u200b\u7a0e\u91d1\u200b\u8ba1\u7b97\u5668\u200b\u8fd8\u662f\u200b\u5176\u4ed6\u200b\u4efb\u4f55\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff01Gradio \u200b\u5ba2\u6237\u7aef\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Spaces\u200b\u4e0a\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u4f46\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u6258\u7ba1\u200b\u5728\u200b\u4efb\u4f55\u200b\u5730\u65b9\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4f60\u200b\u81ea\u5df1\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u3002</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1a\u200b\u8981\u200b\u4f7f\u7528\u200b Gradio \u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u4f60\u200b\u4e0d\u200b\u9700\u8981\u200b\u8be6\u7ec6\u200b\u4e86\u89e3\u200b <code>gradio</code> \u200b\u5e93\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4e86\u89e3\u200b Gradio \u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6982\u5ff5\u200b\u4f1a\u200b\u6709\u6240\u200b\u5e2e\u52a9\u200b\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#_1","title":"\u5b89\u88c5","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200b <code>gradio</code>\uff0c\u200b\u90a3\u4e48\u200b <code>gradio_client</code> \u200b\u5c31\u200b\u4f5c\u4e3a\u200b\u4f9d\u8d56\u200b\u9879\u200b\u5305\u542b\u200b\u5728\u200b\u5176\u4e2d\u200b\u3002</p> <p>\u200b\u5426\u5219\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b pip\uff08\u200b\u6216\u200b pip3\uff09\u200b\u5b89\u88c5\u200b\u8f7b\u91cf\u7ea7\u200b\u7684\u200b <code>gradio_client</code> \u200b\u5305\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5df2\u7ecf\u200b\u6d4b\u8bd5\u200b\u53ef\u4ee5\u200b\u5728\u200b Python 3.9 \u200b\u6216\u200b\u66f4\u200b\u9ad8\u200b\u7248\u672c\u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff1a</p> <pre><code>$ pip install gradio_client\n</code></pre>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#gradio","title":"\u8fde\u63a5\u200b\u5230\u200b\u8fd0\u884c\u200b\u4e2d\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f","text":"<p>\u200b\u9996\u5148\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b <code>Client</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u8fde\u63a5\u200b\u5230\u200b\u8fd0\u884c\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u6216\u200b\u5176\u4ed6\u200b\u4efb\u4f55\u200b\u5730\u65b9\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#hugging-face","title":"\u8fde\u63a5\u200b\u5230\u200b Hugging Face \u200b\u7a7a\u95f4","text":"<pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/en2fr\")  # \u200b\u4e00\u4e2a\u200b\u5c06\u200b\u82f1\u6587\u7ffb\u8bd1\u200b\u4e3a\u200b\u6cd5\u6587\u200b\u7684\u200bSpace\n</code></pre> <p>\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b <code>hf_token</code> \u200b\u53c2\u6570\u200b\u4e2d\u200b\u4f20\u9012\u200b\u4f60\u200b\u7684\u200b HF \u200b\u4ee4\u724c\u200b\u6765\u200b\u8fde\u63a5\u200b\u5230\u200b\u79c1\u6709\u200b\u7a7a\u95f4\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u91cc\u200b\u83b7\u53d6\u200b\u4f60\u200b\u7684\u200b HF \u200b\u4ee4\u724c\u200b\uff1ahttps://huggingface.co/settings/tokens</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/my-private-space\", hf_token=\"...\")\n</code></pre>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#_2","title":"\u590d\u5236\u200b\u7a7a\u95f4\u200b\u4ee5\u4f9b\u200b\u79c1\u4eba\u200b\u4f7f\u7528","text":"<p>\u200b\u867d\u7136\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u4f55\u200b\u516c\u5171\u200b\u7a7a\u95f4\u200b\u7528\u4f5c\u200b API\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u4f60\u200b\u53d1\u51fa\u200b\u592a\u200b\u591a\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4f60\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d7\u5230\u200b Hugging Face \u200b\u7684\u200b\u9891\u7387\u200b\u9650\u5236\u200b\u3002\u200b\u8981\u200b\u65e0\u200b\u9650\u5236\u200b\u5730\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b\u5176\u200b\u590d\u5236\u200b\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u79c1\u6709\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u7136\u540e\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u591a\u4e2a\u200b\u8bf7\u6c42\u200b\uff01</p> <p><code>gradio_client</code> \u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u65b9\u6cd5\u200b\uff1a<code>Client.duplicate()</code>\uff0c\u200b\u4f7f\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u53d8\u5f97\u200b\u7b80\u5355\u200b\uff08\u200b\u4f60\u200b\u9700\u8981\u200b\u4f20\u9012\u200b\u4f60\u200b\u7684\u200bHugging Face \u200b\u4ee4\u724c\u200b\u6216\u200b\u4f7f\u7528\u200b Hugging Face CLI \u200b\u767b\u5f55\u200b\uff09\uff1a</p> <pre><code>import os\nfrom gradio_client import Client\n\nHF_TOKEN = os.environ.get(\"HF_TOKEN\")\n\nclient = Client.duplicate(\"abidlabs/whisper\", hf_token=HF_TOKEN)\nclient.predict(\"audio_sample.wav\")\n\n&gt;&gt; \"This is a test of the whisper speech recognition model.\"\n</code></pre> <p>\" \u200b\u8fd9\u662f\u200b Whisper \u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u3002\"</p> <p>\u200b\u5982\u679c\u200b\u4e4b\u524d\u200b\u5df2\u200b\u590d\u5236\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b <code>duplicate()</code> \u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7a7a\u95f4\u200b\u3002\u200b\u76f8\u53cd\u200b\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u5c06\u200b\u8fde\u63a5\u200b\u5230\u200b\u4e4b\u524d\u200b\u521b\u5efa\u200b\u7684\u200b\u7a7a\u95f4\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u591a\u6b21\u200b\u8fd0\u884c\u200b <code>Client.duplicate()</code> \u200b\u65b9\u6cd5\u200b\u662f\u200b\u5b89\u5168\u200b\u7684\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a \u200b\u5982\u679c\u200b\u539f\u59cb\u200b\u7a7a\u95f4\u200b\u4f7f\u7528\u200b\u4e86\u200b GPU\uff0c\u200b\u4f60\u200b\u7684\u200b\u79c1\u6709\u200b\u7a7a\u95f4\u200b\u4e5f\u200b\u5c06\u200b\u4f7f\u7528\u200b GPU\uff0c\u200b\u5e76\u4e14\u200b\u4f60\u200b\u7684\u200b Hugging Face \u200b\u8d26\u6237\u200b\u5c06\u200b\u6839\u636e\u200b GPU \u200b\u7684\u200b\u4ef7\u683c\u200b\u8ba1\u8d39\u200b\u3002\u200b\u4e3a\u4e86\u200b\u964d\u4f4e\u200b\u8d39\u7528\u200b\uff0c\u200b\u5728\u200b 1 \u200b\u5c0f\u65f6\u200b\u6ca1\u6709\u200b\u6d3b\u52a8\u200b\u540e\u200b\uff0c\u200b\u4f60\u200b\u7684\u200b\u7a7a\u95f4\u200b\u5c06\u200b\u81ea\u52a8\u200b\u4f11\u7720\u200b\u3002\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>duplicate()</code> \u200b\u7684\u200b <code>hardware</code> \u200b\u53c2\u6570\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u786c\u4ef6\u200b\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#gradio_1","title":"\u8fde\u63a5\u200b\u5230\u200b\u901a\u7528\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u5728\u200b\u5176\u4ed6\u200b\u5730\u65b9\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u63d0\u4f9b\u200b\u5b8c\u6574\u200b\u7684\u200b URL\uff0c\u200b\u5305\u62ec\u200b \"http://\" \u200b\u6216\u200b \"https://\"\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5728\u200b\u5171\u4eab\u200b URL \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"https://bec81a83-5b5c-471e.gradio.live\")\n</code></pre>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#api","title":"\u68c0\u67e5\u200b API \u200b\u7aef\u70b9","text":"<p>\u200b\u4e00\u65e6\u200b\u8fde\u63a5\u200b\u5230\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b <code>Client.view_api()</code> \u200b\u65b9\u6cd5\u200b\u67e5\u770b\u200b\u53ef\u7528\u200b\u7684\u200b API \u200b\u7aef\u70b9\u200b\u3002\u200b\u5bf9\u4e8e\u200b Whisper \u200b\u7a7a\u95f4\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u4ee5\u4e0b\u200b\u4fe1\u606f\u200b\uff1a</p> <pre><code>Client.predict() Usage Info\n---------------------------\nNamed API endpoints: 1\n\n - predict(input_audio, api_name=\"/predict\") -&gt; value_0\n    Parameters:\n     - [Audio] input_audio: str (filepath or URL)\n    Returns:\n     - [Textbox] value_0: str (value)\n</code></pre> <p>\u200b\u8fd9\u200b\u663e\u793a\u200b\u4e86\u200b\u5728\u200b\u6b64\u200b\u7a7a\u95f4\u200b\u4e2d\u6709\u200b 1 \u200b\u4e2a\u200b API \u200b\u7aef\u70b9\u200b\uff0c\u200b\u5e76\u200b\u663e\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b API \u200b\u7aef\u70b9\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\uff1a\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u8c03\u7528\u200b <code>.predict()</code> \u200b\u65b9\u6cd5\u200b\uff08\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u4e0b\u9762\u200b\u63a2\u8ba8\u200b\uff09\uff0c\u200b\u63d0\u4f9b\u200b\u7c7b\u578b\u200b\u4e3a\u200b <code>str</code> \u200b\u7684\u200b\u53c2\u6570\u200b <code>input_audio</code>\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b<code>\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u6216\u200b URL</code>\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u63d0\u4f9b\u200b <code>api_name='/predict'</code> \u200b\u53c2\u6570\u200b\u7ed9\u200b <code>predict()</code> \u200b\u65b9\u6cd5\u200b\u3002\u200b\u867d\u7136\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u547d\u540d\u200b\u7684\u200b\u7aef\u70b9\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u662f\u200b\u5fc5\u9700\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u5728\u200b\u5355\u4e2a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u8c03\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u7aef\u70b9\u200b\uff08\u200b\u5982\u679c\u200b\u5b83\u4eec\u200b\u53ef\u7528\u200b\uff09\u3002\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6709\u200b\u65e0\u540d\u200b\u7684\u200b API \u200b\u7aef\u70b9\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd0\u884c\u200b <code>.view_api(all_endpoints=True)</code> \u200b\u6765\u200b\u663e\u793a\u200b\u5b83\u4eec\u200b\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#_3","title":"\u8fdb\u884c\u200b\u9884\u6d4b","text":"<p>\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u6cd5\u200b\u662f\u200b\u53ea\u200b\u9700\u200b\u4f7f\u7528\u200b\u76f8\u5e94\u200b\u7684\u200b\u53c2\u6570\u200b\u8c03\u7528\u200b <code>.predict()</code> \u200b\u51fd\u6570\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/en2fr\", api_name='/predict')\nclient.predict(\"Hello\")\n\n&gt;&gt; Bonjour\n</code></pre> <p>\u200b\u5982\u679c\u200b\u6709\u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4f60\u200b\u5e94\u8be5\u200b\u5c06\u200b\u5b83\u4eec\u200b\u4f5c\u4e3a\u200b\u5355\u72ec\u200b\u7684\u200b\u53c2\u6570\u4f20\u9012\u200b\u7ed9\u200b <code>.predict()</code>\uff0c\u200b\u5c31\u200b\u50cf\u200b\u8fd9\u6837\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"gradio/calculator\")\nclient.predict(4, \"add\", 5)\n\n&gt;&gt; 9.0\n\n\n\u200b\u5bf9\u4e8e\u200b\u67d0\u4e9b\u200b\u8f93\u5165\u200b\uff0c\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\uff0c\u200b\u4f60\u200b\u5e94\u8be5\u200b\u4f20\u9012\u200b\u6587\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u6216\u200bURL\u3002\u200b\u540c\u6837\u200b\uff0c\u200b\u5bf9\u5e94\u200b\u7684\u200b\u8f93\u51fa\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4f60\u200b\u5c06\u200b\u83b7\u5f97\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u6216\u200bURL\u3002\n\n\n```python\nfrom gradio_client import Client\n\nclient = Client(\"abidlabs/whisper\")\nclient.predict(\"https://audio-samples.github.io/samples/mp3/blizzard_unconditional/sample-0.mp3\")\n\n&gt;&gt; \"My thought I have nobody by a beauty and will as you poured. Mr. Rochester is serve in that so don't find simpus, and devoted abode, to at might in a r\u2014\"\n</code></pre>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#running-jobs-asynchronously","title":"\u5f02\u6b65\u200b\u8fd0\u884c\u200b\u4efb\u52a1\u200b\uff08Running jobs asynchronously\uff09","text":"<p>\u200b\u5e94\u200b\u6ce8\u610f\u200b<code>.predict()</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u963b\u585e\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u5728\u200b\u8fd4\u56de\u200b\u9884\u6d4b\u200b\u4e4b\u524d\u200b\u7b49\u5f85\u200b\u64cd\u4f5c\u200b\u5b8c\u6210\u200b\u3002</p> <p>\u200b\u5728\u200b\u8bb8\u591a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u76f4\u5230\u200b\u4f60\u200b\u9700\u8981\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u4e4b\u524d\u200b\uff0c\u200b\u4f60\u200b\u6700\u597d\u200b\u8ba9\u200b\u4f5c\u4e1a\u200b\u5728\u200b\u540e\u53f0\u200b\u8fd0\u884c\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b<code>.submit()</code>\u200b\u65b9\u6cd5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b<code>Job</code>\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u7136\u540e\u200b\u7a0d\u540e\u200b\u8c03\u7528\u200b<code>.result()</code>\u200b\u5728\u200b\u4f5c\u4e1a\u200b\u4e0a\u200b\u83b7\u53d6\u200b\u7ed3\u679c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(space=\"abidlabs/en2fr\")\njob = client.submit(\"Hello\", api_name=\"/predict\")  # \u200b\u8fd9\u200b\u4e0d\u662f\u200b\u963b\u585e\u200b\u7684\u200b\n\n# \u200b\u505a\u200b\u5176\u4ed6\u200b\u4e8b\u60c5\u200b\n\njob.result()  # \u200b\u8fd9\u662f\u200b\u963b\u585e\u200b\u7684\u200b\n\n&gt;&gt; Bonjour\n</code></pre>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#adding-callbacks","title":"\u6dfb\u52a0\u200b\u56de\u8c03\u200b \uff08Adding callbacks\uff09","text":"<p>\u200b\u6216\u8005\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u56de\u8c03\u200b\u6765\u200b\u5728\u200b\u4f5c\u4e1a\u200b\u5b8c\u6210\u200b\u540e\u200b\u6267\u884c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u50cf\u200b\u8fd9\u6837\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\ndef print_result(x):\n    print(\" \u200b\u7ffb\u8bd1\u200b\u7684\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1a{x}\")\n\nclient = Client(space=\"abidlabs/en2fr\")\n\njob = client.submit(\"Hello\", api_name=\"/predict\", result_callbacks=[print_result])\n\n# \u200b\u505a\u200b\u5176\u4ed6\u200b\u4e8b\u60c5\u200b\n\n&gt;&gt; \u200b\u7ffb\u8bd1\u200b\u7684\u200b\u7ed3\u679c\u200b\u662f\u200b\uff1aBonjour\n</code></pre>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#status","title":"\u72b6\u6001\u200b \uff08Status\uff09","text":"<p><code>Job</code>\u200b\u5bf9\u8c61\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u60a8\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b<code>.status()</code>\u200b\u65b9\u6cd5\u200b\u83b7\u53d6\u200b\u8fd0\u884c\u200b\u4f5c\u4e1a\u200b\u7684\u200b\u72b6\u6001\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b<code>StatusUpdate</code>\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5177\u6709\u200b\u4ee5\u4e0b\u200b\u5c5e\u6027\u200b\uff1a<code>code</code>\uff08\u200b\u72b6\u6001\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e4b\u4e00\u200b\u8868\u793a\u200b\u72b6\u6001\u200b\u7684\u200b\u4e00\u7ec4\u200b\u5b9a\u4e49\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u3002\u200b\u53c2\u89c1\u200b<code>utils.Status</code>\u200b\u7c7b\u200b\uff09\u3001<code>rank</code>\uff08\u200b\u6b64\u200b\u4f5c\u4e1a\u200b\u5728\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\uff09\u3001<code>queue_size</code>\uff08\u200b\u603b\u961f\u200b\u5217\u200b\u5927\u5c0f\u200b\uff09\u3001<code>eta</code>\uff08\u200b\u6b64\u200b\u4f5c\u4e1a\u200b\u5c06\u200b\u5b8c\u6210\u200b\u7684\u200b\u9884\u8ba1\u200b\u65f6\u95f4\u200b\uff09\u3001<code>success</code>\uff08\u200b\u8868\u793a\u200b\u4f5c\u4e1a\u200b\u662f\u5426\u200b\u6210\u529f\u200b\u5b8c\u6210\u200b\u7684\u200b\u5e03\u5c14\u503c\u200b\uff09\u200b\u548c\u200b<code>time</code>\uff08\u200b\u751f\u6210\u200b\u72b6\u6001\u200b\u7684\u200b\u65f6\u95f4\u200b\uff09\u3002</p> <pre><code>from gradio_client import Client\n\nclient = Client(src=\"gradio/calculator\")\njob = client.submit(5, \"add\", 4, api_name=\"/predict\")\njob.status()\n\n&gt;&gt; &lt;Status.STARTING: 'STARTING'&gt;\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff1a<code>Job</code>\u200b\u7c7b\u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b<code>.done()</code>\u200b\u5b9e\u4f8b\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5e03\u5c14\u503c\u200b\uff0c\u200b\u6307\u793a\u200b\u4f5c\u4e1a\u200b\u662f\u5426\u200b\u5df2\u200b\u5b8c\u6210\u200b\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#cancelling-jobs","title":"\u53d6\u6d88\u200b\u4f5c\u4e1a\u200b \uff08Cancelling Jobs\uff09","text":"<p><code>Job</code>\u200b\u7c7b\u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b<code>.cancel()</code>\u200b\u5b9e\u4f8b\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u53d6\u6d88\u200b\u5df2\u200b\u6392\u961f\u200b\u4f46\u200b\u5c1a\u672a\u200b\u5f00\u59cb\u200b\u7684\u200b\u4f5c\u4e1a\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u8fd0\u884c\u200b\uff1a</p> <pre><code>client = Client(\"abidlabs/whisper\")\njob1 = client.submit(\"audio_sample1.wav\")\njob2 = client.submit(\"audio_sample2.wav\")\njob1.cancel()  # \u200b\u5c06\u200b\u8fd4\u56de\u200b False\uff0c\u200b\u5047\u8bbe\u200b\u4f5c\u4e1a\u200b\u5df2\u200b\u5f00\u59cb\u200b\njob2.cancel()  # \u200b\u5c06\u200b\u8fd4\u56de\u200b True\uff0c\u200b\u8868\u793a\u200b\u4f5c\u4e1a\u200b\u5df2\u200b\u53d6\u6d88\u200b\n</code></pre> <p>\u200b\u5982\u679c\u200b\u7b2c\u4e00\u4e2a\u200b\u4f5c\u4e1a\u200b\u5df2\u200b\u5f00\u59cb\u200b\u5904\u7406\u200b\uff0c\u200b\u5219\u200b\u5b83\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u53d6\u6d88\u200b\u3002\u200b\u5982\u679c\u200b\u7b2c\u4e8c\u4e2a\u200b\u4f5c\u4e1a\u200b\u5c1a\u672a\u200b\u5f00\u59cb\u200b\uff0c\u200b\u5219\u200b\u5b83\u200b\u5c06\u200b\u6210\u529f\u200b\u53d6\u6d88\u200b\u5e76\u200b\u4ece\u200b\u961f\u5217\u200b\u4e2d\u200b\u5220\u9664\u200b\u3002</p>"},{"location":"cn/06_client-libraries/01_getting-started-with-the-python-client/#generator-endpoints","title":"\u751f\u6210\u5668\u200b\u7aef\u70b9\u200b \uff08Generator Endpoints\uff09","text":"<p>\u200b\u67d0\u4e9b\u200bGradio API\u200b\u7aef\u70b9\u200b\u4e0d\u200b\u8fd4\u56de\u200b\u5355\u4e2a\u200b\u503c\u200b\uff0c\u200b\u800c\u662f\u200b\u8fd4\u56de\u200b\u4e00\u7cfb\u5217\u200b\u503c\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u968f\u65f6\u200b\u4ece\u200b\u8fd9\u6837\u200b\u7684\u200b\u751f\u6210\u5668\u200b\u7aef\u70b9\u200b\u83b7\u53d6\u200b\u8fd4\u56de\u200b\u7684\u200b\u4e00\u7cfb\u5217\u200b\u503c\u200b\uff0c\u200b\u65b9\u6cd5\u200b\u662f\u200b\u8fd0\u884c\u200b<code>job.outputs()</code>\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(src=\"gradio/count_generator\")\njob = client.submit(3, api_name=\"/count\")\nwhile not job.done():\n    time.sleep(0.1)\njob.outputs()\n\n&gt;&gt; ['0', '1', '2']\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5728\u200b\u751f\u6210\u5668\u200b\u7aef\u70b9\u200b\u4e0a\u200b\u8fd0\u884c\u200b<code>job.result()</code>\u200b\u53ea\u4f1a\u200b\u83b7\u5f97\u200b\u7aef\u70b9\u200b\u8fd4\u56de\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u503c\u200b\u3002</p> <p><code>Job</code>\u200b\u5bf9\u8c61\u200b\u8fd8\u662f\u200b\u53ef\u200b\u8fed\u4ee3\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5b83\u200b\u6309\u7167\u200b\u4ece\u200b\u7aef\u70b9\u200b\u8fd4\u56de\u200b\u7684\u200b\u7ed3\u679c\u200b\u9010\u4e2a\u200b\u663e\u793a\u200b\u751f\u6210\u5668\u200b\u51fd\u6570\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4f7f\u7528\u200b<code>Job</code>\u200b\u4f5c\u4e3a\u200b\u751f\u6210\u5668\u200b\u7684\u200b\u7b49\u6548\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(src=\"gradio/count_generator\")\njob = client.submit(3, api_name=\"/count\")\n\nfor o in job:\n    print(o)\n\n&gt;&gt; 0\n&gt;&gt; 1\n&gt;&gt; 2\n</code></pre> <p>\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u53d6\u6d88\u200b\u5177\u6709\u200b\u8fed\u4ee3\u200b\u8f93\u51fa\u200b\u7684\u200b\u4f5c\u4e1a\u200b\uff0c\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4f5c\u4e1a\u200b\u5c06\u200b\u5728\u200b\u5f53\u524d\u200b\u8fed\u4ee3\u200b\u5b8c\u6210\u200b\u8fd0\u884c\u200b\u540e\u200b\u5b8c\u6210\u200b\u3002</p> <pre><code>from gradio_client import Client\nimport time\n\nclient = Client(\"abidlabs/test-yield\")\njob = client.submit(\"abcdef\")\ntime.sleep(3)\njob.cancel()  # \u200b\u4f5c\u4e1a\u200b\u5728\u200b\u8fd0\u884c\u200b 2 \u200b\u4e2a\u200b\u8fed\u4ee3\u200b\u540e\u200b\u53d6\u6d88\u200b\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/","title":"\u4f7f\u7528\u200bGradio JavaScript\u200b\u5ba2\u6237\u7aef\u200b\u5feb\u901f\u200b\u5165\u95e8","text":"<p>Tags: CLIENT, API, SPACES</p> <p>Gradio JavaScript\u200b\u5ba2\u6237\u7aef\u200b\u4f7f\u5f97\u200b\u4f7f\u7528\u200b\u4efb\u4f55\u200bGradio\u200b\u5e94\u7528\u200b\u4f5c\u4e3a\u200bAPI\u200b\u975e\u5e38\u7b80\u5355\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8003\u8651\u4e00\u4e0b\u200b\u8fd9\u4e2a\u200b\u4ece\u200b\u9ea6\u514b\u98ce\u200b\u5f55\u97f3\u200b\u7684\u200bHugging Face Space\uff0c\u200b\u7528\u4e8e\u200b\u8f6c\u5f55\u200b\u97f3\u9891\u6587\u4ef6\u200b\u3002</p> <p></p> <p>\u200b\u4f7f\u7528\u200b<code>@gradio/client</code>\u200b\u5e93\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u4ee5\u200b\u7f16\u7a0b\u200b\u65b9\u5f0f\u200b\u4f7f\u7528\u200bGradio\u200b\u4f5c\u4e3a\u200bAPI\u200b\u6765\u200b\u8f6c\u5f55\u200b\u97f3\u9891\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5b8c\u6210\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u7684\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst response = await fetch(\n    \"https://github.com/audio-samples/audio-samples.github.io/raw/master/samples/wav/ted_speakers/SalmanKhan/sample-1.wav\"\n);\nconst audio_file = await response.blob();\n\nconst app = await client(\"abidlabs/whisper\");\nconst transcription = await app.predict(\"/predict\", [audio_file]);\n\nconsole.log(transcription.data);\n// [ \"I said the same phrase 30 times.\" ]\n</code></pre> <p>Gradio\u200b\u5ba2\u6237\u7aef\u200b\u9002\u7528\u200b\u4e8e\u200b\u4efb\u4f55\u200b\u6258\u7ba1\u200b\u7684\u200bGradio\u200b\u5e94\u7528\u200b\uff0c\u200b\u65e0\u8bba\u662f\u200b\u56fe\u50cf\u200b\u751f\u6210\u5668\u200b\u3001\u200b\u6587\u672c\u200b\u6458\u8981\u200b\u751f\u6210\u5668\u200b\u3001\u200b\u6709\u200b\u72b6\u6001\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u3001\u200b\u7a0e\u6536\u200b\u8ba1\u7b97\u5668\u200b\u8fd8\u662f\u200b\u5176\u4ed6\u200b\u4efb\u4f55\u200b\u5e94\u7528\u200b\uff01Gradio\u200b\u5ba2\u6237\u7aef\u200b\u901a\u5e38\u200b\u4e0e\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Spaces\u200b\u4e0a\u200b\u7684\u200b\u5e94\u7528\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u200b\u53ef\u4ee5\u200b\u6258\u7ba1\u200b\u5728\u200b\u4efb\u4f55\u200b\u5730\u65b9\u200b\uff0c\u200b\u6bd4\u5982\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u3002</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1a\u200b\u8981\u200b\u4f7f\u7528\u200bGradio\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b<code>gradio</code>\u200b\u5e93\u200b\u7684\u200b\u7ec6\u8282\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u719f\u6089\u200bGradio\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6982\u5ff5\u200b\u4f1a\u200b\u6709\u6240\u200b\u5e2e\u52a9\u200b\u3002</p>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#_1","title":"\u5b89\u88c5","text":"<p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u60a8\u200b\u9009\u62e9\u200b\u7684\u200b\u8f6f\u4ef6\u5305\u200b\u7ba1\u7406\u5668\u200b\u4ece\u200bnpm\u200b\u6ce8\u518c\u8868\u200b\u5b89\u88c5\u200b\u8f7b\u91cf\u7ea7\u200b\u7684\u200b<code>@gradio/client</code>\u200b\u5305\u200b\uff0c\u200b\u5e76\u200b\u652f\u6301\u200b18\u200b\u53ca\u200b\u4ee5\u4e0a\u200b\u7684\u200bNode\u200b\u7248\u672c\u200b\uff1a</p> <pre><code>npm i @gradio/client\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#gradio","title":"\u8fde\u63a5\u200b\u5230\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u7684\u200bGradio\u200b\u5e94\u7528","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b9e\u4f8b\u200b\u5316\u200b<code>client</code>\u200b\u5bf9\u8c61\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u8fde\u63a5\u200b\u5230\u200b\u5728\u200bHugging Face Spaces\u200b\u6216\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u4f4d\u7f6e\u200b\u8fd0\u884c\u200b\u7684\u200bGradio\u200b\u5e94\u7528\u200b\u6765\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#hugging-face-space","title":"\u8fde\u63a5\u200b\u5230\u200bHugging Face Space","text":"<pre><code>import { client } from \"@gradio/client\";\n\nconst app = client(\"abidlabs/en2fr\"); // \u200b\u4e00\u4e2a\u200b\u4ece\u200b\u82f1\u8bed\u7ffb\u8bd1\u200b\u4e3a\u200b\u6cd5\u8bed\u200b\u7684\u200b Space\n</code></pre> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200boptions\u200b\u53c2\u6570\u200b\u7684\u200b<code>hf_token</code>\u200b\u5c5e\u6027\u200b\u4e2d\u200b\u4f20\u5165\u200b\u60a8\u200b\u7684\u200bHF token\u200b\u6765\u200b\u8fde\u63a5\u200b\u5230\u200b\u79c1\u6709\u200bSpaces\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6b64\u5904\u200b\u83b7\u53d6\u200b\u60a8\u200b\u7684\u200bHF token\uff1ahttps://huggingface.co/settings/tokens</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = client(\"abidlabs/my-private-space\", { hf_token=\"hf_...\" })\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#space","title":"\u4e3a\u200b\u79c1\u4eba\u200b\u4f7f\u7528\u200b\u590d\u5236\u200b\u4e00\u4e2a\u200bSpace","text":"<p>\u200b\u867d\u7136\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u4f55\u200b\u516c\u5171\u200bSpace\u200b\u7528\u4f5c\u200bAPI\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u60a8\u200b\u53d1\u51fa\u200b\u7684\u200b\u8bf7\u6c42\u200b\u8fc7\u591a\u200b\uff0cHugging Face\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bf9\u200b\u60a8\u200b\u8fdb\u884c\u200b\u901f\u7387\u200b\u9650\u5236\u200b\u3002\u200b\u4e3a\u4e86\u200b\u65e0\u200b\u9650\u5236\u200b\u4f7f\u7528\u200bSpace\uff0c\u200b\u53ea\u200b\u9700\u200b\u590d\u5236\u200bSpace\u200b\u4ee5\u200b\u521b\u5efa\u200b\u79c1\u6709\u200bSpace\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b\u5b83\u200b\u6765\u200b\u8fdb\u884c\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u8bf7\u6c42\u200b\uff01</p> <p><code>@gradio/client</code>\u200b\u8fd8\u200b\u5bfc\u51fa\u200b\u4e86\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b<code>duplicate</code>\uff0c\u200b\u4ee5\u4f7f\u200b\u6b64\u200b\u8fc7\u7a0b\u200b\u53d8\u5f97\u200b\u7b80\u5355\u200b\uff08\u200b\u60a8\u200b\u5c06\u200b\u9700\u8981\u200b\u4f20\u5165\u200b\u60a8\u200b\u7684\u200bHugging Face token\uff09\u3002</p> <p><code>duplicate</code>\u200b\u4e0e\u200b<code>client</code>\u200b\u51e0\u4e4e\u200b\u76f8\u540c\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\u5e95\u5c42\u200b\u5b9e\u73b0\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst response = await fetch(\n    \"https://audio-samples.github.io/samples/mp3/blizzard_unconditional/sample-0.mp3\"\n);\nconst audio_file = await response.blob();\n\nconst app = await duplicate(\"abidlabs/whisper\", { hf_token: \"hf_...\" });\nconst transcription = app.predict(\"/predict\", [audio_file]);\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4e4b\u524d\u200b\u590d\u5236\u200b\u8fc7\u200b\u4e00\u4e2a\u200bSpace\uff0c\u200b\u5219\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b<code>duplicate</code>\u200b\u4e0d\u4f1a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200bSpace\u3002\u200b\u800c\u662f\u200b\u5ba2\u6237\u7aef\u200b\u5c06\u200b\u8fde\u63a5\u200b\u5230\u200b\u5148\u524d\u200b\u521b\u5efa\u200b\u7684\u200bSpace\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b89\u5168\u200b\u5730\u200b\u591a\u6b21\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200bSpace\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b<code>duplicate</code>\u200b\u65b9\u6cd5\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5982\u679c\u200b\u539f\u59cb\u200bSpace\u200b\u4f7f\u7528\u200b\u4e86\u200bGPU\uff0c\u200b\u60a8\u200b\u7684\u200b\u79c1\u6709\u200bSpace\u200b\u4e5f\u200b\u5c06\u200b\u4f7f\u7528\u200bGPU\uff0c\u200b\u5e76\u4e14\u200b\u5c06\u200b\u6839\u636e\u200bGPU\u200b\u7684\u200b\u4ef7\u683c\u200b\u5411\u200b\u60a8\u200b\u7684\u200bHugging Face\u200b\u8d26\u6237\u200b\u8ba1\u8d39\u200b\u3002\u200b\u4e3a\u4e86\u200b\u6700\u5927\u200b\u7a0b\u5ea6\u200b\u5730\u200b\u51cf\u5c11\u200b\u8d39\u7528\u200b\uff0c\u200b\u5728\u200b5\u200b\u5206\u949f\u200b\u4e0d\u200b\u6d3b\u52a8\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u7684\u200bSpace\u200b\u5c06\u200b\u81ea\u52a8\u200b\u8fdb\u5165\u200b\u4f11\u7720\u72b6\u6001\u200b\u3002\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>duplicate</code>\u200b\u7684\u200boptions\u200b\u5bf9\u8c61\u200b\u7684\u200b<code>hardware</code>\u200b\u548c\u200b<code>timeout</code>\u200b\u5c5e\u6027\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u786c\u4ef6\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await duplicate(\"abidlabs/whisper\", {\n    hf_token: \"hf_...\",\n    timeout: 60,\n    hardware: \"a10g-small\"\n});\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#gradio_1","title":"\u8fde\u63a5\u200b\u5230\u200b\u901a\u7528\u200b\u7684\u200bGradio\u200b\u5e94\u7528","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5728\u200b\u5176\u4ed6\u200b\u5730\u65b9\u200b\u8fd0\u884c\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u63d0\u4f9b\u200b\u5b8c\u6574\u200b\u7684\u200bURL\uff0c\u200b\u5305\u62ec\u200b\"http://\"\u200b\u6216\u200b\"https://\"\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5411\u200b\u8fd0\u884c\u200b\u5728\u200b\u5171\u4eab\u200bURL\u200b\u4e0a\u200b\u7684\u200bGradio\u200b\u5e94\u7528\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = client(\"https://bec81a83-5b5c-471e.gradio.live\");\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#api","title":"\u68c0\u67e5\u200bAPI\u200b\u7aef\u70b9","text":"<p>\u200b\u4e00\u65e6\u200b\u8fde\u63a5\u200b\u5230\u200bGradio\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b<code>client</code>\u200b\u7684\u200b<code>view_api</code>\u200b\u65b9\u6cd5\u200b\u6765\u200b\u67e5\u770b\u200b\u53ef\u7528\u200b\u7684\u200bAPI\u200b\u7aef\u70b9\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200bWhisper Space\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u505a\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"abidlabs/whisper\");\n\nconst app_info = await app.view_info();\n\nconsole.log(app_info);\n</code></pre> <p>\u200b\u7136\u540e\u200b\u6211\u4eec\u200b\u4f1a\u200b\u770b\u5230\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a</p> <pre><code>{\n    \"named_endpoints\": {\n        \"/predict\": {\n            \"parameters\": [\n                {\n                    \"label\": \"text\",\n                    \"component\": \"Textbox\",\n                    \"type\": \"string\"\n                }\n            ],\n            \"returns\": [\n                {\n                    \"label\": \"output\",\n                    \"component\": \"Textbox\",\n                    \"type\": \"string\"\n                }\n            ]\n        }\n    },\n    \"unnamed_endpoints\": {}\n}\n</code></pre> <p>\u200b\u8fd9\u200b\u544a\u8bc9\u200b\u6211\u4eec\u200b\u8be5\u200bSpace\u200b\u4e2d\u6709\u200b1\u200b\u4e2a\u200bAPI\u200b\u7aef\u70b9\u200b\uff0c\u200b\u5e76\u200b\u663e\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bAPI\u200b\u7aef\u70b9\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\uff1a\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u8c03\u7528\u200b<code>.predict()</code>\u200b\u65b9\u6cd5\u200b\uff08\u200b\u4e0b\u9762\u200b\u5c06\u200b\u8fdb\u884c\u200b\u66f4\u200b\u591a\u200b\u63a2\u7d22\u200b\uff09\uff0c\u200b\u5e76\u200b\u63d0\u4f9b\u200b\u7c7b\u578b\u200b\u4e3a\u200b<code>string</code>\u200b\u7684\u200b\u53c2\u6570\u200b<code>input_audio</code>\uff0c\u200b\u5b83\u200b\u662f\u200b\u6307\u5411\u200b\u6587\u4ef6\u200b\u7684\u200bURL\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u63d0\u4f9b\u200b<code>api_name='/predict'</code>\u200b\u53c2\u6570\u200b\u7ed9\u200b<code>predict()</code>\u200b\u65b9\u6cd5\u200b\u3002\u200b\u867d\u7136\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200bGradio\u200b\u5e94\u7528\u200b\u53ea\u6709\u200b1\u200b\u4e2a\u200b\u547d\u540d\u200b\u7684\u200b\u7aef\u70b9\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u662f\u200b\u5fc5\u9700\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u5728\u200b\u5355\u4e2a\u200b\u5e94\u7528\u200b\u4e2d\u200b\u8c03\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u7aef\u70b9\u200b\u3002\u200b\u5982\u679c\u200b\u5e94\u7528\u200b\u6709\u200b\u672a\u547d\u540d\u200b\u7684\u200bAPI\u200b\u7aef\u70b9\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd0\u884c\u200b<code>.view_api(all_endpoints=True)</code>\u200b\u6765\u200b\u663e\u793a\u200b\u5b83\u4eec\u200b\u3002</p>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#_2","title":"\u8fdb\u884c\u200b\u9884\u6d4b","text":"<p>\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u6cd5\u200b\u5c31\u662f\u200b\u4f7f\u7528\u200b\u9002\u5f53\u200b\u7684\u200b\u53c2\u6570\u200b\u8c03\u7528\u200b<code>.predict()</code>\u200b\u65b9\u6cd5\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"abidlabs/en2fr\");\nconst result = await app.predict(\"/predict\", [\"Hello\"]);\n</code></pre> <p>\u200b\u5982\u679c\u200b\u6709\u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u5c06\u200b\u5b83\u4eec\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u4f20\u9012\u200b\u7ed9\u200b<code>.predict()</code>\uff0c\u200b\u50cf\u200b\u8fd9\u6837\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"gradio/calculator\");\nconst result = await app.predict(\"/predict\", [4, \"add\", 5]);\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b\u67d0\u4e9b\u200b\u8f93\u5165\u200b\uff0c\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u6839\u636e\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200b\u65b9\u4fbf\u200b\u7a0b\u5ea6\u200b\u4f20\u5165\u200b<code>Buffer</code>\u3001<code>Blob</code>\u200b\u6216\u200b<code>File</code>\u3002\u200b\u5728\u200bNode.js\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>Buffer</code>\u200b\u6216\u200b<code>Blob</code>\uff1b\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>Blob</code>\u200b\u6216\u200b<code>File</code>\u3002</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst response = await fetch(\n    \"https://audio-samples.github.io/samples/mp3/blizzard_unconditional/sample-0.mp3\"\n);\nconst audio_file = await response.blob();\n\nconst app = await client(\"abidlabs/whisper\");\nconst result = await client.predict(\"/predict\", [audio_file]);\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#_3","title":"\u4f7f\u7528\u200b\u4e8b\u4ef6","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200bAPI\u200b\u53ef\u4ee5\u200b\u968f\u200b\u65f6\u95f4\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\uff0c\u200b\u6216\u8005\u200b\u60a8\u200b\u5e0c\u671b\u200b\u8bbf\u95ee\u200b\u6709\u5173\u200b\u4f5c\u4e1a\u72b6\u6001\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e8b\u4ef6\u200b\u63a5\u53e3\u200b\u83b7\u53d6\u200b\u66f4\u5927\u200b\u7684\u200b\u7075\u6d3b\u6027\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u8fed\u4ee3\u200b\u7684\u200b\u6216\u200b\u751f\u6210\u5668\u200b\u7684\u200b\u7aef\u70b9\u200b\u7279\u522b\u200b\u6709\u7528\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u4f1a\u200b\u751f\u6210\u200b\u4e00\u7cfb\u5217\u200b\u79bb\u6563\u200b\u7684\u200b\u54cd\u5e94\u503c\u200b\u3002</p> <pre><code>import { client } from \"@gradio/client\";\n\nfunction log_result(payload) {\n    const {\n        data: [translation]\n    } = payload;\n\n    console.log(`\u200b\u7ffb\u8bd1\u200b\u7ed3\u679c\u200b\u4e3a\u200b\uff1a${translation}`);\n}\n\nconst app = await client(\"abidlabs/en2fr\");\nconst job = app.submit(\"/predict\", [\"Hello\"]);\n\njob.on(\"data\", log_result);\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#_4","title":"\u72b6\u6001","text":"<p>\u200b\u4e8b\u4ef6\u200b\u63a5\u53e3\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u76d1\u542c\u200b<code>\"status\"</code>\u200b\u4e8b\u4ef6\u200b\u6765\u200b\u83b7\u53d6\u200b\u8fd0\u884c\u200b\u4f5c\u4e1a\u200b\u7684\u200b\u72b6\u6001\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u200b\u5c5e\u6027\u200b\uff1a<code>status</code>\uff08\u200b\u5f53\u524d\u200b\u4f5c\u4e1a\u200b\u7684\u200b\u4eba\u7c7b\u200b\u53ef\u200b\u8bfb\u72b6\u6001\u200b\uff0c<code>\"pending\" | \"generating\" | \"complete\" | \"error\"</code>\uff09\uff0c<code>code</code>\uff08\u200b\u4f5c\u4e1a\u200b\u7684\u200b\u8be6\u7ec6\u200bgradio code\uff09\uff0c<code>position</code>\uff08\u200b\u6b64\u200b\u4f5c\u4e1a\u200b\u5728\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\uff09\uff0c<code>queue_size</code>\uff08\u200b\u603b\u961f\u200b\u5217\u200b\u5927\u5c0f\u200b\uff09\uff0c<code>eta</code>\uff08\u200b\u4f5c\u4e1a\u200b\u5b8c\u6210\u200b\u7684\u200b\u9884\u8ba1\u200b\u65f6\u95f4\u200b\uff09\uff0c<code>success</code>\uff08\u200b\u8868\u793a\u200b\u4f5c\u4e1a\u200b\u662f\u5426\u200b\u6210\u529f\u200b\u5b8c\u6210\u200b\u7684\u200b\u5e03\u5c14\u503c\u200b\uff09\u200b\u548c\u200b<code>time</code>\uff08\u200b\u4f5c\u4e1a\u72b6\u6001\u200b\u751f\u6210\u200b\u7684\u200b\u65f6\u95f4\u200b\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b<code>Date</code>\u200b\u5bf9\u8c61\u200b\uff09\u3002</p> <pre><code>import { client } from \"@gradio/client\";\n\nfunction log_status(status) {\n    console.log(`\u200b\u6b64\u200b\u4f5c\u4e1a\u200b\u7684\u200b\u5f53\u524d\u200b\u72b6\u6001\u200b\u4e3a\u200b\uff1a${JSON.stringify(status, null, 2)}`);\n}\n\nconst app = await client(\"abidlabs/en2fr\");\nconst job = app.submit(\"/predict\", [\"Hello\"]);\n\njob.on(\"status\", log_status);\n</code></pre>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#_5","title":"\u53d6\u6d88\u200b\u4f5c\u4e1a","text":"<p>\u200b\u4f5c\u4e1a\u200b\u5b9e\u4f8b\u200b\u8fd8\u200b\u5177\u6709\u200b<code>.cancel()</code>\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u7528\u4e8e\u200b\u53d6\u6d88\u200b\u5df2\u200b\u6392\u961f\u200b\u4f46\u200b\u5c1a\u672a\u200b\u542f\u52a8\u200b\u7684\u200b\u4f5c\u4e1a\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"abidlabs/en2fr\");\nconst job_one = app.submit(\"/predict\", [\"Hello\"]);\nconst job_two = app.submit(\"/predict\", [\"Friends\"]);\n\njob_one.cancel();\njob_two.cancel();\n</code></pre> <p>\u200b\u5982\u679c\u200b\u7b2c\u4e00\u4e2a\u200b\u4f5c\u4e1a\u200b\u5df2\u7ecf\u200b\u5f00\u59cb\u200b\u5904\u7406\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5b83\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u53d6\u6d88\u200b\uff0c\u200b\u4f46\u200b\u5ba2\u6237\u7aef\u200b\u5c06\u200b\u4e0d\u518d\u200b\u76d1\u542c\u200b\u66f4\u65b0\u200b\uff08\u200b\u4e22\u5f03\u200b\u8be5\u200b\u4f5c\u4e1a\u200b\uff09\u3002\u200b\u5982\u679c\u200b\u7b2c\u4e8c\u4e2a\u200b\u4f5c\u4e1a\u200b\u5c1a\u672a\u200b\u542f\u52a8\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u88ab\u200b\u6210\u529f\u200b\u53d6\u6d88\u200b\u5e76\u200b\u4ece\u200b\u961f\u5217\u200b\u4e2d\u200b\u79fb\u9664\u200b\u3002</p>"},{"location":"cn/06_client-libraries/02_getting-started-with-the-js-client/#_6","title":"\u751f\u6210\u5668\u200b\u7aef\u70b9","text":"<p>\u200b\u67d0\u4e9b\u200bGradio API\u200b\u7aef\u70b9\u200b\u4e0d\u200b\u8fd4\u56de\u200b\u5355\u4e2a\u200b\u503c\u200b\uff0c\u200b\u800c\u662f\u200b\u8fd4\u56de\u200b\u4e00\u7cfb\u5217\u200b\u503c\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e8b\u4ef6\u200b\u63a5\u53e3\u200b\u5b9e\u65f6\u200b\u4fa6\u542c\u200b\u8fd9\u4e9b\u200b\u503c\u200b\uff1a</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"gradio/count_generator\");\nconst job = app.submit(0, [9]);\n\njob.on(\"data\", (data) =&gt; console.log(data));\n</code></pre> <p>\u200b\u8fd9\u200b\u5c06\u200b\u6309\u200b\u751f\u6210\u200b\u7aef\u70b9\u200b\u751f\u6210\u200b\u7684\u200b\u503c\u200b\u8fdb\u884c\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u200b\u3002</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u53d6\u6d88\u200b\u5177\u6709\u200b\u8fed\u4ee3\u200b\u8f93\u51fa\u200b\u7684\u200b\u4f5c\u4e1a\u200b\uff0c\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4f5c\u4e1a\u200b\u5c06\u200b\u7acb\u5373\u200b\u5b8c\u6210\u200b\u3002</p> <pre><code>import { client } from \"@gradio/client\";\n\nconst app = await client(\"gradio/count_generator\");\nconst job = app.submit(0, [9]);\n\njob.on(\"data\", (data) =&gt; console.log(data));\n\nsetTimeout(() =&gt; {\n    job.cancel();\n}, 3000);\n</code></pre>"},{"location":"cn/06_client-libraries/fastapi-app-with-the-gradio-client/","title":"\u4f7f\u7528\u200bGradio Python\u200b\u5ba2\u6237\u7aef\u200b\u6784\u5efa\u200bFastAPI\u200b\u5e94\u7528","text":"<p>Tags: CLIENT, API, WEB APP</p> <p>\u200b\u5728\u200b\u672c\u200b\u535a\u5ba2\u200b\u6587\u7ae0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6f14\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b <code>gradio_client</code> Python\u200b\u5e93\u200b \u200b\u6765\u200b\u4ee5\u200b\u7f16\u7a0b\u200b\u65b9\u5f0f\u200b\u521b\u5efa\u200bGradio\u200b\u5e94\u7528\u200b\u7684\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u901a\u8fc7\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200bFastAPI Web\u200b\u5e94\u7528\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u6784\u5efa\u200b\u7684\u200b Web \u200b\u5e94\u7528\u200b\u540d\u4e3a\u200b\u201cAcappellify\u201d\uff0c\u200b\u5b83\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u4e0a\u4f20\u200b\u89c6\u9891\u6587\u4ef6\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u6ca1\u6709\u200b\u4f34\u594f\u200b\u97f3\u4e50\u200b\u7684\u200b\u89c6\u9891\u200b\u7248\u672c\u200b\u3002\u200b\u5b83\u200b\u8fd8\u200b\u4f1a\u200b\u663e\u793a\u200b\u751f\u6210\u200b\u7684\u200b\u89c6\u9891\u200b\u5e93\u200b\u3002</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b</p> <p>\u200b\u5728\u200b\u5f00\u59cb\u200b\u4e4b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200bPython 3.9\u200b\u6216\u200b\u66f4\u200b\u9ad8\u200b\u7248\u672c\u200b\uff0c\u200b\u5e76\u200b\u5df2\u200b\u5b89\u88c5\u200b\u4ee5\u4e0b\u200b\u5e93\u200b\uff1a</p> <ul> <li><code>gradio_client</code></li> <li><code>fastapi</code></li> <li><code>uvicorn</code></li> </ul> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>pip</code>\u200b\u5b89\u88c5\u200b\u8fd9\u4e9b\u200b\u5e93\u200b\uff1a</p> <pre><code>$ pip install gradio_client fastapi uvicorn\n</code></pre> <p>\u200b\u60a8\u200b\u8fd8\u200b\u9700\u8981\u200b\u5b89\u88c5\u200bffmpeg\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u6765\u200b\u68c0\u67e5\u200b\u60a8\u200b\u662f\u5426\u200b\u5df2\u200b\u5b89\u88c5\u200bffmpeg\uff1a</p> <pre><code>$ ffmpeg version\n</code></pre> <p>\u200b\u5426\u5219\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6309\u7167\u200b\u8fd9\u4e9b\u200b\u8bf4\u660e\u200b\u5b89\u88c5\u200bffmpeg \u200b\u94fe\u63a5\u200b\u3002</p>"},{"location":"cn/06_client-libraries/fastapi-app-with-the-gradio-client/#1","title":"\u6b65\u9aa4\u200b1\uff1a\u200b\u7f16\u5199\u200b\u89c6\u9891\u200b\u5904\u7406\u51fd\u6570","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4ece\u200b\u4f3c\u4e4e\u200b\u6700\u200b\u590d\u6742\u200b\u7684\u200b\u90e8\u5206\u200b\u5f00\u59cb\u200b--\u200b\u4f7f\u7528\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u4ece\u200b\u89c6\u9891\u200b\u4e2d\u200b\u53bb\u9664\u200b\u97f3\u4e50\u200b\u3002</p> <p>\u200b\u5e78\u8fd0\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6211\u4eec\u200b\u6709\u200b\u4e00\u4e2a\u200b\u73b0\u6709\u200b\u7684\u200bSpace\u200b\u53ef\u4ee5\u200b\u7b80\u5316\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff1ahttps://huggingface.co/spaces/abidlabs/music-separation\u3002\u200b\u8be5\u200b\u7a7a\u95f4\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u97f3\u9891\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u751f\u6210\u200b\u4e24\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u97f3\u9891\u6587\u4ef6\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u4f34\u594f\u200b\u97f3\u4e50\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u539f\u59cb\u200b\u526a\u8f91\u200b\u4e2d\u200b\u7684\u200b\u5176\u4ed6\u200b\u6240\u6709\u200b\u58f0\u97f3\u200b\u3002\u200b\u975e\u5e38\u9002\u5408\u200b\u6211\u4eec\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u4f7f\u7528\u200b\uff01</p> <p>\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200bPython\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6bd4\u5982\u200b<code>main.py</code>\uff0c\u200b\u5e76\u200b\u901a\u8fc7\u200b\u4ece\u200b<code>gradio_client</code>\u200b\u5bfc\u5165\u200b <code>Client</code> \u200b\u7c7b\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u8fde\u63a5\u200b\u5230\u200b\u8be5\u200bSpace\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client(\"abidlabs/music-separation\")\n\ndef acapellify(audio_path):\n    result = client.predict(audio_path, api_name=\"/predict\")\n    return result[0]\n</code></pre> <p>\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4ee3\u7801\u200b\u4ec5\u200b\u5982\u200b\u4e0a\u200b\u6240\u793a\u200b--\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0cAPI\u200b\u7aef\u70b9\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u4e24\u4e2a\u200b\u97f3\u9891\u6587\u4ef6\u200b\uff08\u200b\u4e00\u4e2a\u200b\u6ca1\u6709\u200b\u97f3\u4e50\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u53ea\u6709\u200b\u97f3\u4e50\u200b\uff09\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u53ea\u200b\u8fd4\u56de\u200b\u5217\u8868\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u7531\u4e8e\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u516c\u5171\u200bSpace\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u200b\u5176\u4ed6\u200b\u7528\u6237\u200b\u540c\u65f6\u200b\u4f7f\u7528\u200b\u8be5\u200bSpace\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u901f\u5ea6\u200b\u8f83\u6162\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u81ea\u5df1\u200b\u7684\u200bHugging Face token\u200b\u590d\u5236\u200b\u6b64\u200bSpace\uff0c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u53ea\u6709\u200b\u60a8\u200b\u81ea\u5df1\u200b\u8bbf\u95ee\u200b\u6743\u9650\u200b\u7684\u200b\u79c1\u6709\u200bSpace\uff0c\u200b\u5e76\u200b\u7ed5\u8fc7\u200b\u6392\u961f\u200b\u3002\u200b\u8981\u200b\u505a\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u53ea\u200b\u9700\u7528\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u66ff\u6362\u200b\u4e0a\u9762\u200b\u7684\u200b\u524d\u200b\u4e24\u884c\u200b\uff1a</p> <pre><code>from gradio_client import Client\n\nclient = Client.duplicate(\"abidlabs/music-separation\", hf_token=YOUR_HF_TOKEN)\n</code></pre> <p>\u200b\u5176\u4ed6\u200b\u7684\u200b\u4ee3\u7801\u200b\u4fdd\u6301\u200b\u4e0d\u53d8\u200b\uff01</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u5f53\u7136\u200b\uff0c\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u5904\u7406\u200b\u89c6\u9891\u6587\u4ef6\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u4ece\u200b\u89c6\u9891\u6587\u4ef6\u200b\u4e2d\u200b\u63d0\u53d6\u200b\u97f3\u9891\u200b\u3002\u200b\u4e3a\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b<code>ffmpeg</code>\u200b\u5e93\u200b\uff0c\u200b\u5b83\u200b\u5728\u200b\u5904\u7406\u200b\u97f3\u9891\u200b\u548c\u200b\u89c6\u9891\u6587\u4ef6\u200b\u65f6\u200b\u505a\u200b\u4e86\u200b\u5f88\u591a\u200b\u8270\u5de8\u200b\u7684\u200b\u5de5\u4f5c\u200b\u3002\u200b\u4f7f\u7528\u200b<code>ffmpeg</code>\u200b\u7684\u200b\u6700\u200b\u5e38\u89c1\u200b\u65b9\u6cd5\u200b\u662f\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b\uff0c\u200b\u5728\u200bPython\u200b\u7684\u200b<code>subprocess</code>\u200b\u6a21\u5757\u200b\u4e2d\u200b\u8c03\u7528\u200b\u5b83\u200b\uff1a</p> <p>\u200b\u6211\u4eec\u200b\u7684\u200b\u89c6\u9891\u200b\u5904\u7406\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u5305\u542b\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ece\u200b\u89c6\u9891\u6587\u4ef6\u200b\u8def\u5f84\u200b\u5f00\u59cb\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b<code>ffmpeg</code>\u200b\u63d0\u53d6\u200b\u97f3\u9891\u200b\u3002</li> <li>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b<code>acapellify()</code>\u200b\u51fd\u6570\u200b\u4f20\u5165\u200b\u97f3\u9891\u6587\u4ef6\u200b\u3002</li> <li>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u65b0\u200b\u97f3\u9891\u200b\u4e0e\u200b\u539f\u59cb\u200b\u89c6\u9891\u200b\u5408\u5e76\u200b\uff0c\u200b\u751f\u6210\u200b\u6700\u7ec8\u200b\u7684\u200bAcapellify\u200b\u89c6\u9891\u200b\u3002</li> </ol> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200bPython\u200b\u4e2d\u200b\u7684\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u6dfb\u52a0\u200b\u5230\u200b<code>main.py</code>\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff1a</p> <pre><code>import subprocess\n\ndef process_video(video_path):\n    old_audio = os.path.basename(video_path).split(\".\")[0] + \".m4a\"\n    subprocess.run(['ffmpeg', '-y', '-i', video_path, '-vn', '-acodec', 'copy', old_audio])\n\n    new_audio = acapellify(old_audio)\n\n    new_video = f\"acap_{video_path}\"\n    subprocess.call(['ffmpeg', '-y', '-i', video_path, '-i', new_audio, '-map', '0:v', '-map', '1:a', '-c:v', 'copy', '-c:a', 'aac', '-strict', 'experimental', f\"static/{new_video}\"])\n    return new_video\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4e86\u89e3\u200b\u6240\u6709\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u9605\u8bfb\u200bffmpeg\u200b\u6587\u6863\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u8d85\u51fa\u200b\u4e86\u200b\u672c\u200b\u6559\u7a0b\u200b\u7684\u200b\u8303\u56f4\u200b\u3002</p>"},{"location":"cn/06_client-libraries/fastapi-app-with-the-gradio-client/#2-fastapi","title":"\u6b65\u9aa4\u200b2: \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bFastAPI\u200b\u5e94\u7528\u200b\uff08\u200b\u540e\u200b\u7aef\u200b\u8def\u7531\u200b\uff09","text":"<p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bFastAPI\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4ee5\u524d\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u8fc7\u200bFastAPI\uff0c\u200b\u8bf7\u200b\u67e5\u770b\u200b\u4f18\u79c0\u200b\u7684\u200bFastAPI\u200b\u6587\u6863\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u4e0b\u9762\u200b\u7684\u200b\u57fa\u672c\u200b\u6a21\u677f\u200b\u5c06\u200b\u770b\u8d77\u6765\u200b\u5f88\u200b\u719f\u6089\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5176\u200b\u6dfb\u52a0\u200b\u5230\u200b<code>main.py</code>\u200b\u4e2d\u200b\uff1a</p> <pre><code>import os\nfrom fastapi import FastAPI, File, UploadFile, Request\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\n\napp = FastAPI()\nos.makedirs(\"static\", exist_ok=True)\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\nvideos = []\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def home(request: Request):\n    return templates.TemplateResponse(\n        \"home.html\", {\"request\": request, \"videos\": videos})\n\n@app.post(\"/uploadvideo/\")\nasync def upload_video(video: UploadFile = File(...)):\n    new_video = process_video(video.filename)\n    videos.append(new_video)\n    return RedirectResponse(url='/', status_code=303)\n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0cFastAPI\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6709\u200b\u4e24\u4e2a\u200b\u8def\u7531\u200b\uff1a<code>/</code> \u200b\u548c\u200b <code>/uploadvideo/</code>\u3002</p> <p><code>/</code> \u200b\u8def\u7531\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u663e\u793a\u200b\u6240\u6709\u200b\u4e0a\u4f20\u200b\u89c6\u9891\u200b\u7684\u200b\u753b\u5eca\u200b\u7684\u200bHTML\u200b\u6a21\u677f\u200b\u3002</p> <p><code>/uploadvideo/</code> \u200b\u8def\u7531\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b<code>UploadFile</code>\u200b\u5bf9\u8c61\u200b\u7684\u200b <code>POST</code> \u200b\u8bf7\u6c42\u200b\uff0c\u200b\u8868\u793a\u200b\u4e0a\u4f20\u200b\u7684\u200b\u89c6\u9891\u6587\u4ef6\u200b\u3002\u200b\u89c6\u9891\u6587\u4ef6\u200b\u901a\u8fc7\u200b<code>process_video()</code>\u200b\u65b9\u6cd5\u200b\u8fdb\u884c\u200b \"acapellify\"\uff0c\u200b\u5e76\u200b\u5c06\u200b\u8f93\u51fa\u200b\u89c6\u9891\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\u4e2d\u200b\uff0c\u200b\u8be5\u200b\u5217\u8868\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u5b58\u50a8\u200b\u4e86\u200b\u6240\u6709\u200b\u4e0a\u4f20\u200b\u7684\u200b\u89c6\u9891\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u53ea\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u57fa\u672c\u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u53d1\u5e03\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u6dfb\u52a0\u200b\u66f4\u200b\u591a\u200b\u903b\u8f91\u200b\u6765\u200b\u5904\u7406\u200b\u6587\u4ef6\u200b\u5b58\u50a8\u200b\u3001\u200b\u7528\u6237\u200b\u8eab\u4efd\u9a8c\u8bc1\u200b\u548c\u200b\u5b89\u5168\u6027\u200b\u8003\u8651\u200b\u7b49\u200b\u3002</p>"},{"location":"cn/06_client-libraries/fastapi-app-with-the-gradio-client/#3fastapi","title":"\u6b65\u9aa4\u200b3\uff1a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bFastAPI\u200b\u5e94\u7528\u200b\uff08\u200b\u524d\u7aef\u200b\u6a21\u677f\u200b\uff09","text":"<p>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u521b\u5efa\u200bWeb\u200b\u5e94\u7528\u200b\u7684\u200b\u524d\u7aef\u200b\u3002\u200b\u9996\u5148\u200b\uff0c\u200b\u5728\u200b\u4e0e\u200b<code>main.py</code>\u200b\u76f8\u540c\u200b\u7684\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b<code>templates</code>\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u5728\u200b<code>templates</code>\u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b<code>home.html</code>\u200b\u7684\u200b\u6a21\u677f\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u6700\u7ec8\u200b\u7684\u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\uff1a</p> <pre><code>\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 home.html\n</code></pre> <p>\u200b\u5c06\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u5199\u5165\u200b<code>home.html</code>\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff1a</p> <pre><code>&amp;lt;!DOCTYPE html&gt; &amp;lt;html&gt; &amp;lt;head&gt; &amp;lt;title&gt; \u200b\u89c6\u9891\u200b\u5e93\u200b &amp;lt;/title&gt; &amp;lt;style&gt;\nbody { font-family: sans-serif; margin: 0; padding: 0; background-color:\n#f5f5f5; } h1 { text-align: center; margin-top: 30px; margin-bottom: 20px; }\n.gallery { display: flex; flex-wrap: wrap; justify-content: center; gap: 20px;\npadding: 20px; } .video { border: 2px solid #ccc; box-shadow: 0px 0px 10px\nrgba(0, 0, 0, 0.2); border-radius: 5px; overflow: hidden; width: 300px;\nmargin-bottom: 20px; } .video video { width: 100%; height: 200px; } .video p {\ntext-align: center; margin: 10px 0; } form { margin-top: 20px; text-align:\ncenter; } input[type=\"file\"] { display: none; } .upload-btn { display:\ninline-block; background-color: #3498db; color: #fff; padding: 10px 20px;\nfont-size: 16px; border: none; border-radius: 5px; cursor: pointer; }\n.upload-btn:hover { background-color: #2980b9; } .file-name { margin-left: 10px;\n} &amp;lt;/style&gt; &amp;lt;/head&gt; &amp;lt;body&gt; &amp;lt;h1&gt; \u200b\u89c6\u9891\u200b\u5e93\u200b &amp;lt;/h1&gt; {% if videos %}\n&amp;lt;div class=\"gallery\"&gt; {% for video in videos %} &amp;lt;div class=\"video\"&gt;\n&amp;lt;video controls&gt; &amp;lt;source src=\"{{ url_for('static', path=video) }}\"\ntype=\"video/mp4\"&gt; \u200b\u60a8\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u4e0d\u200b\u652f\u6301\u200b\u89c6\u9891\u200b\u6807\u7b7e\u200b\u3002 &amp;lt;/video&gt; &amp;lt;p&gt;{{ video\n}}&amp;lt;/p&gt; &amp;lt;/div&gt; {% endfor %} &amp;lt;/div&gt; {% else %} &amp;lt;p&gt;\n\u200b\u5c1a\u672a\u200b\u4e0a\u4f20\u200b\u4efb\u4f55\u200b\u89c6\u9891\u200b\u3002&amp;lt;/p&gt; {% endif %} &amp;lt;form action=\"/uploadvideo/\"\nmethod=\"post\" enctype=\"multipart/form-data\"&gt; &amp;lt;label for=\"video-upload\"\nclass=\"upload-btn\"&gt; \u200b\u9009\u62e9\u200b\u89c6\u9891\u6587\u4ef6\u200b &amp;lt;/label&gt; &amp;lt;input type=\"file\" name=\"video\"\nid=\"video-upload\"&gt; &amp;lt;span class=\"file-name\"&gt;&amp;lt;/span&gt; &amp;lt;button\ntype=\"submit\" class=\"upload-btn\"&gt; \u200b\u4e0a\u4f20\u200b &amp;lt;/button&gt; &amp;lt;/form&gt; &amp;lt;script&gt; //\n\u200b\u5728\u200b\u8868\u5355\u200b\u4e2d\u200b\u663e\u793a\u200b\u6240\u200b\u9009\u200b\u6587\u4ef6\u540d\u200b const fileUpload =\ndocument.getElementById(\"video-upload\"); const fileName =\ndocument.querySelector(\".file-name\"); fileUpload.addEventListener(\"change\", (e)\n=&gt; { fileName.textContent = e.target.files[0].name; }); &amp;lt;/script&gt; &amp;lt;/body&gt;\n&amp;lt;/html&gt;\n</code></pre>"},{"location":"cn/06_client-libraries/fastapi-app-with-the-gradio-client/#4-fastapi","title":"\u7b2c\u200b4\u200b\u6b65\u200b\uff1a\u200b\u8fd0\u884c\u200b FastAPI \u200b\u5e94\u7528","text":"<p>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u51c6\u5907\u200b\u597d\u200b\u8fd0\u884c\u200b\u7531\u200b Gradio Python \u200b\u5ba2\u6237\u7aef\u200b\u63d0\u4f9b\u200b\u652f\u6301\u200b\u7684\u200b FastAPI \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p> <p>\u200b\u6253\u5f00\u200b\u7ec8\u7aef\u200b\u5e76\u200b\u5bfc\u822a\u200b\u5230\u200b\u5305\u542b\u200b <code>main.py</code> \u200b\u6587\u4ef6\u200b\u7684\u200b\u76ee\u5f55\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</p> <pre><code>$ uvicorn main:app\n</code></pre> <p>\u200b\u60a8\u200b\u5e94\u8be5\u200b\u4f1a\u200b\u770b\u5230\u200b\u5982\u4e0b\u200b\u8f93\u51fa\u200b\uff1a</p> <pre><code>Loaded as API: https://abidlabs-music-separation.hf.space \u2714\nINFO:     Started server process [1360]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u5f00\u59cb\u200b\u4e0a\u4f20\u200b\u89c6\u9891\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u5728\u200b\u54cd\u5e94\u200b\u4e2d\u200b\u5f97\u5230\u200b\u4e00\u4e9b\u200b\u201cacapellified\u201d\u200b\u89c6\u9891\u200b\uff08\u200b\u5904\u7406\u200b\u65f6\u95f4\u200b\u6839\u636e\u200b\u60a8\u200b\u7684\u200b\u89c6\u9891\u200b\u957f\u5ea6\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u51e0\u79d2\u949f\u200b\u5230\u200b\u51e0\u5206\u949f\u200b\uff09\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e0a\u4f20\u200b\u4e24\u4e2a\u200b\u89c6\u9891\u200b\u540e\u200b UI \u200b\u7684\u200b\u5916\u89c2\u200b\uff1a</p> <p></p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u5728\u200b\u9879\u76ee\u200b\u4e2d\u200b\u4f7f\u7528\u200b Gradio Python \u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u9605\u8bfb\u200b\u4e13\u95e8\u200b\u7684\u200b\u6307\u5357\u200b\u3002</p>"},{"location":"cn/06_client-libraries/gradio-and-llm-agents/","title":"Gradio &amp; LLM Agents \ud83e\udd1d","text":"<p>\u200b\u975e\u5e38\u200b\u5f3a\u5927\u200b\u7684\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLM\uff09\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u80fd\u200b\u8d4b\u4e88\u200b\u5b83\u4eec\u200b\u5b8c\u6210\u200b\u4e13\u95e8\u200b\u4efb\u52a1\u200b\u7684\u200b\u6280\u80fd\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5c06\u200b\u53d8\u5f97\u200b\u66f4\u52a0\u200b\u5f3a\u5927\u200b\u3002</p> <p>gradio_tools\u200b\u5e93\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u4f55\u200bGradio\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u5de5\u5177\u200b\uff0c\u200b\u4f9b\u200b\u4ee3\u7406\u200b\u4f7f\u7528\u200b\u4ee5\u200b\u5b8c\u6210\u200b\u4efb\u52a1\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u4e2a\u200bLLM\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bGradio\u200b\u5de5\u5177\u200b\u8f6c\u5f55\u200b\u5728\u200b\u7f51\u4e0a\u200b\u627e\u5230\u200b\u7684\u200b\u8bed\u97f3\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u7136\u540e\u200b\u4e3a\u200b\u60a8\u200bsummarize\u200b\u5b83\u200b\u3002\u200b\u6216\u8005\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200bGradio\u200b\u5de5\u5177\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200bGoogle Drive\u200b\u4e0a\u200b\u7684\u200b\u6587\u6863\u200b\u5e94\u7528\u200bOCR\uff0c\u200b\u7136\u540e\u200b\u56de\u7b54\u200b\u76f8\u5173\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b<code>gradio_tools</code>\u200b\u8ba9\u200b\u60a8\u200b\u7684\u200bLLM\u200b\u4ee3\u7406\u200b\u8bbf\u95ee\u200b\u5168\u7403\u200b\u6258\u7ba1\u200b\u7684\u200b\u6700\u200b\u5148\u8fdb\u200b\u7684\u200bGradio\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u5c3d\u7ba1\u200b<code>gradio_tools</code>\u200b\u4e0e\u200b\u4e0d\u6b62\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u200b\u6846\u67b6\u200b\u517c\u5bb9\u200b\uff0c\u200b\u4f46\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u91cd\u70b9\u200b\u4ecb\u7ecd\u200bLangchain\u200b\u4ee3\u7406\u200b\u3002</p>"},{"location":"cn/06_client-libraries/gradio-and-llm-agents/#_1","title":"\u4e00\u4e9b\u200b\u80cc\u666f\u200b\u4fe1\u606f","text":""},{"location":"cn/06_client-libraries/gradio-and-llm-agents/#_2","title":"\u4ee3\u7406\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>LangChain\u200b\u4ee3\u7406\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLM\uff09\uff0c\u200b\u5b83\u200b\u6839\u636e\u200b\u4f7f\u7528\u200b\u5176\u200b\u4f17\u591a\u200b\u5de5\u5177\u200b\u4e4b\u4e00\u200b\u7684\u200b\u8f93\u5165\u200b\u6765\u200b\u751f\u6210\u200b\u8f93\u51fa\u200b\u3002</p>"},{"location":"cn/06_client-libraries/gradio-and-llm-agents/#gradio","title":"Gradio\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>Gradio\u200b\u662f\u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u673a\u5668\u200b\u5b66\u4e60\u200bWeb\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5e76\u200b\u4e0e\u200b\u5168\u7403\u200b\u5171\u4eab\u200b\u7684\u200b\u4e8b\u5b9e\u4e0a\u200b\u7684\u200b\u6807\u51c6\u200b\u6846\u67b6\u200b-\u200b\u5b8c\u5168\u200b\u7531\u200bPython\u200b\u9a71\u52a8\u200b\uff01\ud83d\udc0d</p>"},{"location":"cn/06_client-libraries/gradio-and-llm-agents/#gradio_tools-","title":"gradio_tools - \u200b\u4e00\u4e2a\u200b\u7aef\u5230\u200b\u7aef\u7684\u200b\u793a\u4f8b","text":"<p>\u200b\u8981\u200b\u5f00\u59cb\u200b\u4f7f\u7528\u200b<code>gradio_tools</code>\uff0c\u200b\u60a8\u200b\u53ea\u200b\u9700\u8981\u200b\u5bfc\u5165\u200b\u548c\u200b\u521d\u59cb\u5316\u200b\u5de5\u5177\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u4f20\u9012\u200b\u7ed9\u200blangchain\u200b\u4ee3\u7406\u200b\uff01</p> <p>\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bfc\u5165\u200b<code>StableDiffusionPromptGeneratorTool</code>\u200b\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u826f\u597d\u200b\u7684\u200b\u7a33\u5b9a\u200b\u6269\u6563\u200b\u63d0\u793a\u200b\uff0c <code>StableDiffusionTool</code>\u200b\u4ee5\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u6539\u8fdb\u200b\u7684\u200b\u63d0\u793a\u200b\u521b\u5efa\u200b\u4e00\u5f20\u200b\u56fe\u7247\u200b\uff0c<code>ImageCaptioningTool</code>\u200b\u4ee5\u4e3a\u200b\u751f\u6210\u200b\u7684\u200b\u56fe\u7247\u200b\u52a0\u4e0a\u200b\u6807\u9898\u200b\uff0c\u200b\u4ee5\u53ca\u200b <code>TextToVideoTool</code>\u200b\u4ee5\u200b\u6839\u636e\u200b\u63d0\u793a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u200b\u3002</p> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u544a\u8bc9\u200b\u6211\u4eec\u200b\u7684\u200b\u4ee3\u7406\u200b\u521b\u5efa\u200b\u4e00\u5f20\u200b\u72d7\u200b\u6b63\u5728\u200b\u6ed1\u677f\u200b\u7684\u200b\u56fe\u7247\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u4f7f\u7528\u200b\u56fe\u50cf\u200b\u751f\u6210\u5668\u200b\u4e4b\u524d\u200b\u8bf7\u200b\u5148\u200b\u6539\u8fdb\u200b\u6211\u4eec\u200b\u7684\u200b\u63d0\u793a\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u8981\u6c42\u200b \u200b\u5b83\u200b\u4e3a\u200b\u751f\u6210\u200b\u7684\u200b\u56fe\u7247\u200b\u6dfb\u52a0\u200b\u6807\u9898\u200b\u5e76\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u89c6\u9891\u200b\u3002\u200b\u4ee3\u7406\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u51b3\u5b9a\u200b\u4f7f\u7528\u200b\u54ea\u4e2a\u200b\u5de5\u5177\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u6211\u4eec\u200b\u660e\u786e\u200b\u544a\u77e5\u200b\u3002</p> <pre><code>import os\n\nif not os.getenv(\"OPENAI_API_KEY\"):\n    raise ValueError(\"OPENAI_API_KEY \u200b\u5fc5\u987b\u200b\u8bbe\u7f6e\u200b \")\n\nfrom langchain.agents import initialize_agent\nfrom langchain.llms import OpenAI\nfrom gradio_tools import (StableDiffusionTool, ImageCaptioningTool, StableDiffusionPromptGeneratorTool,\n                          TextToVideoTool)\n\nfrom langchain.memory import ConversationBufferMemory\n\nllm = OpenAI(temperature=0)\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\ntools = [StableDiffusionTool().langchain, ImageCaptioningTool().langchain,\n         StableDiffusionPromptGeneratorTool().langchain, TextToVideoTool().langchain]\n\nagent = initialize_agent(tools, llm, memory=memory, agent=\"conversational-react-description\", verbose=True)\noutput = agent.run(input=(\"Please create a photo of a dog riding a skateboard \"\n                          \"but improve my prompt prior to using an image generator.\"\n                          \"Please caption the generated image and create a video for it using the improved prompt.\"))\n</code></pre> <p>\u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u4e00\u4e9b\u200b\u4e0e\u200b<code>gradio_tools</code>\u200b\u4e00\u8d77\u200b\u63d0\u4f9b\u200b\u7684\u200b\u9884\u200b\u6784\u5efa\u200b\u5de5\u5177\u200b\u3002\u200b\u8bf7\u53c2\u9605\u200b\u6b64\u200b\u6587\u6863\u200b\u4ee5\u200b\u83b7\u53d6\u200b\u5b8c\u6574\u200b\u7684\u200b<code>gradio_tools</code>\u200b\u5de5\u5177\u200b\u5217\u8868\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4f7f\u7528\u200b\u5f53\u524d\u200b\u4e0d\u200b\u5728\u200b<code>gradio_tools</code>\u200b\u4e2d\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u5f88\u200b\u5bb9\u6613\u200b\u6dfb\u52a0\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u4e0b\u200b\u4e00\u8282\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u6dfb\u52a0\u200b\u81ea\u5df1\u200b\u7684\u200b\u5de5\u5177\u200b\u3002</p>"},{"location":"cn/06_client-libraries/gradio-and-llm-agents/#gradio_tools-_1","title":"gradio_tools - \u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u5de5\u5177","text":"<p>\u200b\u6838\u5fc3\u200b\u62bd\u8c61\u200b\u662f\u200b<code>GradioTool</code>\uff0c\u200b\u5b83\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4e3a\u200bLLM\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u5b9e\u73b0\u200b\u6807\u51c6\u63a5\u53e3\u200b\uff1a</p> <pre><code>class GradioTool(BaseTool):\n\n    def __init__(self, name: str, description: str, src: str) -&gt; None:\n\n    @abstractmethod\n    def create_job(self, query: str) -&gt; Job:\n        pass\n\n    @abstractmethod\n    def postprocess(self, output: Tuple[Any] | Any) -&gt; str:\n        pass\n</code></pre> <p>\u200b\u9700\u8981\u200b\u6ee1\u8db3\u200b\u7684\u200b\u8981\u6c42\u200b\u662f\u200b\uff1a</p> <ol> <li>\u200b\u5de5\u5177\u200b\u7684\u200b\u540d\u79f0\u200b</li> <li>\u200b\u5de5\u5177\u200b\u7684\u200b\u63cf\u8ff0\u200b\u3002\u200b\u8fd9\u200b\u975e\u5e38\u200b\u5173\u952e\u200b\uff01\u200b\u4ee3\u7406\u200b\u6839\u636e\u200b\u5176\u200b\u63cf\u8ff0\u200b\u51b3\u5b9a\u200b\u4f7f\u7528\u200b\u54ea\u4e2a\u200b\u5de5\u5177\u200b\u3002\u200b\u8bf7\u200b\u786e\u5207\u200b\u63cf\u8ff0\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u5e94\u8be5\u200b\u662f\u200b\u4ec0\u4e48\u6837\u200b\u7684\u200b\uff0c\u200b\u6700\u597d\u200b\u5305\u62ec\u200b\u793a\u4f8b\u200b\u3002</li> <li>Gradio\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200burl\u200b\u6216\u200bspace id\uff0c\u200b\u4f8b\u5982\u200b<code>freddyaboulton/calculator</code>\u3002\u200b\u57fa\u4e8e\u200b\u8be5\u503c\u200b\uff0c<code>gradio_tool</code>\u200b\u5c06\u200b\u901a\u8fc7\u200bAPI\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bgradio\u200b\u5ba2\u6237\u7aef\u200b\u5b9e\u4f8b\u200b\u6765\u200b\u67e5\u8be2\u200b\u4e0a\u6e38\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u200b\u719f\u6089\u200bgradio\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u70b9\u51fb\u200b\u94fe\u63a5\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\u3002</li> <li>create_job - \u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u5e94\u8be5\u200b\u89e3\u6790\u200b\u8be5\u200b\u5b57\u7b26\u4e32\u200b\u5e76\u200b\u4ece\u200b\u5ba2\u6237\u7aef\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200bjob\u3002\u200b\u5927\u591a\u6570\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u200b\u53ea\u200b\u9700\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u4f20\u9012\u200b\u7ed9\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b<code>submit</code>\u200b\u51fd\u6570\u200b\u5373\u53ef\u200b\u3002\u200b\u6709\u5173\u200b\u521b\u5efa\u200bjob\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u8fd9\u91cc\u200b</li> <li>postprocess - \u200b\u7ed9\u5b9a\u200b\u4f5c\u4e1a\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200bLLM\u200b\u53ef\u4ee5\u200b\u5411\u200b\u7528\u6237\u200b\u663e\u793a\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u3002</li> <li>Optional\u200b\u53ef\u200b\u9009\u200b - \u200b\u67d0\u4e9b\u200b\u5e93\u200b\uff0c\u200b\u4f8b\u5982\u200bMiniChain\uff0c\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4e00\u4e9b\u200b\u5173\u4e8e\u200b\u5de5\u5177\u200b\u4f7f\u7528\u200b\u7684\u200b\u5e95\u5c42\u200bgradio\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7c7b\u578b\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u8fd4\u56de\u200bgr.Textbox()\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u63d0\u4f9b\u200b\u66f4\u200b\u51c6\u786e\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u5b9e\u73b0\u200b\u5de5\u5177\u200b\u7684\u200b<code>_block_input(self, gr)</code>\u200b\u548c\u200b<code>_block_output(self, gr)</code>\u200b\u65b9\u6cd5\u200b\u3002<code>gr</code>\u200b\u53d8\u91cf\u200b\u662f\u200bgradio\u200b\u6a21\u5757\u200b\uff08\u200b\u901a\u8fc7\u200b<code>import gradio as gr</code>\u200b\u83b7\u5f97\u200b\u7684\u200b\u7ed3\u679c\u200b\uff09\u3002<code>GradiTool</code>\u200b\u7236\u7c7b\u200b\u5c06\u200b\u81ea\u52a8\u200b\u5f15\u5165\u200b<code>gr</code>\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4f20\u9012\u200b\u7ed9\u200b<code>_block_input</code>\u200b\u548c\u200b<code>_block_output</code>\u200b\u65b9\u6cd5\u200b\u3002</li> </ol> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01</p> <p>\u200b\u4e00\u65e6\u200b\u60a8\u200b\u521b\u5efa\u200b\u4e86\u200b\u81ea\u5df1\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b<code>gradio_tools</code>\u200b\u5b58\u50a8\u200b\u5e93\u4e0a\u200b\u53d1\u8d77\u200b\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\uff01\u200b\u6211\u4eec\u200b\u6b22\u8fce\u200b\u6240\u6709\u200b\u8d21\u732e\u200b\u3002</p>"},{"location":"cn/06_client-libraries/gradio-and-llm-agents/#-","title":"\u793a\u4f8b\u200b\u5de5\u5177\u200b - \u200b\u7a33\u5b9a\u200b\u6269\u6563","text":"<p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4f5c\u4e3a\u200b\u793a\u4f8b\u200b\u7684\u200b\u7a33\u5b9a\u200b\u6269\u6563\u200b\u5de5\u5177\u200b\u4ee3\u7801\u200b\uff1a</p> <p>from gradio_tool import GradioTool import os</p> <p>class StableDiffusionTool(GradioTool): \"\"\"Tool for calling stable diffusion from llm\"\"\"</p> <pre><code>def __init__(\n    self,\n    name=\"StableDiffusion\",\n    description=(\n        \"An image generator. Use this to generate images based on \"\n        \"text input. Input should be a description of what the image should \"\n        \"look like. The output will be a path to an image file.\"\n    ),\n    src=\"gradio-client-demos/stable-diffusion\",\n    hf_token=None,\n) -&gt; None:\n    super().__init__(name, description, src, hf_token)\n\ndef create_job(self, query: str) -&gt; Job:\n    return self.client.submit(query, \"\", 9, fn_index=1)\n\ndef postprocess(self, output: str) -&gt; str:\n    return [os.path.join(output, i) for i in os.listdir(output) if not i.endswith(\"json\")][0]\n\ndef _block_input(self, gr) -&gt; \"gr.components.Component\":\n    return gr.Textbox()\n\ndef _block_output(self, gr) -&gt; \"gr.components.Component\":\n    return gr.Image()\n</code></pre> <pre><code>\u200b\u5173\u4e8e\u200b\u6b64\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e00\u4e9b\u200b\u6ce8\u610f\u4e8b\u9879\u200b\uff1a\n1. \u200b\u6240\u6709\u200b\u7684\u200b `GradioTool` \u200b\u5b9e\u4f8b\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b `client` \u200b\u7684\u200b\u5c5e\u6027\u200b\uff0c\u200b\u5b83\u200b\u6307\u5411\u200b\u5e95\u5c42\u200b\u7684\u200b [gradio \u200b\u5ba2\u6237\u7aef\u200b](https://github.com/gradio-app/gradio/tree/main/client/python#gradio_client-use-a-gradio-app-as-an-api----in-3-lines-of-python)\uff0c\u200b\u8fd9\u200b\u5c31\u662f\u200b\u60a8\u200b\u5728\u200b `create_job` \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002\n\n2. `create_job` \u200b\u65b9\u6cd5\u200b\u53ea\u662f\u200b\u5c06\u200b\u67e5\u8be2\u200b\u5b57\u7b26\u4e32\u200b\u4f20\u9012\u200b\u7ed9\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b `submit` \u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u200b\u786c\u200b\u7f16\u7801\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\uff0c\u200b\u5373\u200b\u8d1f\u9762\u200b\u63d0\u793a\u200b\u5b57\u7b26\u4e32\u200b\u548c\u200b\u6307\u5357\u200b\u7f29\u653e\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u540e\u7eed\u200b\u7248\u672c\u200b\u4e2d\u200b\u4fee\u6539\u200b\u6211\u4eec\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4ece\u200b\u8f93\u5165\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u63a5\u53d7\u200b\u8fd9\u4e9b\u200b\u503c\u200b\u3002\n\n3. `postprocess` \u200b\u65b9\u6cd5\u200b\u53ea\u662f\u200b\u8fd4\u56de\u200b\u7531\u200b\u7a33\u5b9a\u200b\u6269\u6563\u200b\u7a7a\u95f4\u200b\u521b\u5efa\u200b\u7684\u200b\u56fe\u5e93\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u56fe\u50cf\u200b\u3002\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b `os` \u200b\u6a21\u5757\u200b\u83b7\u53d6\u200b\u56fe\u50cf\u200b\u7684\u200b\u5b8c\u6574\u200b\u8def\u5f84\u200b\u3002\n\n## Conclusion\n\n\u200b\u73b0\u5728\u200b\uff0c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u77e5\u9053\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u6570\u5343\u4e2a\u200b\u8fd0\u884c\u200b\u5728\u200b\u91ce\u5916\u200b\u7684\u200b gradio \u200b\u7a7a\u95f4\u200b\u6765\u200b\u6269\u5c55\u200b\u60a8\u200b\u7684\u200b LLM \u200b\u7684\u200b\u80fd\u529b\u200b\u4e86\u200b\uff01\n\u200b\u540c\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u6b22\u8fce\u200b\u5bf9\u200b [gradio_tools](https://github.com/freddyaboulton/gradio-tools) \u200b\u5e93\u200b\u7684\u200b\u4efb\u4f55\u200b\u8d21\u732e\u200b\u3002\u200b\u6211\u4eec\u200b\u5f88\u200b\u5174\u594b\u200b\u770b\u5230\u200b\u5927\u5bb6\u200b\u6784\u5efa\u200b\u7684\u200b\u5de5\u5177\u200b\uff01\n</code></pre>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/","title":"\u4f7f\u7528\u200b GAN \u200b\u521b\u5efa\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u670b\u53cb","text":"<p>spaces/NimaBoscarino/cryptopunks, https://huggingface.co/spaces/nateraw/cryptopunks-generator Tags: GAN, IMAGE, HUB</p> <p>\u200b\u7531\u200b Nima Boscarino \u200b\u548c\u200b Nate Raw \u200b\u8d21\u732e\u200b</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#_1","title":"\u7b80\u4ecb","text":"<p>\u200b\u6700\u8fd1\u200b\uff0c\u200b\u52a0\u5bc6\u200b\u8d27\u5e01\u200b\u3001NFTs \u200b\u548c\u200b Web3 \u200b\u8fd0\u52a8\u200b\u4f3c\u4e4e\u200b\u90fd\u200b\u975e\u5e38\u200b\u6d41\u884c\u200b\uff01\u200b\u6570\u5b57\u200b\u8d44\u4ea7\u200b\u4ee5\u200b\u60ca\u4eba\u200b\u7684\u200b\u91d1\u989d\u200b\u5728\u200b\u5e02\u573a\u200b\u4e0a\u200b\u4e0a\u5e02\u200b\uff0c\u200b\u51e0\u4e4e\u200b\u6bcf\u4e2a\u200b\u540d\u4eba\u200b\u90fd\u200b\u63a8\u51fa\u200b\u4e86\u200b\u81ea\u5df1\u200b\u7684\u200b NFT \u200b\u6536\u85cf\u200b\u3002\u200b\u867d\u7136\u200b\u60a8\u200b\u7684\u200b\u52a0\u5bc6\u200b\u8d44\u4ea7\u200b\u53ef\u80fd\u200b\u662f\u200b\u5e94\u7a0e\u200b\u7684\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5728\u200b\u52a0\u62ff\u5927\u200b\uff08https://www.canada.ca/en/revenue-agency/programs/about-canada-revenue-agency-cra/compliance/digital-currency/cryptocurrency-guide.html\uff09\uff0c\u200b\u4f46\u200b\u4eca\u5929\u200b\u6211\u4eec\u200b\u5c06\u200b\u63a2\u7d22\u200b\u4e00\u4e9b\u200b\u6709\u8da3\u200b\u4e14\u200b\u65e0\u7a0e\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u200b\u751f\u6210\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e00\u7cfb\u5217\u200b\u8fc7\u7a0b\u200b\u751f\u6210\u200b\u7684\u200b CryptoPunks\uff08https://www.larvalabs.com/cryptopunks\uff09\u3002</p> <p>\u200b\u751f\u6210\u200b\u5bf9\u6297\u200b\u7f51\u7edc\u200b\uff08GANs\uff09\uff0c\u200b\u901a\u5e38\u200b\u79f0\u4e3a\u200b GANs\uff0c\u200b\u662f\u200b\u4e00\u7c7b\u200b\u7279\u5b9a\u200b\u7684\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\uff0c\u200b\u65e8\u5728\u200b\u901a\u8fc7\u200b\u5b66\u4e60\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u96c6\u6765\u200b\u521b\u5efa\u200b\uff08\u200b\u751f\u6210\u200b\uff01\uff09\u200b\u4e0e\u200b\u539f\u59cb\u200b\u8bad\u7ec3\u200b\u96c6\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u5177\u6709\u200b\u4ee4\u4eba\u4fe1\u670d\u200b\u7684\u200b\u76f8\u4f3c\u6027\u200b\u7684\u200b\u65b0\u200b\u6750\u6599\u200b\u3002\u200b\u4f17\u6240\u5468\u77e5\u200b\uff0c\u200b\u7f51\u7ad9\u200bthispersondoesnotexist.com\u200b\u901a\u8fc7\u200b\u540d\u4e3a\u200b StyleGAN2 \u200b\u7684\u200b\u6a21\u578b\u200b\u751f\u6210\u200b\u4e86\u200b\u6829\u6829\u5982\u751f\u200b\u4f46\u662f\u200b\u5408\u6210\u200b\u7684\u200b\u4eba\u7269\u200b\u56fe\u50cf\u200b\u800c\u200b\u8fc5\u901f\u200b\u8d70\u7ea2\u200b\u3002GANs \u200b\u5728\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u9886\u57df\u200b\u83b7\u5f97\u200b\u4e86\u200b\u4eba\u4eec\u200b\u7684\u200b\u5173\u6ce8\u200b\uff0c\u200b\u73b0\u5728\u200b\u88ab\u200b\u7528\u4e8e\u200b\u751f\u6210\u200b\u5404\u79cd\u200b\u56fe\u50cf\u200b\u3001\u200b\u6587\u672c\u200b\u751a\u81f3\u200b\u97f3\u4e50\u200b\uff01</p> <p>\u200b\u4eca\u5929\u200b\u6211\u4eec\u200b\u5c06\u200b\u7b80\u8981\u200b\u4ecb\u7ecd\u200b GAN \u200b\u7684\u200b\u9ad8\u7ea7\u200b\u76f4\u89c9\u200b\uff0c\u200b\u7136\u540e\u200b\u6211\u4eec\u200b\u5c06\u200b\u56f4\u7ed5\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b GAN \u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u5c0f\u578b\u200b\u6f14\u793a\u200b\uff0c\u200b\u770b\u770b\u200b\u8fd9\u200b\u4e00\u5207\u90fd\u662f\u200b\u600e\u4e48\u56de\u4e8b\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u6211\u4eec\u200b\u5c06\u8981\u200b\u7ec4\u5408\u200b\u7684\u200b\u4e1c\u897f\u200b\u7684\u200b\u4e00\u77a5\u200b\uff1a</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002\u200b\u8981\u200b\u4f7f\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff0c\u200b\u8bf7\u200b\u8fd8\u200b\u5b89\u88c5\u200b <code>torch</code> \u200b\u548c\u200b <code>torchvision</code>\u3002</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#gans","title":"GANs\uff1a\u200b\u7b80\u4ecb","text":"<p>\u200b\u6700\u521d\u200b\u5728\u200bGoodfellow \u200b\u7b49\u200b\u4eba\u200b 2014 \u200b\u5e74\u200b\u7684\u200b\u8bba\u6587\u200b\u4e2d\u200b\u63d0\u51fa\u200b\uff0cGANs \u200b\u7531\u200b\u4e92\u76f8\u200b\u7ade\u4e89\u200b\u7684\u200b\u795e\u7ecf\u7f51\u7edc\u200b\u7ec4\u6210\u200b\uff0c\u200b\u65e8\u5728\u200b\u76f8\u4e92\u200b\u667a\u80fd\u200b\u5730\u200b\u6b3a\u9a97\u200b\u5bf9\u65b9\u200b\u3002\u200b\u4e00\u79cd\u200b\u7f51\u7edc\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u201c\u200b\u751f\u6210\u5668\u200b\u201d\uff0c\u200b\u8d1f\u8d23\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b\u3002\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7f51\u7edc\u200b\uff0c\u200b\u79f0\u4e3a\u200b\u201c\u200b\u9274\u522b\u5668\u200b\u201d\uff0c\u200b\u4ece\u200b\u751f\u6210\u5668\u200b\u4e00\u6b21\u200b\u63a5\u6536\u200b\u4e00\u5f20\u200b\u56fe\u50cf\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6765\u81ea\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b real \u200b\u771f\u5b9e\u200b\u56fe\u50cf\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u9274\u522b\u5668\u200b\u5fc5\u987b\u200b\u731c\u6d4b\u200b\uff1a\u200b\u54ea\u5f20\u200b\u56fe\u50cf\u200b\u662f\u200b\u5047\u200b\u7684\u200b\uff1f</p> <p>\u200b\u751f\u6210\u5668\u200b\u4e0d\u65ad\u200b\u8bad\u7ec3\u200b\u4ee5\u200b\u521b\u5efa\u200b\u5bf9\u200b\u9274\u522b\u5668\u200b\u66f4\u200b\u96be\u4ee5\u200b\u8bc6\u522b\u200b\u7684\u200b\u56fe\u50cf\u200b\uff0c\u200b\u800c\u200b\u9274\u522b\u5668\u200b\u6bcf\u6b21\u200b\u6b63\u786e\u200b\u68c0\u6d4b\u200b\u5230\u200b\u4f2a\u9020\u200b\u56fe\u50cf\u200b\u65f6\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u4e3a\u200b\u751f\u6210\u5668\u200b\u8bbe\u7f6e\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u95e8\u69db\u200b\u3002\u200b\u968f\u7740\u200b\u7f51\u7edc\u200b\u4e4b\u95f4\u200b\u7684\u200b\u8fd9\u79cd\u200b\u7ade\u4e89\u200b\uff08adversarial \u200b\u5bf9\u6297\u6027\u200b\uff01\uff09\uff0c\u200b\u751f\u6210\u200b\u7684\u200b\u56fe\u50cf\u200b\u6539\u5584\u200b\u5230\u200b\u4e86\u200b\u5bf9\u200b\u4eba\u773c\u200b\u6765\u8bf4\u200b\u65e0\u6cd5\u200b\u533a\u5206\u200b\u7684\u200b\u5730\u6b65\u200b\uff01</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u66f4\u200b\u6df1\u5165\u200b\u5730\u200b\u4e86\u89e3\u200b GANs\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bAnalytics Vidhya \u200b\u4e0a\u200b\u7684\u200b\u8fd9\u7bc7\u200b\u4f18\u79c0\u200b\u6587\u7ae0\u200b\u6216\u200b\u8fd9\u4e2a\u200bPyTorch \u200b\u6559\u7a0b\u200b\u3002\u200b\u4e0d\u8fc7\u200b\uff0c\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5c06\u200b\u6df1\u5165\u200b\u770b\u200b\u4e00\u4e0b\u200b\u6f14\u793a\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#1-","title":"\u6b65\u9aa4\u200b 1 - \u200b\u521b\u5efa\u200b\u751f\u6210\u5668\u200b\u6a21\u578b","text":"<p>\u200b\u8981\u200b\u4f7f\u7528\u200b GAN \u200b\u751f\u6210\u200b\u65b0\u200b\u56fe\u50cf\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u751f\u6210\u5668\u200b\u6a21\u578b\u200b\u3002\u200b\u751f\u6210\u5668\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8bb8\u591a\u200b\u4e0d\u540c\u200b\u7684\u200b\u67b6\u6784\u200b\uff0c\u200b\u4f46\u662f\u200b\u5bf9\u4e8e\u200b\u8fd9\u4e2a\u200b\u6f14\u793a\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b GAN \u200b\u751f\u6210\u5668\u200b\u6a21\u578b\u200b\uff0c\u200b\u5176\u200b\u67b6\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> <pre><code>from torch import nn\n\nclass Generator(nn.Module):\n    # \u200b\u6709\u5173\u200bnc\uff0cnz\u200b\u548c\u200bngf\u200b\u7684\u200b\u89e3\u91ca\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u4e0b\u9762\u200b\u7684\u200b\u94fe\u63a5\u200b\n    # https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#inputs\n    def __init__(self, nc=4, nz=100, ngf=64):\n        super(Generator, self).__init__()\n        self.network = nn.Sequential(\n            nn.ConvTranspose2d(nz, ngf * 4, 3, 1, 0, bias=False),\n            nn.BatchNorm2d(ngf * 4),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 4, ngf * 2, 3, 2, 1, bias=False),\n            nn.BatchNorm2d(ngf * 2),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 0, bias=False),\n            nn.BatchNorm2d(ngf),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf, nc, 4, 2, 1, bias=False),\n            nn.Tanh(),\n        )\n\n    def forward(self, input):\n        output = self.network(input)\n        return output\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u6765\u81ea\u200b\u6b64\u200b repo \u200b\u7684\u200b @teddykoker\u200b\u7684\u200b\u751f\u6210\u5668\u200b\u6a21\u578b\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u90a3\u91cc\u200b\u770b\u5230\u200b\u539f\u59cb\u200b\u7684\u200b\u9274\u522b\u5668\u200b\u6a21\u578b\u200b\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u5728\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u6a21\u578b\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u52a0\u8f7d\u200b\u6765\u81ea\u200b Hugging Face Hub \u200b\u7684\u200b\u6743\u91cd\u200b\uff0c\u200b\u5b58\u50a8\u200b\u5728\u200bnateraw/cryptopunks-gan\u200b\u4e2d\u200b\uff1a</p> <pre><code>from huggingface_hub import hf_hub_download\nimport torch\n\nmodel = Generator()\nweights_path = hf_hub_download('nateraw/cryptopunks-gan', 'generator.pth')\nmodel.load_state_dict(torch.load(weights_path, map_location=torch.device('cpu'))) # \u200b\u5982\u679c\u200b\u6709\u200b\u53ef\u7528\u200b\u7684\u200bGPU\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b'cuda'\n</code></pre>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#2-predict","title":"\u6b65\u9aa4\u200b 2 - \u200b\u5b9a\u4e49\u200b\u201cpredict\u201d\u200b\u51fd\u6570","text":"<p><code>predict</code> \u200b\u51fd\u6570\u200b\u662f\u200b\u4f7f\u200b Gradio \u200b\u5de5\u4f5c\u200b\u7684\u200b\u5173\u952e\u200b\uff01\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b Gradio \u200b\u754c\u9762\u200b\u9009\u62e9\u200b\u7684\u200b\u4efb\u4f55\u200b\u8f93\u5165\u200b\u90fd\u200b\u5c06\u200b\u901a\u8fc7\u200b\u6211\u4eec\u200b\u7684\u200b <code>predict</code> \u200b\u51fd\u6570\u200b\u4f20\u9012\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u5e94\u5bf9\u200b\u8f93\u5165\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u5e76\u200b\u751f\u6210\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b Gradio \u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u663e\u793a\u200b\u7684\u200b\u8f93\u51fa\u200b\u3002\u200b\u5bf9\u4e8e\u200b GANs\uff0c\u200b\u5e38\u89c1\u200b\u7684\u200b\u505a\u6cd5\u200b\u662f\u200b\u5c06\u200b\u968f\u673a\u566a\u58f0\u200b\u4f20\u5165\u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u578b\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u5c06\u200b\u751f\u6210\u200b\u4e00\u5f20\u200b\u968f\u673a\u6570\u200b\u7684\u200b\u5f20\u91cf\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6a21\u578b\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>torchvision</code> \u200b\u7684\u200b <code>save_image</code> \u200b\u51fd\u6570\u200b\u5c06\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u4fdd\u5b58\u200b\u4e3a\u200b <code>png</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u6587\u4ef6\u540d\u200b\uff1a</p> <pre><code>from torchvision.utils import save_image\n\ndef predict(seed):\n    num_punks = 4\n    torch.manual_seed(seed)\n    z = torch.randn(num_punks, 100, 1, 1)\n    punks = model(z)\n    save_image(punks, \"punks.png\", normalize=True)\n    return 'punks.png'\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u7ed9\u200b <code>predict</code> \u200b\u51fd\u6570\u200b\u4e00\u4e2a\u200b <code>seed</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u79cd\u5b50\u200b\u56fa\u5b9a\u200b\u968f\u673a\u200b\u5f20\u91cf\u200b\u751f\u6210\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4f20\u5165\u200b\u76f8\u540c\u200b\u7684\u200b\u79cd\u5b50\u200b\u518d\u6b21\u200b\u67e5\u770b\u200b\u751f\u6210\u200b\u7684\u200b punks\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff01 \u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u578b\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b 100x1x1 \u200b\u7684\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\u8fdb\u884c\u200b\u5355\u6b21\u200b\u63a8\u7406\u200b\uff0c\u200b\u6216\u8005\u200b (BatchSize)x100x1x1 \u200b\u6765\u200b\u751f\u6210\u200b\u4e00\u6279\u200b\u56fe\u50cf\u200b\u3002\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6f14\u793a\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u6bcf\u6b21\u200b\u751f\u6210\u200b 4 \u200b\u4e2a\u200b punk\u3002</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#gradio","title":"\u7b2c\u4e09\u6b65\u200b\u2014\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b Gradio \u200b\u63a5\u53e3","text":"<p>\u200b\u6b64\u65f6\u200b\uff0c\u200b\u60a8\u200b\u751a\u81f3\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b\u60a8\u200b\u62e5\u6709\u200b\u7684\u200b\u4ee3\u7801\u200b <code>predict(&lt;SOME_NUMBER&gt;)</code>\uff0c\u200b\u5e76\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u4e2d\u200b\u627e\u5230\u200b\u65b0\u200b\u751f\u6210\u200b\u7684\u200b punk \u200b\u5728\u200b <code>./punks.png</code>\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u5236\u4f5c\u200b\u4e00\u4e2a\u200b\u771f\u6b63\u200b\u7684\u200b\u4ea4\u4e92\u200b\u6f14\u793a\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u7528\u200b Gradio \u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u754c\u9762\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\uff1a</p> <ul> <li>\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u6ed1\u5757\u200b\u8f93\u5165\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u201cseed\u201d\u200b\u503c\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u56fe\u50cf\u200b\u7ec4\u4ef6\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5c55\u793a\u200b\u751f\u6210\u200b\u7684\u200b punk</li> <li>\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b <code>predict()</code> \u200b\u51fd\u6570\u200b\u6765\u200b\u63a5\u53d7\u200b\u79cd\u5b50\u200b\u5e76\u200b\u751f\u6210\u200b\u56fe\u50cf\u200b</li> </ul> <p>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b <code>gr.Interface()</code>\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u8c03\u7528\u200b\u6765\u200b\u5b9a\u4e49\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b :</p> <pre><code>import gradio as gr\n\ngr.Interface(\n    predict,\n    inputs=[\n        gr.Slider(0, 1000, label='Seed', default=42),\n    ],\n    outputs=\"image\",\n).launch()\n</code></pre> <p>\u200b\u542f\u52a8\u200b\u754c\u9762\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u4f1a\u200b\u770b\u5230\u200b\u50cf\u200b\u8fd9\u6837\u200b\u7684\u200b\u4e1c\u897f\u200b :</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#punk","title":"\u7b2c\u56db\u6b65\u200b\u2014\u200b\u66f4\u200b\u591a\u200b punk\uff01","text":"<p>\u200b\u6bcf\u6b21\u200b\u751f\u6210\u200b 4 \u200b\u4e2a\u200b punk \u200b\u662f\u200b\u4e00\u4e2a\u200b\u597d\u7684\u5f00\u59cb\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e5f\u8bb8\u200b\u6211\u4eec\u200b\u60f3\u200b\u63a7\u5236\u200b\u6bcf\u6b21\u200b\u60f3\u200b\u751f\u6210\u200b\u591a\u5c11\u200b\u3002\u200b\u901a\u8fc7\u200b\u7b80\u5355\u200b\u5730\u5411\u200b\u6211\u4eec\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>gr.Interface</code> \u200b\u7684\u200b <code>inputs</code> \u200b\u5217\u8868\u200b\u6dfb\u52a0\u200b\u53e6\u200b\u4e00\u9879\u200b\u5373\u53ef\u200b\u5411\u200b\u6211\u4eec\u200b\u7684\u200b Gradio \u200b\u754c\u9762\u200b\u6dfb\u52a0\u200b\u66f4\u200b\u591a\u200b\u8f93\u5165\u200b :</p> <pre><code>gr.Interface(\n    predict,\n    inputs=[\n        gr.Slider(0, 1000, label='Seed', default=42),\n        gr.Slider(4, 64, label='Number of Punks', step=1, default=10), # \u200b\u6dfb\u52a0\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6ed1\u5757\u200b!\n    ],\n    outputs=\"image\",\n).launch()\n</code></pre> <p>\u200b\u65b0\u200b\u7684\u200b\u8f93\u5165\u200b\u5c06\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6211\u4eec\u200b\u7684\u200b <code>predict()</code> \u200b\u51fd\u6570\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5fc5\u987b\u200b\u5bf9\u200b\u8be5\u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u4e00\u4e9b\u200b\u66f4\u6539\u200b\uff0c\u200b\u4ee5\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u53c2\u6570\u200b :</p> <pre><code>def predict(seed, num_punks):\n    torch.manual_seed(seed)\n    z = torch.randn(num_punks, 100, 1, 1)\n    punks = model(z)\n    save_image(punks, \"punks.png\", normalize=True)\n    return 'punks.png'\n</code></pre> <p>\u200b\u5f53\u200b\u60a8\u200b\u91cd\u65b0\u542f\u52a8\u200b\u754c\u9762\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u4f1a\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u7b2c\u4e8c\u4e2a\u200b\u6ed1\u5757\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u60a8\u200b\u63a7\u5236\u200b punk \u200b\u7684\u200b\u6570\u91cf\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/create-your-own-friends-with-a-gan/#-","title":"\u7b2c\u4e94\u6b65\u200b-\u200b\u5b8c\u5584\u200b\u5b83","text":"<p>\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u5df2\u7ecf\u200b\u51c6\u5907\u200b\u597d\u200b\u8fd0\u884c\u200b\u4e86\u200b\uff0c\u200b\u4f46\u662f\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u4e00\u4e9b\u200b\u989d\u5916\u200b\u7684\u200b\u529f\u80fd\u200b\u6765\u200b\u4f7f\u200b\u5176\u200b\u771f\u6b63\u200b\u51c6\u5907\u200b\u597d\u200b\u53d1\u5149\u200b \u2728</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u4e00\u4e9b\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5c1d\u8bd5\u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5c06\u200b\u5176\u200b\u6dfb\u52a0\u200b\u5230\u200b <code>gr.Interface</code> \u200b\u4e2d\u200b\u5b9e\u73b0\u200b :</p> <pre><code>gr.Interface(\n    # ...\n    # \u200b\u5c06\u200b\u6240\u6709\u200b\u5185\u5bb9\u200b\u4fdd\u6301\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u7136\u540e\u200b\u6dfb\u52a0\u200b\n    examples=[[123, 15], [42, 29], [456, 8], [1337, 35]],\n).launch(cache_examples=True) # cache_examples\u200b\u662f\u200b\u53ef\u9009\u200b\u7684\u200b\n</code></pre> <p><code>examples</code> \u200b\u53c2\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u5217\u8868\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5b50\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u9879\u76ee\u200b\u7684\u200b\u987a\u5e8f\u200b\u4e0e\u200b\u6211\u4eec\u200b\u5217\u51fa\u200b\u7684\u200b <code>inputs</code> \u200b\u7684\u200b\u987a\u5e8f\u200b\u76f8\u540c\u200b\u3002\u200b\u6240\u4ee5\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c<code>[seed, num_punks]</code>\u3002\u200b\u8bd5\u4e00\u8bd5\u200b\u5427\u200b\uff01</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u5728\u200b <code>gr.Interface</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>title</code>\u3001<code>description</code> \u200b\u548c\u200b <code>article</code>\u3002\u200b\u6bcf\u4e2a\u200b\u53c2\u6570\u200b\u90fd\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8bd5\u8bd5\u770b\u200b\u53d1\u751f\u200b\u4e86\u200b\u4ec0\u4e48\u200b\ud83d\udc40 <code>article</code> \u200b\u4e5f\u200b\u63a5\u53d7\u200b HTML\uff0c\u200b\u5982\u200b\u524d\u9762\u200b\u7684\u200b\u6307\u5357\u200b\u6240\u8ff0\u200b\uff01</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u5b8c\u6210\u200b\u6240\u6709\u200b\u64cd\u4f5c\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5f97\u5230\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u8fd9\u6837\u200b\u7684\u200b\u7ed3\u679c\u200b :</p> <p>\u200b\u4f9b\u53c2\u8003\u200b\uff0c\u200b\u8fd9\u662f\u200b\u6211\u4eec\u200b\u7684\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b :</p> <pre><code>import torch\nfrom torch import nn\nfrom huggingface_hub import hf_hub_download\nfrom torchvision.utils import save_image\nimport gradio as gr\n\nclass Generator(nn.Module):\n    # \u200b\u5173\u4e8e\u200bnc\u3001nz\u200b\u548c\u200bngf\u200b\u7684\u200b\u89e3\u91ca\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u4e0b\u9762\u200b\u7684\u200b\u94fe\u63a5\u200b\n    # https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#inputs\n    def __init__(self, nc=4, nz=100, ngf=64):\n        super(Generator, self).__init__()\n        self.network = nn.Sequential(\n            nn.ConvTranspose2d(nz, ngf * 4, 3, 1, 0, bias=False),\n            nn.BatchNorm2d(ngf * 4),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 4, ngf * 2, 3, 2, 1, bias=False),\n            nn.BatchNorm2d(ngf * 2),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf * 2, ngf, 4, 2, 0, bias=False),\n            nn.BatchNorm2d(ngf),\n            nn.ReLU(True),\n            nn.ConvTranspose2d(ngf, nc, 4, 2, 1, bias=False),\n            nn.Tanh(),\n        )\n\n    def forward(self, input):\n        output = self.network(input)\n        return output\n\nmodel = Generator()\nweights_path = hf_hub_download('nateraw/cryptopunks-gan', 'generator.pth')\nmodel.load_state_dict(torch.load(weights_path, map_location=torch.device('cpu'))) # \u200b\u5982\u679c\u200b\u60a8\u200b\u6709\u200b\u53ef\u7528\u200b\u7684\u200bGPU\uff0c\u200b\u4f7f\u7528\u200b'cuda'\n\ndef predict(seed, num_punks):\n    torch.manual_seed(seed)\n    z = torch.randn(num_punks, 100, 1, 1)\n    punks = model(z)\n    save_image(punks, \"punks.png\", normalize=True)\n    return 'punks.png'\n\ngr.Interface(\n    predict,\n    inputs=[\n        gr.Slider(0, 1000, label='Seed', default=42),\n        gr.Slider(4, 64, label='Number of Punks', step=1, default=10),\n    ],\n    outputs=\"image\",\n    examples=[[123, 15], [42, 29], [456, 8], [1337, 35]],\n).launch(cache_examples=True)\n</code></pre> <p>\u200b\u606d\u559c\u200b\uff01\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u6210\u529f\u200b\u6784\u5efa\u200b\u4e86\u200b\u81ea\u5df1\u200b\u7684\u200b\u57fa\u4e8e\u200b GAN \u200b\u7684\u200b CryptoPunks \u200b\u751f\u6210\u5668\u200b\uff0c\u200b\u914d\u5907\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65f6\u5c1a\u200b\u7684\u200b Gradio \u200b\u754c\u9762\u200b\uff0c\u200b\u4f7f\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u80fd\u200b\u8f7b\u677e\u200b\u4f7f\u7528\u200b\u3002\u200b\u73b0\u5728\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b Hub \u200b\u4e0a\u200b\u5bfb\u627e\u200b\u66f4\u200b\u591a\u200b\u7684\u200b GANs\uff08\u200b\u6216\u8005\u200b\u81ea\u5df1\u200b\u8bad\u7ec3\u200b\uff09\u200b\u5e76\u200b\u7ee7\u7eed\u200b\u5236\u4f5c\u200b\u66f4\u200b\u591a\u200b\u4ee4\u4eba\u200b\u8d5e\u53f9\u200b\u7684\u200b\u6f14\u793a\u200b\u9879\u76ee\u200b\u3002\ud83e\udd17</p>"},{"location":"cn/07_other-tutorials/creating-a-chatbot/","title":"\u5982\u4f55\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u804a\u5929\u200b\u673a\u5668\u4eba","text":"<p>Tags: NLP, TEXT, CHAT Related spaces: https://huggingface.co/spaces/gradio/chatbot_streaming, https://huggingface.co/spaces/project-baize/Baize-7B,</p>"},{"location":"cn/07_other-tutorials/creating-a-chatbot/#_2","title":"\u7b80\u4ecb","text":"<p>\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u5728\u200b\u81ea\u7136\u8bed\u8a00\u200b\u5904\u7406\u200b (NLP) \u200b\u7814\u7a76\u200b\u548c\u200b\u5de5\u4e1a\u754c\u200b\u88ab\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\u3002\u200b\u7531\u4e8e\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u662f\u200b\u76f4\u63a5\u200b\u7531\u200b\u5ba2\u6237\u200b\u548c\u200b\u6700\u7ec8\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u9a8c\u8bc1\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u5728\u200b\u9762\u5bf9\u200b\u5404\u79cd\u200b\u8f93\u5165\u200b\u63d0\u793a\u200b\u65f6\u200b\u7684\u200b\u884c\u4e3a\u200b\u662f\u5426\u200b\u7b26\u5408\u200b\u9884\u671f\u200b\u81f3\u5173\u91cd\u8981\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b <code>gradio</code>\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u6784\u5efa\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u6a21\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u5e76\u200b\u4e0e\u200b\u7528\u6237\u200b\u5171\u4eab\u200b\uff0c\u200b\u6216\u200b\u4f7f\u7528\u200b\u76f4\u89c2\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u56fe\u5f62\u754c\u9762\u200b\u81ea\u5df1\u200b\u5c1d\u8bd5\u200b\u3002</p> <p>\u200b\u672c\u200b\u6559\u7a0b\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Gradio \u200b\u5236\u4f5c\u200b\u51e0\u79cd\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7528\u6237\u754c\u9762\u200b\uff1a\u200b\u9996\u5148\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u6587\u672c\u200b\u663e\u793a\u200b\u754c\u9762\u200b\uff0c\u200b\u5176\u6b21\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u6d41\u5f0f\u200b\u6587\u672c\u200b\u54cd\u5e94\u200b\u7684\u200b\u754c\u9762\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u662f\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u5a92\u4f53\u6587\u4ef6\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u3002\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u754c\u9762\u200b\u5c06\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p>$ \u200b\u6f14\u793a\u200b _ \u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b _ \u200b\u6d41\u5f0f\u200b</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1a\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>gradio.Blocks</code> \u200b\u7c7b\u6765\u200b\u6784\u5efa\u200b\u6211\u4eec\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u6f14\u793a\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u5bf9\u6b64\u200b\u8fd8\u200b\u4e0d\u200b\u719f\u6089\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5148\u200b\u9605\u8bfb\u200b Blocks \u200b\u6307\u5357\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200b Gradio\uff1a<code>pip install --upgrade gradio</code>\u3002</p>"},{"location":"cn/07_other-tutorials/creating-a-chatbot/#_3","title":"\u7b80\u5355\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u6f14\u793a","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4ece\u200b\u91cd\u65b0\u200b\u521b\u5efa\u200b\u4e0a\u9762\u200b\u7684\u200b\u7b80\u5355\u200b\u6f14\u793a\u200b\u5f00\u59cb\u200b\u3002\u200b\u6b63\u5982\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5df2\u7ecf\u200b\u6ce8\u610f\u200b\u5230\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u673a\u5668\u4eba\u200b\u53ea\u662f\u200b\u968f\u673a\u200b\u5bf9\u200b\u4efb\u4f55\u200b\u8f93\u5165\u200b\u56de\u590d\u200b \" \u200b\u4f60\u597d\u200b\u5417\u200b\uff1f\"\u3001\" \u200b\u6211\u7231\u4f60\u200b \" \u200b\u6216\u200b \" \u200b\u6211\u200b\u975e\u5e38\u200b\u997f\u200b \"\u3002\u200b\u8fd9\u662f\u200b\u4f7f\u7528\u200b Gradio \u200b\u521b\u5efa\u200b\u6b64\u200b\u6f14\u793a\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> <p>$ \u200b\u4ee3\u7801\u200b _ \u200b\u7b80\u5355\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b</p> <p>\u200b\u8fd9\u91cc\u200b\u6709\u200b\u4e09\u4e2a\u200b Gradio \u200b\u7ec4\u4ef6\u200b\uff1a</p> <ul> <li>\u200b\u4e00\u4e2a\u200b <code>Chatbot</code>\uff0c\u200b\u5176\u503c\u200b\u5c06\u200b\u6574\u4e2a\u200b\u5bf9\u8bdd\u200b\u7684\u200b\u5386\u53f2\u8bb0\u5f55\u200b\u4f5c\u4e3a\u200b\u7528\u6237\u200b\u548c\u200b\u673a\u5668\u4eba\u200b\u4e4b\u95f4\u200b\u7684\u200b\u54cd\u5e94\u200b\u5bf9\u200b\u5217\u8868\u200b\u5b58\u50a8\u200b\u3002</li> <li>\u200b\u4e00\u4e2a\u200b\u6587\u672c\u6846\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5176\u4e2d\u200b\u952e\u5165\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6d88\u606f\u200b\uff0c\u200b\u7136\u540e\u200b\u6309\u4e0b\u200b Enter/ \u200b\u63d0\u4ea4\u200b\u4ee5\u200b\u89e6\u53d1\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u54cd\u5e94\u200b</li> <li>\u200b\u4e00\u4e2a\u200b <code>ClearButton</code> \u200b\u6309\u94ae\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6e05\u9664\u200b\u6587\u672c\u6846\u200b\u548c\u200b\u6574\u4e2a\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u5386\u53f2\u8bb0\u5f55\u200b</li> </ul> <p>\u200b\u6211\u4eec\u200b\u6709\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b <code>respond()</code> \u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b83\u200b\u63a5\u6536\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u6574\u4e2a\u200b\u5386\u53f2\u8bb0\u5f55\u200b\uff0c\u200b\u9644\u52a0\u200b\u4e00\u4e2a\u200b\u968f\u673a\u200b\u6d88\u606f\u200b\uff0c\u200b\u7b49\u5f85\u200b 1 \u200b\u79d2\u200b\uff0c\u200b\u7136\u540e\u200b\u8fd4\u56de\u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b\u804a\u5929\u200b\u5386\u53f2\u8bb0\u5f55\u200b\u3002<code>respond()</code> \u200b\u51fd\u6570\u200b\u5728\u200b\u8fd4\u56de\u200b\u65f6\u200b\u8fd8\u200b\u6e05\u9664\u200b\u4e86\u200b\u6587\u672c\u6846\u200b\u3002</p> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\uff0c\u200b\u60a8\u200b\u4f1a\u200b\u7528\u200b\u81ea\u5df1\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u51fd\u6570\u200b\u66ff\u6362\u200b <code>respond()</code>\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u53ef\u80fd\u200b\u8c03\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u6216\u200b API \u200b\u6765\u200b\u751f\u6210\u200b\u54cd\u5e94\u200b\u3002</p> <p>$ \u200b\u6f14\u793a\u200b _ \u200b\u7b80\u5355\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b</p>"},{"location":"cn/07_other-tutorials/creating-a-chatbot/#_4","title":"\u4e3a\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u6dfb\u52a0\u200b\u6d41\u5f0f\u200b\u54cd\u5e94","text":"<p>\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u51e0\u79cd\u200b\u65b9\u5f0f\u200b\u6765\u200b\u6539\u8fdb\u200b\u4e0a\u8ff0\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u7528\u6237\u200b\u4f53\u9a8c\u200b\u3002\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6d41\u5f0f\u200b\u4f20\u8f93\u200b\u54cd\u5e94\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u7528\u6237\u200b\u4e0d\u5fc5\u200b\u7b49\u5f85\u200b\u592a\u200b\u957f\u65f6\u95f4\u200b\u624d\u80fd\u200b\u751f\u6210\u200b\u6d88\u606f\u200b\u3002\u200b\u5176\u6b21\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u7528\u6237\u200b\u7684\u200b\u6d88\u606f\u200b\u5728\u200b\u804a\u5929\u200b\u5386\u53f2\u8bb0\u5f55\u200b\u4e2d\u200b\u7acb\u5373\u200b\u51fa\u73b0\u200b\uff0c\u200b\u540c\u65f6\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u54cd\u5e94\u200b\u6b63\u5728\u200b\u751f\u6210\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5b9e\u73b0\u200b\u8fd9\u200b\u4e00\u70b9\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> <p>$code_chatbot_streaming</p> <p>\u200b\u5f53\u200b\u7528\u6237\u200b\u63d0\u4ea4\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6d88\u606f\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u4f7f\u7528\u200b <code>.then()</code> \u200b\u4e0e\u200b\u4e09\u4e2a\u200b\u4e8b\u4ef6\u200b\u4e8b\u4ef6\u200b \u200b\u94fe\u200b \u200b\u8d77\u6765\u200b\uff1a</p> <ol> <li> <p>\u200b\u7b2c\u4e00\u4e2a\u200b\u65b9\u6cd5\u200b <code>user()</code> \u200b\u7528\u200b\u7528\u6237\u200b\u6d88\u606f\u200b\u66f4\u65b0\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u5e76\u200b\u6e05\u9664\u200b\u8f93\u5165\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u8fd8\u200b\u4f7f\u200b\u8f93\u5165\u200b\u5b57\u200b\u6bb5\u200b\u5904\u4e8e\u200b\u975e\u200b\u4ea4\u4e92\u200b\u72b6\u6001\u200b\uff0c\u200b\u4ee5\u9632\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u6b63\u5728\u200b\u54cd\u5e94\u200b\u65f6\u200b\u7528\u6237\u200b\u53d1\u9001\u200b\u53e6\u200b\u4e00\u6761\u200b\u6d88\u606f\u200b\u3002\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u7acb\u5373\u200b\u53d1\u751f\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u8bbe\u7f6e\u200b <code>queue=False</code>\uff0c\u200b\u4ee5\u200b\u8df3\u200b\u8fc7\u200b\u4efb\u4f55\u200b\u53ef\u80fd\u200b\u7684\u200b\u961f\u5217\u200b\u3002\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u5386\u53f2\u8bb0\u5f55\u200b\u9644\u52a0\u200b\u4e86\u200b<code>(user_message, None)</code>\uff0c\u200b\u5176\u4e2d\u200b\u7684\u200b <code>None</code> \u200b\u8868\u793a\u200b\u673a\u5668\u4eba\u200b\u672a\u200b\u4f5c\u51fa\u200b\u54cd\u5e94\u200b\u3002</p> </li> <li> <p>\u200b\u7b2c\u4e8c\u4e2a\u200b\u65b9\u6cd5\u200b <code>bot()</code> \u200b\u4f7f\u7528\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u54cd\u5e94\u200b\u66f4\u65b0\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u5386\u53f2\u8bb0\u5f55\u200b\u3002\u200b\u6211\u4eec\u200b\u4e0d\u662f\u200b\u521b\u5efa\u200b\u65b0\u200b\u6d88\u606f\u200b\uff0c\u200b\u800c\u662f\u200b\u5c06\u200b\u5148\u524d\u200b\u521b\u5efa\u200b\u7684\u200b <code>None</code> \u200b\u6d88\u606f\u200b\u66ff\u6362\u200b\u4e3a\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u54cd\u5e94\u200b\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u9010\u4e2a\u200b\u5b57\u7b26\u200b\u6784\u9020\u200b\u6d88\u606f\u200b\u5e76\u200b <code>yield</code> \u200b\u6b63\u5728\u200b\u6784\u5efa\u200b\u7684\u200b\u4e2d\u95f4\u200b\u8f93\u51fa\u200b\u3002Gradio \u200b\u4f1a\u200b\u81ea\u52a8\u200b\u5c06\u200b\u5e26\u6709\u200b <code>yield</code> \u200b\u5173\u952e\u5b57\u200b\u7684\u200b\u4efb\u4f55\u200b\u51fd\u6570\u200b \u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6d41\u5f0f\u200b\u8f93\u51fa\u200b\u63a5\u53e3\u200b\u3002</p> </li> <li> <p>\u200b\u7b2c\u4e09\u4e2a\u200b\u65b9\u6cd5\u200b\u4f7f\u200b\u8f93\u5165\u200b\u5b57\u200b\u6bb5\u200b\u518d\u6b21\u200b\u53ef\u4ee5\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5411\u200b\u673a\u5668\u4eba\u200b\u53d1\u9001\u200b\u53e6\u200b\u4e00\u6761\u200b\u6d88\u606f\u200b\u3002</p> </li> </ol> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\uff0c\u200b\u60a8\u200b\u4f1a\u200b\u7528\u200b\u81ea\u5df1\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u51fd\u6570\u200b\u66ff\u6362\u200b <code>bot()</code>\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u53ef\u80fd\u200b\u8c03\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u6216\u200b API \u200b\u6765\u200b\u751f\u6210\u200b\u54cd\u5e94\u200b\u3002</p> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u8fd0\u884c\u200b <code>demo.queue()</code> \u200b\u542f\u7528\u200b\u6392\u961f\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u6d41\u5f0f\u200b\u4e2d\u95f4\u200b\u8f93\u51fa\u200b\u662f\u200b\u5fc5\u9700\u200b\u7684\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6eda\u52a8\u200b\u5230\u200b\u672c\u200b\u9875\u9762\u200b\u9876\u90e8\u200b\u7684\u200b\u6f14\u793a\u200b\u6765\u200b\u5c1d\u8bd5\u200b\u6539\u8fdb\u200b\u540e\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/creating-a-chatbot/#markdown","title":"\u6dfb\u52a0\u200b Markdown\u3001\u200b\u56fe\u7247\u200b\u3001\u200b\u97f3\u9891\u200b\u6216\u200b\u89c6\u9891","text":"<p><code>gr.Chatbot</code> \u200b\u7ec4\u4ef6\u200b\u652f\u6301\u200b\u5305\u542b\u200b\u52a0\u7c97\u200b\u3001\u200b\u659c\u4f53\u200b\u548c\u200b\u4ee3\u7801\u200b\u7b49\u200b\u4e00\u90e8\u5206\u200b Markdown \u200b\u529f\u80fd\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u200b\u7c97\u4f53\u200b\u56de\u590d\u200b\u7528\u6237\u200b\u7684\u200b\u6d88\u606f\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b That's cool!\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>def bot(history):\n    response = \"**That's cool!**\"\n    history[-1][1] = response\n    return history\n</code></pre> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5b83\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u56fe\u7247\u200b\u3001\u200b\u97f3\u9891\u200b\u548c\u200b\u89c6\u9891\u200b\u7b49\u200b\u5a92\u4f53\u6587\u4ef6\u200b\u3002\u200b\u8981\u200b\u4f20\u9012\u200b\u5a92\u4f53\u6587\u4ef6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5fc5\u987b\u200b\u5c06\u200b\u6587\u4ef6\u200b\u4f5c\u4e3a\u200b\u4e24\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u5143\u7ec4\u200b\u4f20\u9012\u200b\uff0c\u200b\u5982\u200b<code>(filepath, alt_text)</code> \u200b\u6240\u793a\u200b\u3002<code>alt_text</code> \u200b\u662f\u200b\u53ef\u9009\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u53ea\u200b\u4f20\u5165\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u5143\u7ec4\u200b<code>(filepath,)</code>\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>def add_file(history, file):\n    history = history + [((file.name,), None)]\n    return history\n</code></pre> <p>\u200b\u5c06\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u653e\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u591a\u200b\u6a21\u6001\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u6587\u672c\u6846\u200b\u4f9b\u200b\u7528\u6237\u200b\u63d0\u4ea4\u200b\u6587\u672c\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u4e0a\u4f20\u200b\u6309\u94ae\u200b\u4f9b\u200b\u63d0\u4ea4\u200b\u56fe\u50cf\u200b / \u200b\u97f3\u9891\u200b / \u200b\u89c6\u9891\u6587\u4ef6\u200b\u3002\u200b\u4f59\u4e0b\u200b\u7684\u200b\u4ee3\u7801\u200b\u770b\u8d77\u6765\u200b\u4e0e\u200b\u4e4b\u524d\u200b\u7684\u200b\u4ee3\u7801\u200b\u51e0\u4e4e\u200b\u76f8\u540c\u200b\uff1a</p> <p>$code_chatbot_multimodal $demo_chatbot_multimodal</p> <p>\u200b\u4f60\u200b\u5b8c\u6210\u200b\u4e86\u200b\uff01\u200b\u8fd9\u200b\u5c31\u662f\u200b\u6784\u5efa\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u6a21\u578b\u200b\u754c\u9762\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u4ee3\u7801\u200b\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u7ed3\u675f\u200b\u6211\u4eec\u200b\u7684\u200b\u6307\u5357\u200b\uff0c\u200b\u5e76\u200b\u63d0\u4f9b\u200b\u4e00\u4e9b\u200b\u5728\u200b Spaces \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u4ee5\u200b\u8ba9\u200b\u4f60\u200b\u4e86\u89e3\u200b\u5176\u4ed6\u200b\u53ef\u80fd\u6027\u200b\uff1a</p> <ul> <li>project-baize/Baize-7B\uff1a\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u505c\u6b62\u200b\u751f\u6210\u200b\u548c\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u54cd\u5e94\u200b\u529f\u80fd\u200b\u7684\u200b\u6837\u5f0f\u200b\u5316\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\u3002</li> <li>MAGAer13/mPLUG-Owl\uff1a\u200b\u4e00\u4e2a\u591a\u200b\u6a21\u6001\u200b\u804a\u5929\u200b\u673a\u5668\u4eba\u200b\uff0c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5bf9\u200b\u54cd\u5e94\u200b\u8fdb\u884c\u200b\u6295\u7968\u200b\u3002</li> </ul>"},{"location":"cn/07_other-tutorials/creating-a-new-component/","title":"\u5982\u4f55\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7ec4\u4ef6","text":""},{"location":"cn/07_other-tutorials/creating-a-new-component/#_2","title":"\u7b80\u4ecb","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u65e8\u5728\u200b\u8bf4\u660e\u200b\u5982\u4f55\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u8be5\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8be5\u200b\u6307\u5357\u200b\u5c06\u200b\u901a\u8fc7\u200b\u4ee3\u7801\u200b\u7247\u6bb5\u200b\u9010\u6b65\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u6dfb\u52a0\u200bColorPicker\u200b\u7ec4\u4ef6\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#_3","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u6309\u7167\u200bCONTRIBUTING.md\u200b\u6307\u5357\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u672c\u5730\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\uff08\u200b\u5305\u62ec\u200b\u5ba2\u6237\u7aef\u200b\u548c\u200b\u670d\u52a1\u5668\u7aef\u200b\uff09\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5728\u200b Gradio \u200b\u4e0a\u200b\u521b\u5efa\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b Python \u200b\u7c7b\u200b\u5e76\u200b\u5bfc\u5165\u200b\u5b83\u200b</li> <li>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b Svelte \u200b\u7ec4\u4ef6\u200b</li> <li>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6f14\u793a\u200b</li> </ol>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#1-python","title":"1. \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b Python \u200b\u7c7b\u200b\u5e76\u200b\u5bfc\u5165\u200b\u5b83","text":"<p>\u200b\u9996\u5148\u200b\u8981\u200b\u505a\u200b\u7684\u200b\u662f\u200b\u5728\u200bcomponents.py\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7c7b\u200b\u3002\u200b\u8fd9\u4e2a\u200b Python \u200b\u7c7b\u200b\u5e94\u8be5\u200b\u7ee7\u627f\u200b\u81ea\u200b\u4e00\u7cfb\u5217\u200b\u7684\u200b\u57fa\u672c\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5e94\u8be5\u200b\u6839\u636e\u200b\u8981\u200b\u6dfb\u52a0\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u7c7b\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b\u8f93\u5165\u200b\u3001\u200b\u8f93\u51fa\u200b\u6216\u200b\u9759\u6001\u200b\u7ec4\u4ef6\u200b\uff09\u200b\u5c06\u200b\u5176\u200b\u653e\u7f6e\u200b\u5728\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u6b63\u786e\u200b\u90e8\u5206\u200b\u3002 \u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u5efa\u8bae\u200b\u53c2\u8003\u200b\u73b0\u6709\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff08\u200b\u4f8b\u5982\u200bTextBox\uff09\uff0c\u200b\u5c06\u200b\u5176\u200b\u4ee3\u7801\u200b\u590d\u5236\u200b\u4e3a\u200b\u9aa8\u67b6\u200b\uff0c\u200b\u7136\u540e\u200b\u6839\u636e\u200b\u5b9e\u9645\u200b\u60c5\u51b5\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\u3002</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\u6dfb\u52a0\u200b\u5230\u200bcomponents.py\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b ColorPicker \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u7c7b\u200b\uff1a</p> <pre><code>@document()\nclass ColorPicker(Changeable, Submittable, IOComponent):\n    \"\"\"\n    \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u989c\u8272\u200b\u9009\u62e9\u5668\u200b\uff0c\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u989c\u8272\u200b\u4f5c\u4e3a\u200b\u5b57\u7b26\u4e32\u200b\u8f93\u5165\u200b\u3002\n    \u200b\u9884\u5904\u7406\u200b\uff1a\u200b\u5c06\u200b\u9009\u62e9\u200b\u7684\u200b\u989c\u8272\u200b\u503c\u200b\u4f5c\u4e3a\u200b{str}\u200b\u4f20\u9012\u200b\u7ed9\u200b\u51fd\u6570\u200b\u3002\n    \u200b\u540e\u5904\u7406\u200b\uff1a\u200b\u671f\u671b\u200b\u4ece\u200b\u51fd\u6570\u200b\u4e2d\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b{str}\uff0c\u200b\u5e76\u200b\u5c06\u200b\u989c\u8272\u200b\u9009\u62e9\u5668\u200b\u7684\u200b\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5b83\u200b\u3002\n    \u200b\u793a\u4f8b\u200b\u683c\u5f0f\u200b\uff1a\u200b\u8868\u793a\u200b\u989c\u8272\u200b\u7684\u200b\u5341\u516d\u8fdb\u5236\u200b{str}\uff0c\u200b\u4f8b\u5982\u200b\u7ea2\u8272\u200b\u7684\u200b\"#ff0000\"\u3002\n    \u200b\u6f14\u793a\u200b\uff1acolor_picker\uff0ccolor_generator\n    \"\"\"\n\n    def __init__(\n        self,\n        value: str = None,\n        *,\n        label: Optional[str] = None,\n        show_label: bool = True,\n        interactive: Optional[bool] = None,\n        visible: bool = True,\n        elem_id: Optional[str] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Parameters:\n        \"\"\"\n        Parameters:\n            value: default text to provide in color picker.\n            label: component name in interface.\n            show_label: if True, will display label.\n            interactive: if True, will be rendered as an editable color picker; if False, editing will be disabled. If not provided, this is inferred based on whether the component is used as an input or output.\n            visible: If False, component will be hidden.\n            elem_id: An optional string that is assigned as the id of this component in the HTML DOM. Can be used for targeting CSS styles.\n        \"\"\"\n        self.value = self.postprocess(value)\n        self.cleared_value = \"#000000\"\n        self.test_input = value\n        IOComponent.__init__(\n            self,\n            label=label,\n            show_label=show_label,\n            interactive=interactive,\n            visible=visible,\n            elem_id=elem_id,\n            **kwargs,\n        )\n\n    def get_config(self):\n        return {\n            \"value\": self.value,\n            **IOComponent.get_config(self),\n        }\n\n    @staticmethod\n    def update(\n        value: Optional[Any] = None,\n        label: Optional[str] = None,\n        show_label: Optional[bool] = None,\n        visible: Optional[bool] = None,\n        interactive: Optional[bool] = None,\n    ):\n        return {\n            \"value\": value,\n            \"label\": label,\n            \"show_label\": show_label,\n            \"visible\": visible,\n            \"interactive\": interactive,\n            \"__type__\": \"update\",\n        }\n\n    # \u200b\u8f93\u5165\u200b\u529f\u80fd\u200b\n    def preprocess(self, x: str | None) -&gt; Any:\n        \"\"\"\n        Any preprocessing needed to be performed on function input.\n        Parameters:\n        x (str): text\n        Returns:\n        (str): text\n        \"\"\"\n        if x is None:\n            return None\n        else:\n            return str(x)\n\n    def preprocess_example(self, x: str | None) -&gt; Any:\n        \"\"\"\n        \u200b\u5728\u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e3b\u200b\u51fd\u6570\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5bf9\u200b\u793a\u4f8b\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u9884\u5904\u7406\u200b\u3002\n        \"\"\"\n        if x is None:\n            return None\n        else:\n            return str(x)\n\n    # \u200b\u8f93\u51fa\u200b\u529f\u80fd\u200b\n    def postprocess(self, y: str | None):\n        \"\"\"\n        Any postprocessing needed to be performed on function output.\n        Parameters:\n        y (str | None): text\n        Returns:\n        (str | None): text\n        \"\"\"\n        if y is None:\n            return None\n        else:\n            return str(y)\n\n    def deserialize(self, x):\n        \"\"\"\n        \u200b\u5c06\u200b\u4ece\u200b\u8c03\u7528\u200b\u63a5\u53e3\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u8f93\u51fa\u200b\uff08\u200b\u4f8b\u5982\u200bbase64\u200b\u8868\u793a\u200b\uff09\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u8f93\u51fa\u200b\u7684\u200b\u4eba\u7c7b\u200b\u53ef\u200b\u8bfb\u200b\u7248\u672c\u200b\uff08\u200b\u56fe\u50cf\u200b\u7684\u200b\u8def\u5f84\u200b\u7b49\u200b\uff09\n        \"\"\"\n        return x\n</code></pre> <p>\u200b\u4e00\u65e6\u200b\u5b9a\u4e49\u200b\u5b8c\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u5728\u200b__init__\u200b\u6a21\u5757\u200b\u7c7b\u4e2d\u200b\u5bfc\u5165\u200b\u65b0\u7c7b\u200b\uff0c\u200b\u4ee5\u4f7f\u200b\u5176\u200b\u53ef\u89c1\u200b\u3002</p> <pre><code>from gradio.components import (\n    ...\n    ColorPicker,\n    ...\n)\n</code></pre>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#11-python","title":"1.1 \u200b\u4e3a\u200b Python \u200b\u7c7b\u200b\u7f16\u5199\u200b\u5355\u5143\u6d4b\u8bd5","text":"<p>\u200b\u5728\u200b\u5f00\u53d1\u65b0\u200b\u7ec4\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u8fd8\u200b\u5e94\u4e3a\u200b\u5176\u200b\u7f16\u5199\u200b\u4e00\u5957\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u6d4b\u8bd5\u200b\u5e94\u8be5\u200b\u653e\u5728\u200bgradio/test/test_components.py\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002\u200b\u540c\u6837\u200b\uff0c\u200b\u5982\u4e0a\u6240\u8ff0\u200b\uff0c\u200b\u53c2\u8003\u200b\u5176\u4ed6\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6d4b\u8bd5\u200b\uff08\u200b\u4f8b\u5982\u200bTextbox\uff09\u200b\u5e76\u200b\u6dfb\u52a0\u200b\u5c3d\u53ef\u80fd\u200b\u591a\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u4ee5\u200b\u6d4b\u8bd5\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u65b9\u9762\u200b\u548c\u200b\u529f\u80fd\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e3a\u200b ColorPicker \u200b\u7ec4\u4ef6\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u6d4b\u8bd5\u200b\uff1a</p> <pre><code>class TestColorPicker(unittest.TestCase):\n    def test_component_functions(self):\n        \"\"\"\n        Preprocess, postprocess, serialize, save_flagged, restore_flagged, tokenize, get_config\n        \"\"\"\n        color_picker_input = gr.ColorPicker()\n        self.assertEqual(color_picker_input.preprocess(\"#000000\"), \"#000000\")\n        self.assertEqual(color_picker_input.preprocess_example(\"#000000\"), \"#000000\")\n        self.assertEqual(color_picker_input.postprocess(None), None)\n        self.assertEqual(color_picker_input.postprocess(\"#FFFFFF\"), \"#FFFFFF\")\n        self.assertEqual(color_picker_input.serialize(\"#000000\", True), \"#000000\")\n\n        color_picker_input.interpretation_replacement = \"unknown\"\n\n        self.assertEqual(\n            color_picker_input.get_config(),\n            {\n                \"value\": None,\n                \"show_label\": True,\n                \"label\": None,\n                \"style\": {},\n                \"elem_id\": None,\n                \"visible\": True,\n                \"interactive\": None,\n                \"name\": \"colorpicker\",\n            },\n        )\n\n    def test_in_interface_as_input(self):\n        \"\"\"\n        \u200b\u63a5\u53e3\u200b\u3001\u200b\u5904\u7406\u200b\u3001\u200b\u89e3\u91ca\u200b\n        \"\"\"\n        iface = gr.Interface(lambda x: x, \"colorpicker\", \"colorpicker\")\n        self.assertEqual(iface.process([\"#000000\"]), [\"#000000\"])\n\n    def test_in_interface_as_output(self):\n        \"\"\"\n        \u200b\u63a5\u53e3\u200b\u3001\u200b\u5904\u7406\u200b\n\n        \"\"\"\n        iface = gr.Interface(lambda x: x, \"colorpicker\", gr.ColorPicker())\n        self.assertEqual(iface.process([\"#000000\"]), [\"#000000\"])\n\n    def test_static(self):\n        \"\"\"\n        \u200b\u540e\u5904\u7406\u200b\n        \"\"\"\n        component = gr.ColorPicker(\"#000000\")\n        self.assertEqual(component.get_config().get(\"value\"), \"#000000\")\n</code></pre>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#2-svelte","title":"2. \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b Svelte \u200b\u7ec4\u4ef6","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u770b\u770b\u200b\u521b\u5efa\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u524d\u7aef\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e0e\u5176\u200b Python \u200b\u4ee3\u7801\u200b\u6620\u5c04\u200b\u8d77\u6765\u200b\u7684\u200b\u6b65\u9aa4\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200b js \u200b\u6587\u4ef6\u5939\u200b \u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b UI-side Svelte \u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u786e\u5b9a\u200b\u8981\u200b\u653e\u7f6e\u200b\u5728\u200b\u4ec0\u4e48\u200b\u5730\u65b9\u200b\u3002\u200b\u9009\u9879\u200b\u5305\u62ec\u200b\uff1a\u200b\u521b\u5efa\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u5305\u200b\uff08\u200b\u5982\u679c\u200b\u4e0e\u200b\u73b0\u6709\u200b\u7ec4\u4ef6\u200b\u5b8c\u5168\u200b\u4e0d\u540c\u200b\uff09\uff0c\u200b\u6216\u200b\u5c06\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u6dfb\u52a0\u200b\u5230\u200b\u73b0\u6709\u200b\u5305\u4e2d\u200b\uff0c\u200b\u4f8b\u5982\u200b form \u200b\u5305\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0cColorPicker \u200b\u7ec4\u4ef6\u200b\u88ab\u200b\u5305\u542b\u200b\u5728\u200b form \u200b\u5305\u4e2d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u4e0e\u200b\u5df2\u200b\u5b58\u5728\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u76f8\u4f3c\u200b\u3002</li> <li>\u200b\u5728\u200b\u60a8\u200b\u5c06\u200b Svelte \u200b\u7ec4\u4ef6\u200b\u653e\u7f6e\u200b\u7684\u200b\u5305\u200b\u7684\u200b src \u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u9002\u5f53\u200b\u540d\u79f0\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6ce8\u610f\u200b\uff1a\u200b\u540d\u79f0\u200b\u5fc5\u987b\u200b\u4ee5\u200b\u5927\u5199\u5b57\u6bcd\u200b\u5f00\u5934\u200b\u3002\u200b\u8fd9\u662f\u200b\u201c\u200b\u6838\u5fc3\u200b\u201d\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u662f\u200b\u6ca1\u6709\u200b Gradio \u200b\u7279\u5b9a\u200b\u529f\u80fd\u200b\u4e86\u89e3\u200b\u7684\u200b\u901a\u7528\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u6700\u521d\u200b\uff0c\u200b\u5c06\u200b\u4efb\u4f55\u200b\u6587\u672c\u200b /HTML \u200b\u6dfb\u52a0\u200b\u5230\u200b\u6b64\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u7ec4\u4ef6\u200b\u5448\u73b0\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\u3002ColorPicker \u200b\u7684\u200b Svelte \u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</li> </ul> <pre><code>&lt;script lang=\"ts\"&gt;\n    import { createEventDispatcher } from \"svelte\";\n    import { get_styles } from \"@gradio/utils\";\n    import { BlockTitle } from \"@gradio/atoms\";\n    import type { Styles } from \"@gradio/utils\";\n\n    export let value: string = \"#000000\";\n    export let style: Styles = {};\n    export let label: string;\n    export let disabled = false;\n    export let show_label: boolean = true;\n\n    $: value;\n    $: handle_change(value);\n\n    const dispatch = createEventDispatcher&lt;{\n        change: string;\n        submit: undefined;\n    }&gt;();\n\n    function handle_change(val: string) {\n        dispatch(\"change\", val);\n    }\n\n    $: ({ styles } = get_styles(style, [\"rounded\", \"border\"]));\n&lt;/script&gt;\n\n&lt;!-- svelte-ignore a11y-label-has-associated-control --&gt;\n&lt;label class=\"block\"&gt;\n    &lt;BlockTitle {show_label}&gt;{label}&lt;/BlockTitle&gt;\n    &lt;input\n        type=\"color\"\n        class=\"gr-box-unrounded {classes}\"\n        bind:value\n        {disabled}\n    /&gt;\n&lt;/label&gt;\n</code></pre> <ul> <li>\u200b\u901a\u8fc7\u200b\u6267\u884c\u200b <code>export { default as FileName } from \"./FileName.svelte\"</code>\uff0c\u200b\u5728\u200b\u60a8\u200b\u5c06\u200b Svelte \u200b\u7ec4\u4ef6\u200b\u653e\u7f6e\u200b\u7684\u200b\u5305\u200b\u7684\u200b index.ts \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5bfc\u51fa\u200b\u6b64\u200b\u6587\u4ef6\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b index.ts \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5bfc\u51fa\u200b\u4e86\u200b ColorPicker \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u901a\u8fc7\u200b <code>export { default as ColorPicker } from \"./ColorPicker.svelte\";</code> \u200b\u6267\u884c\u200b\u5bfc\u51fa\u200b\u3002</li> <li>\u200b\u521b\u5efa\u200b js/app/src/components \u200b\u4e2d\u200b\u7684\u200b Gradio \u200b\u7279\u5b9a\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b Gradio \u200b\u5305\u88c5\u200b\u5668\u200b\uff0c\u200b\u5904\u7406\u200b\u5e93\u200b\u7684\u200b\u7279\u5b9a\u200b\u903b\u8f91\u200b\uff0c\u200b\u5c06\u200b\u5fc5\u8981\u200b\u7684\u200b\u6570\u636e\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6838\u5fc3\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u9644\u52a0\u200b\u4efb\u4f55\u200b\u5fc5\u8981\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u76d1\u542c\u5668\u200b\u3002\u200b\u590d\u5236\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\uff0c\u200b\u91cd\u65b0\u547d\u540d\u200b\u5e76\u200b\u7f16\u8f91\u200b\u5176\u4e2d\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4fdd\u6301\u200b\u7ed3\u6784\u200b\u4e0d\u53d8\u200b\u3002</li> </ul> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u62e5\u6709\u200b\u4e09\u4e2a\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u7528\u4e8e\u200b Svelte \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5177\u4f53\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>&lt;svelte:options accessors={true} /&gt;\n\n&lt;script lang=\"ts\"&gt;\n    import { ColorPicker } from \"@gradio/form\";\n    import { Block } from \"@gradio/atoms\";\n    import StatusTracker from \"../StatusTracker/StatusTracker.svelte\";\n    import type { LoadingStatus } from \"../StatusTracker/types\";\n    import type { Styles } from \"@gradio/utils\";\n\n    export let label: string = \"ColorPicker\";\n    export let elem_id: string = \"\";\n    export let visible: boolean = true;\n    export let value: string;\n    export let form_position: \"first\" | \"last\" | \"mid\" | \"single\" = \"single\";\n    export let show_label: boolean;\n\n    export let style: Styles = {};\n\n    export let loading_status: LoadingStatus;\n\n    export let interactive: boolean;\n&lt;/script&gt;\n\n&lt;Block\n    {visible}\n    {form_position}\n    {elem_id}\n    disable={typeof style.container === \"boolean\" &amp;&amp; !style.container}\n&gt;\n    &lt;StatusTracker {...loading_status} /&gt;\n\n    &lt;ColorPicker\n        {style}\n        bind:value\n        {label}\n        {show_label}\n        on:change\n        on:submit\n        disabled={!interactive}\n    /&gt;\n&lt;/Block&gt;\n</code></pre> <p>\u200b\u7b2c\u4e8c\u4e2a\u200b\u6587\u4ef6\u200b\u5305\u542b\u200b\u4e86\u200b\u524d\u7aef\u200b\u7684\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u4f8b\u5982\u200b ColorPicker \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6d4b\u8bd5\u200b\uff1a</p> <pre><code>import { test, describe, assert, afterEach } from \"vitest\";\nimport { cleanup, render } from \"@gradio/tootils\";\n\nimport ColorPicker from \"./ColorPicker.svelte\";\nimport type { LoadingStatus } from \"../StatusTracker/types\";\n\nconst loading_status = {\n    eta: 0,\n    queue_position: 1,\n    status: \"complete\" as LoadingStatus[\"status\"],\n    scroll_to_output: false,\n    visible: true,\n    fn_index: 0\n};\n\ndescribe(\"ColorPicker\", () =&gt; {\n    afterEach(() =&gt; cleanup());\n\n    test(\"renders provided value\", () =&gt; {\n        const { getByDisplayValue } = render(ColorPicker, {\n            loading_status,\n            show_label: true,\n            interactive: true,\n            value: \"#000000\",\n            label: \"ColorPicker\"\n        });\n\n        const item: HTMLInputElement = getByDisplayValue(\"#000000\");\n        assert.equal(item.value, \"#000000\");\n    });\n\n    test(\"changing the color should update the value\", async () =&gt; {\n        const { component, getByDisplayValue } = render(ColorPicker, {\n            loading_status,\n            show_label: true,\n            interactive: true,\n            value: \"#000000\",\n            label: \"ColorPicker\"\n        });\n\n        const item: HTMLInputElement = getByDisplayValue(\"#000000\");\n\n        assert.equal(item.value, \"#000000\");\n\n        await component.$set({\n            value: \"#FFFFFF\"\n        });\n\n        assert.equal(component.value, \"#FFFFFF\");\n    });\n});\n</code></pre> <p>The third one is the index.ts file:</p> <pre><code>export { default as Component } from \"./ColorPicker.svelte\";\nexport const modes = [\"static\", \"dynamic\"];\n</code></pre> <ul> <li><code>directory.ts</code> \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6620\u5c04\u200b\u3002\u200b\u590d\u5236\u200b\u5e76\u200b\u7c98\u8d34\u200b\u4efb\u4f55\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6620\u5c04\u200b\u884c\u200b\uff0c\u200b\u5e76\u200b\u7f16\u8f91\u200b\u5176\u200b\u6587\u672c\u200b\u3002\u200b\u952e\u540d\u200b\u5fc5\u987b\u200b\u662f\u200b Python \u200b\u5e93\u4e2d\u200b\u5b9e\u9645\u200b\u7ec4\u4ef6\u200b\u540d\u79f0\u200b\u7684\u200b\u5c0f\u5199\u200b\u7248\u672c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5bf9\u4e8e\u200b ColorPicker \u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u6620\u5c04\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</li> </ul> <pre><code>export const component_map = {\n...\ncolorpicker: () =&gt; import(\"./ColorPicker\"),\n...\n}\n</code></pre>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#21-svelte","title":"2.1 \u200b\u4e3a\u200b Svelte \u200b\u7ec4\u4ef6\u200b\u7f16\u5199\u200b\u5355\u5143\u6d4b\u8bd5","text":"<p>\u200b\u5728\u200b\u5f00\u53d1\u65b0\u200b\u7ec4\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u4e3a\u200b\u5176\u200b\u7f16\u5199\u200b\u4e00\u5957\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u3002\u200b\u6d4b\u8bd5\u200b\u5e94\u8be5\u200b\u653e\u7f6e\u200b\u5728\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\uff0c\u200b\u6587\u4ef6\u540d\u200b\u4e3a\u200b MyAwesomeComponent.test.ts\u3002\u200b\u540c\u6837\u200b\uff0c\u200b\u50cf\u200b\u4e0a\u9762\u200b\u90a3\u6837\u200b\u53c2\u8003\u200b\u5176\u4ed6\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6d4b\u8bd5\u200b\uff08\u200b\u4f8b\u5982\u200bTextbox.test.ts\uff09\uff0c\u200b\u5e76\u200b\u6dfb\u52a0\u200b\u5c3d\u53ef\u80fd\u200b\u591a\u200b\u7684\u200b\u5355\u5143\u6d4b\u8bd5\u200b\uff0c\u200b\u4ee5\u200b\u6d4b\u8bd5\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u4e0d\u540c\u200b\u65b9\u9762\u200b\u548c\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#3","title":"3. \u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u6f14\u793a","text":"<p>\u200b\u6700\u540e\u200b\u4e00\u6b65\u200b\u662f\u200b\u5728\u200bgradio/demo \u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b\u65b0\u200b\u6dfb\u52a0\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u6f14\u793a\u200b\u3002\u200b\u540c\u6837\u200b\uff0c\u200b\u5efa\u8bae\u200b\u53c2\u8003\u200b\u73b0\u6709\u200b\u6f14\u793a\u200b\u3002\u200b\u5728\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b run.py \u200b\u7684\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7f16\u5199\u200b\u6f14\u793a\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5fc5\u8981\u200b\u7684\u200b\u8981\u6c42\u200b\u548c\u200b\u663e\u793a\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u754c\u9762\u200b\u7684\u200b\u56fe\u50cf\u200b\u3002\u200b\u6700\u540e\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u663e\u793a\u200b\u5176\u200b\u7528\u6cd5\u200b\u7684\u200b gif\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u4e3a\u200b ColorPicker \u200b\u521b\u5efa\u200b\u7684\u200bdemo\uff0c\u200b\u5176\u4e2d\u200b\u4ee5\u65b0\u200b\u7ec4\u4ef6\u200b\u9009\u62e9\u200b\u7684\u200b\u56fe\u6807\u200b\u548c\u200b\u989c\u8272\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u9009\u62e9\u200b\u7684\u200b\u989c\u8272\u200b\u7740\u8272\u200b\u7684\u200b\u76f8\u540c\u200b\u56fe\u6807\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u8981\u200b\u6d4b\u8bd5\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e0a\u200b\u8fd0\u884c\u200b <code>python path/demo/run.py</code>\uff0c\u200b\u5b83\u4f1a\u200b\u5728\u200b\u5730\u5740\u200b http://localhost:7860 \u200b\u542f\u52a8\u200b\u540e\u200b\u7aef\u200b\uff1b</li> <li>\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\u4e0a\u200b\uff0c\u200b\u8fd0\u884c\u200b <code>pnpm dev</code> \u200b\u4ee5\u200b\u5728\u200b http://localhost:9876 \u200b\u4e0a\u200b\u542f\u52a8\u200b\u5177\u6709\u200b\u70ed\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u529f\u80fd\u200b\u7684\u200b\u524d\u7aef\u200b\u3002</li> </ul>"},{"location":"cn/07_other-tutorials/creating-a-new-component/#_4","title":"\u7ed3\u8bba","text":"<p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c55\u793a\u200b\u4e86\u200b\u5c06\u200b\u65b0\u200b\u7ec4\u4ef6\u200b\u6dfb\u52a0\u200b\u5230\u200b Gradio \u200b\u662f\u200b\u591a\u4e48\u200b\u7b80\u5355\u200b\uff0c\u200b\u9010\u6b65\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u4f55\u200b\u6dfb\u52a0\u200b ColorPicker \u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8981\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b PR\uff1a#1695.</p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/","title":"\u4f7f\u7528\u200b Blocks \u200b\u8fdb\u884c\u200b\u81ea\u5b9a\u4e49\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u89e3\u91ca","text":"<p>Tags: INTERPRETATION, SENTIMENT ANALYSIS</p> <p>\u200b\u524d\u63d0\u6761\u4ef6\u200b: \u200b\u6b64\u200b\u6307\u5357\u200b\u8981\u6c42\u200b\u60a8\u200b\u4e86\u89e3\u200b Blocks \u200b\u548c\u200b\u754c\u9762\u200b\u7684\u200b\u89e3\u91ca\u200b\u529f\u80fd\u200b\u3002\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u9996\u5148\u200b\u9605\u8bfb\u200b Blocks \u200b\u6307\u5357\u200b\u4ee5\u53ca\u200b\u9ad8\u7ea7\u200b\u754c\u9762\u200b\u529f\u80fd\u200b\u6307\u5357\u200b\u7684\u200b\u89e3\u91ca\u200b\u90e8\u5206\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/#_1","title":"\u7b80\u4ecb","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u6709\u200b\u4f7f\u7528\u200b\u754c\u9762\u200b\u7c7b\u200b\u7684\u200b\u7ecf\u9a8c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u5c31\u200b\u77e5\u9053\u200b\u89e3\u91ca\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u6d4b\u200b\u6709\u200b\u591a\u4e48\u200b\u5bb9\u6613\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5c06\u200b <code>interpretation</code> \u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3a\u200b \"default\" \u200b\u6216\u200b \"shap\" \u200b\u5373\u53ef\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u80fd\u200b\u60f3\u200b\u77e5\u9053\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u540c\u6837\u200b\u7684\u200b\u89e3\u91ca\u200b\u529f\u80fd\u200b\u6dfb\u52a0\u200b\u5230\u200b\u4f7f\u7528\u200b Blocks API \u200b\u6784\u5efa\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002\u200b\u4e0d\u4ec5\u200b\u53ef\u4ee5\u200b\u505a\u5230\u200b\uff0c\u200b\u800c\u4e14\u200b Blocks \u200b\u7684\u200b\u7075\u6d3b\u6027\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200b\u754c\u9762\u200b\u6765\u200b\u663e\u793a\u200b\u89e3\u91ca\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff01</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\uff1a</p> <ol> <li>\u200b\u5728\u200b Blocks \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u91cd\u65b0\u200b\u521b\u5efa\u200b\u754c\u9762\u200b\u7684\u200b\u89e3\u91ca\u200b\u529f\u80fd\u200b\u7684\u200b\u884c\u4e3a\u200b\u3002</li> <li>\u200b\u81ea\u5b9a\u4e49\u200b Blocks \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u89e3\u91ca\u200b\u663e\u793a\u65b9\u5f0f\u200b\u3002</li> </ol> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u5427\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/#blocks_1","title":"\u8bbe\u7f6e\u200b Blocks \u200b\u5e94\u7528\u7a0b\u5e8f","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b Blocks API \u200b\u6784\u5efa\u200b\u4e00\u6b3e\u200b\u60c5\u611f\u200b\u5206\u7c7b\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u8be5\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5c06\u200b\u4ee5\u200b\u6587\u672c\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u8f93\u51fa\u200b\u6b64\u200b\u6587\u672c\u200b\u8868\u8fbe\u200b\u8d1f\u9762\u200b\u6216\u200b\u6b63\u9762\u200b\u60c5\u611f\u200b\u7684\u200b\u6982\u7387\u200b\u3002\u200b\u6211\u4eec\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u8f93\u5165\u200b <code>Textbox</code> \u200b\u548c\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u8f93\u51fa\u200b <code>Label</code> \u200b\u7ec4\u4ef6\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u4ee3\u7801\u200b\u4ee5\u53ca\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u672c\u8eab\u200b\u3002</p> <pre><code>import gradio as gr\nfrom transformers import pipeline\n\nsentiment_classifier = pipeline(\"text-classification\", return_all_scores=True)\n\ndef classifier(text):\n    pred = sentiment_classifier(text)\n    return {p[\"label\"]: p[\"score\"] for p in pred[0]}\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            input_text = gr.Textbox(label=\"Input Text\")\n            with gr.Row():\n                classify = gr.Button(\"Classify Sentiment\")\n        with gr.Column():\n            label = gr.Label(label=\"Predicted Sentiment\")\n\n    classify.click(classifier, input_text, label)\ndemo.launch()\n</code></pre> <p> </p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/#_2","title":"\u5411\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6dfb\u52a0\u200b\u89e3\u91ca","text":"<p>\u200b\u6211\u4eec\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u5411\u200b\u7528\u6237\u200b\u5448\u73b0\u200b\u8f93\u5165\u200b\u4e2d\u200b\u7684\u200b\u5355\u8bcd\u200b\u5982\u4f55\u200b contributed \u200b\u5230\u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u6d4b\u200b\u3002 \u200b\u8fd9\u200b\u5c06\u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u7406\u89e3\u200b\u6a21\u578b\u200b\u7684\u200b\u5de5\u4f5c\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5e76\u200b\u8bc4\u4f30\u200b\u5176\u200b\u6709\u6548\u6027\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u671f\u671b\u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u578b\u200b\u80fd\u591f\u200b\u5c06\u200b\u201chappy\u201d\u200b\u548c\u200b\u201clove\u201d\u200b\u8fd9\u4e9b\u200b\u8bcd\u200b\u4e0e\u200b\u79ef\u6781\u200b\u7684\u200b\u60c5\u611f\u200b\u8054\u7cfb\u200b\u8d77\u6765\u200b\uff1b\u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u6ca1\u6709\u200b\u8054\u7cfb\u200b\u8d77\u6765\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u6211\u4eec\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u51fa\u73b0\u200b\u4e86\u200b\u9519\u8bef\u200b\uff01</p> <p>\u200b\u5bf9\u4e8e\u200b\u8f93\u5165\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5355\u8bcd\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8ba1\u7b97\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u7684\u200b\u79ef\u6781\u200b\u60c5\u611f\u200b\u5982\u4f55\u200b\u53d7\u8be5\u200b\u5355\u8bcd\u200b\u7684\u200b\u5f71\u54cd\u200b\u3002 \u200b\u4e00\u65e6\u200b\u6211\u4eec\u200b\u6709\u200b\u4e86\u200b\u8fd9\u4e9b\u200b <code>(word, score)</code> \u200b\u5bf9\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Gradio \u200b\u5c06\u200b\u5176\u200b\u53ef\u89c6\u5316\u200b\u7ed9\u200b\u7528\u6237\u200b\u3002</p> <p>shap \u200b\u5e93\u200b\u5c06\u200b\u5e2e\u52a9\u200b\u6211\u4eec\u200b\u8ba1\u7b97\u200b <code>(word, score)</code> \u200b\u5bf9\u200b\uff0c\u200b\u800c\u200b Gradio \u200b\u5c06\u200b\u8d1f\u8d23\u200b\u5c06\u200b\u8f93\u51fa\u200b\u663e\u793a\u200b\u7ed9\u200b\u7528\u6237\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\u8ba1\u7b97\u200b <code>(word, score)</code> \u200b\u5bf9\u200b\uff1a</p> <pre><code>def interpretation_function(text):\n    explainer = shap.Explainer(sentiment_classifier)\n    shap_values = explainer([text])\n\n    # Dimensions are (batch size, text size, number of classes)\n    # Since we care about positive sentiment, use index 1\n    scores = list(zip(shap_values.data[0], shap_values.values[0, :, 1]))\n    # Scores contains (word, score) pairs\n\n\n    # Format expected by gr.components.Interpretation\n    return {\"original\": text, \"interpretation\": scores}\n</code></pre> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u6211\u4eec\u200b\u6240\u8981\u200b\u505a\u200b\u7684\u200b\u5c31\u662f\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u6309\u94ae\u200b\uff0c\u200b\u5728\u200b\u5355\u51fb\u200b\u540e\u200b\u8fd0\u884c\u200b\u6b64\u200b\u51fd\u6570\u200b\u3002 \u200b\u4e3a\u4e86\u200b\u663e\u793a\u200b\u89e3\u91ca\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>gr.components.Interpretation</code>\u3002 \u200b\u8fd9\u200b\u5c06\u200b\u4f7f\u200b\u8f93\u5165\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5355\u8bcd\u200b\u53d8\u6210\u200b\u7ea2\u8272\u200b\u6216\u200b\u84dd\u8272\u200b\u3002 \u200b\u5982\u679c\u200b\u5b83\u200b\u6709\u52a9\u4e8e\u200b\u79ef\u6781\u200b\u60c5\u611f\u200b\uff0c\u200b\u5219\u200b\u4e3a\u200b\u7ea2\u8272\u200b\uff0c\u200b\u5982\u679c\u200b\u5b83\u200b\u6709\u52a9\u4e8e\u200b\u8d1f\u9762\u200b\u60c5\u611f\u200b\uff0c\u200b\u5219\u200b\u4e3a\u200b\u84dd\u8272\u200b\u3002 \u200b\u8fd9\u200b\u5c31\u662f\u200b\u754c\u9762\u200b\u5982\u4f55\u200b\u663e\u793a\u200b\u6587\u672c\u200b\u7684\u200b\u89e3\u91ca\u200b\u8f93\u51fa\u200b\u3002</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            input_text = gr.Textbox(label=\"Input Text\")\n            with gr.Row():\n                classify = gr.Button(\"Classify Sentiment\")\n                interpret = gr.Button(\"Interpret\")\n        with gr.Column():\n            label = gr.Label(label=\"Predicted Sentiment\")\n        with gr.Column():\n            interpretation = gr.components.Interpretation(input_text)\n    classify.click(classifier, input_text, label)\n    interpret.click(interpretation_function, input_text, interpretation)\n\ndemo.launch()\n</code></pre> <p> </p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/#_3","title":"\u81ea\u5b9a\u4e49\u200b\u89e3\u91ca\u200b\u7684\u200b\u663e\u793a\u65b9\u5f0f","text":"<p><code>gr.components.Interpretation</code> \u200b\u7ec4\u4ef6\u200b\u4ee5\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u65b9\u5f0f\u200b\u663e\u793a\u200b\u5355\u4e2a\u200b\u5355\u8bcd\u200b\u5982\u4f55\u200b contributed \u200b\u5230\u200b\u60c5\u611f\u200b\u9884\u6d4b\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u60f3\u200b\u663e\u793a\u200b\u5206\u6570\u200b\u672c\u8eab\u200b\uff0c\u200b\u600e\u4e48\u529e\u200b\u5462\u200b\uff1f</p> <p>\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u662f\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u6761\u5f62\u56fe\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5355\u8bcd\u200b\u5728\u200b\u6c34\u5e73\u200b\u8f74\u4e0a\u200b\uff0c\u200b\u6761\u5f62\u200b\u9ad8\u5ea6\u200b\u5bf9\u5e94\u200b shap \u200b\u5f97\u5206\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u6211\u4eec\u200b\u7684\u200b <code>interpretation_function</code> \u200b\u6765\u200b\u6267\u884c\u200b\u6b64\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4ee5\u200b\u540c\u65f6\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b matplotlib \u200b\u6761\u5f62\u56fe\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u5355\u72ec\u200b\u7684\u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u4f7f\u7528\u200b 'gr.Plot' \u200b\u7ec4\u4ef6\u200b\u663e\u793a\u200b\u5b83\u200b\u3002</p> <p>\u200b\u8fd9\u662f\u200b\u89e3\u91ca\u200b\u51fd\u6570\u200b\u7684\u200b\u5916\u89c2\u200b\uff1a</p> <pre><code>def interpretation_function(text):\n    explainer = shap.Explainer(sentiment_classifier)\n    shap_values = explainer([text])\n    # Dimensions are (batch size, text size, number of classes)\n    # Since we care about positive sentiment, use index 1\n    scores = list(zip(shap_values.data[0], shap_values.values[0, :, 1]))\n\n    scores_desc = sorted(scores, key=lambda t: t[1])[::-1]\n\n    # Filter out empty string added by shap\n    scores_desc = [t for t in scores_desc if t[0] != \"\"]\n\n    fig_m = plt.figure()\n\n    # Select top 5 words that contribute to positive sentiment\n    plt.bar(x=[s[0] for s in scores_desc[:5]],\n            height=[s[1] for s in scores_desc[:5]])\n    plt.title(\"Top words contributing to positive sentiment\")\n    plt.ylabel(\"Shap Value\")\n    plt.xlabel(\"Word\")\n    return {\"original\": text, \"interpretation\": scores}, fig_m\n</code></pre> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\uff1a</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            input_text = gr.Textbox(label=\"Input Text\")\n            with gr.Row():\n                classify = gr.Button(\"Classify Sentiment\")\n                interpret = gr.Button(\"Interpret\")\n        with gr.Column():\n            label = gr.Label(label=\"Predicted Sentiment\")\n        with gr.Column():\n            with gr.Tabs():\n                with gr.TabItem(\"Display interpretation with built-in component\"):\n                    interpretation = gr.components.Interpretation(input_text)\n                with gr.TabItem(\"Display interpretation with plot\"):\n                    interpretation_plot = gr.Plot()\n\n    classify.click(classifier, input_text, label)\n    interpret.click(interpretation_function, input_text, [interpretation, interpretation_plot])\n\ndemo.launch()\n</code></pre> <p>demo \u200b\u5728\u200b\u8fd9\u91cc\u200b !</p> <p> </p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/#beyond-sentiment-classification","title":"Beyond Sentiment Classification \uff08\u200b\u8d85\u8d8a\u200b\u60c5\u611f\u200b\u5206\u7c7b\u200b\uff09","text":"<p>\u200b\u5c3d\u7ba1\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u96c6\u4e2d\u200b\u8ba8\u8bba\u200b\u4e86\u200b\u60c5\u611f\u200b\u5206\u7c7b\u200b\uff0c\u200b\u4f46\u200b\u51e0\u4e4e\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u4efb\u4f55\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u6dfb\u52a0\u200b\u89e3\u91ca\u200b\u3002 \u200b\u8f93\u51fa\u200b\u5fc5\u987b\u200b\u662f\u200b <code>gr.Image</code> \u200b\u6216\u200b <code>gr.Label</code>\uff0c\u200b\u4f46\u200b\u8f93\u5165\u200b\u51e0\u4e4e\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b (<code>gr.Number</code>, <code>gr.Slider</code>, <code>gr.Radio</code>, <code>gr.Image</code>)\u3002</p> <p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b Blocks \u200b\u6784\u5efa\u200b\u7684\u200b\u56fe\u50cf\u200b\u5206\u7c7b\u200b\u6a21\u578b\u200b\u89e3\u91ca\u200b\u6f14\u793a\u200b\uff1a</p> <p> </p>"},{"location":"cn/07_other-tutorials/custom-interpretations-with-blocks/#_4","title":"\u7ed3\u8bed","text":"<p>\u200b\u6211\u4eec\u200b\u6df1\u5165\u200b\u5730\u200b\u63a2\u8ba8\u200b\u4e86\u200b\u89e3\u91ca\u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u5c06\u200b\u5176\u200b\u6dfb\u52a0\u200b\u5230\u200b\u60a8\u200b\u7684\u200b Blocks \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c55\u793a\u200b\u4e86\u200b Blocks API \u200b\u5982\u4f55\u200b\u8ba9\u200b\u60a8\u200b\u63a7\u5236\u200b\u89e3\u91ca\u200b\u5728\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u6dfb\u52a0\u200b\u89e3\u91ca\u200b\u662f\u200b\u4f7f\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u200b\u4e86\u89e3\u200b\u548c\u200b\u4fe1\u4efb\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u7684\u200b\u6709\u7528\u200b\u65b9\u5f0f\u200b\u3002\u200b\u73b0\u5728\u200b\uff0c\u200b\u60a8\u200b\u62e5\u6709\u200b\u4e86\u200b\u5c06\u200b\u5176\u200b\u6dfb\u52a0\u200b\u5230\u200b\u6240\u6709\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u5de5\u5177\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/developing-faster-with-reload-mode/","title":"\u901a\u8fc7\u200b\u81ea\u52a8\u200b\u91cd\u8f7d\u200b\u5b9e\u73b0\u200b\u66f4\u5feb\u200b\u7684\u200b\u5f00\u53d1","text":"<p>\u200b\u5148\u51b3\u6761\u4ef6\u200b\uff1a\u200b\u672c\u200b\u6307\u5357\u200b\u8981\u6c42\u200b\u60a8\u200b\u4e86\u89e3\u200b\u5757\u200b\u7684\u200b\u77e5\u8bc6\u200b\u3002\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u5148\u200b\u9605\u8bfb\u200b\u5757\u200b\u6307\u5357\u200b\u3002</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u81ea\u52a8\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u3001\u200b\u5728\u200b Python IDE \u200b\u4e2d\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u4ee5\u53ca\u200b\u5728\u200b Jupyter Notebooks \u200b\u4e2d\u200b\u4f7f\u7528\u200b gradio \u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/developing-faster-with-reload-mode/#_2","title":"\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u4f7f\u7528\u200b\u81ea\u52a8\u200b\u91cd\u8f7d\u200b\uff1f","text":"<p>\u200b\u5f53\u200b\u60a8\u200b\u6784\u5efa\u200b Gradio \u200b\u6f14\u793a\u200b\u65f6\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u4f7f\u7528\u200b Blocks \u200b\u6784\u5efa\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u53cd\u590d\u200b\u8fd0\u884c\u200b\u4ee3\u7801\u200b\u4ee5\u200b\u6d4b\u8bd5\u200b\u66f4\u6539\u200b\u5f88\u200b\u9ebb\u70e6\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u66f4\u200b\u5feb\u901f\u200b\u3001\u200b\u66f4\u200b\u4fbf\u6377\u200b\u5730\u200b\u7f16\u5199\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u7b80\u5316\u200b\u4e86\u200b\u5728\u200b Python IDE\uff08\u200b\u5982\u200b VS Code\u3001Sublime Text\u3001PyCharm \u200b\u7b49\u200b\uff09\u200b\u4e2d\u200b\u5f00\u53d1\u200b\u6216\u200b\u4ece\u200b\u7ec8\u7aef\u200b\u8fd0\u884c\u200b Python \u200b\u4ee3\u7801\u200b\u65f6\u200b\u201c\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u201dGradio \u200b\u5e94\u7528\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5f00\u53d1\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u201c\u200b\u9b54\u6cd5\u200b\u547d\u4ee4\u200b\u201d\uff0c\u200b\u4f7f\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u5feb\u901f\u200b\u5730\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u5355\u5143\u683c\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b Jupyter Notebooks\uff08\u200b\u6216\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u73af\u5883\u200b\uff0c\u200b\u5982\u200b Colab\uff09\u200b\u7684\u8bdd\u200b\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u7b80\u77ed\u200b\u7684\u200b\u6307\u5357\u200b\u5c06\u200b\u6db5\u76d6\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6240\u4ee5\u200b\u65e0\u8bba\u200b\u60a8\u200b\u5982\u4f55\u200b\u7f16\u5199\u200b Python \u200b\u4ee3\u7801\u200b\uff0c\u200b\u60a8\u200b\u90fd\u200b\u5c06\u200b\u77e5\u9053\u200b\u5982\u4f55\u200b\u66f4\u5feb\u200b\u5730\u200b\u6784\u5efa\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/developing-faster-with-reload-mode/#python-ide","title":"Python IDE \u200b\u91cd\u8f7d\u200b \ud83d\udd25","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b Python IDE \u200b\u6784\u5efa\u200b Gradio Blocks\uff0c\u200b\u90a3\u4e48\u200b\u4ee3\u7801\u200b\u6587\u4ef6\u200b\uff08\u200b\u5047\u8bbe\u200b\u547d\u540d\u200b\u4e3a\u200b <code>run.py</code>\uff09\u200b\u53ef\u80fd\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Markdown(\"# \u200b\u6765\u81ea\u200bGradio\u200b\u7684\u200b\u95ee\u5019\u200b\uff01\")\n    inp = gr.Textbox(placeholder=\"\u200b\u60a8\u200b\u53eb\u200b\u4ec0\u4e48\u200b\u540d\u5b57\u200b\uff1f\")\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: f\"\u200b\u6b22\u8fce\u200b\uff0c{x}\uff01\",\n               inputs=inp,\n               outputs=out)\n\nif __name__ == \"__main__\":\n    demo.launch()\n</code></pre> <p>\u200b\u95ee\u9898\u200b\u5728\u4e8e\u200b\uff0c\u200b\u6bcf\u5f53\u200b\u60a8\u200b\u60f3\u8981\u200b\u66f4\u6539\u200b\u5e03\u5c40\u200b\u3001\u200b\u4e8b\u4ef6\u200b\u6216\u200b\u7ec4\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u90fd\u200b\u5fc5\u987b\u200b\u901a\u8fc7\u200b\u7f16\u5199\u200b <code>python run.py</code> \u200b\u6765\u200b\u5173\u95ed\u200b\u548c\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p> <p>\u200b\u800c\u200b\u4e0d\u662f\u200b\u8fd9\u6837\u200b\u505a\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u66f4\u6539\u200b 1 \u200b\u4e2a\u200b\u5355\u8bcd\u200b\u6765\u200b\u4ee5\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u6a21\u5f0f\u200b\u8fd0\u884c\u200b\u4ee3\u7801\u200b\uff1a\u200b\u5c06\u200b <code>python</code> \u200b\u66f4\u200b\u6539\u4e3a\u200b <code>gradio</code>\uff1a</p> <p>\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4e2d\u200b\u8fd0\u884c\u200b <code>gradio run.py</code>\u3002\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u770b\u5230\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u8fd9\u6837\u200b\u7684\u200b\u5185\u5bb9\u200b\uff1a</p> <pre><code>Launching in *reload mode* on: http://127.0.0.1:7860 (Press CTRL+C to quit)\n\nWatching...\n\nWARNING:  The --reload flag should not be used in production on Windows.\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b\u4e00\u884c\u200b\u662f\u200b <code>\u200b\u6b63\u5728\u200b\u89c2\u5bdf\u200b ...</code>\u3002\u200b\u8fd9\u91cc\u200b\u53d1\u751f\u200b\u7684\u200b\u60c5\u51b5\u200b\u662f\u200b Gradio \u200b\u5c06\u200b\u89c2\u5bdf\u200b <code>run.py</code> \u200b\u6587\u4ef6\u200b\u6240\u5728\u200b\u7684\u200b\u76ee\u5f55\u200b\uff0c\u200b\u5982\u679c\u200b\u6587\u4ef6\u200b\u53d1\u751f\u200b\u66f4\u6539\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u81ea\u52a8\u200b\u4e3a\u200b\u60a8\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u6587\u4ef6\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u60a8\u200b\u53ea\u200b\u9700\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u7f16\u5199\u200b\u4ee3\u7801\u200b\uff0cGradio \u200b\u6f14\u793a\u200b\u5c06\u200b\u81ea\u52a8\u200b\u5237\u65b0\u200b \ud83e\udd73</p> <p>\u26a0\ufe0f \u200b\u8b66\u544a\u200b\uff1a<code>gradio</code> \u200b\u547d\u4ee4\u200b\u4e0d\u4f1a\u200b\u68c0\u6d4b\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>launch()</code> \u200b\u65b9\u6cd5\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5728\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u4ece\u672a\u200b\u8c03\u7528\u200b <code>launch()</code> \u200b\u65b9\u6cd5\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8bbe\u7f6e\u200b <code>launch()</code> \u200b\u4e2d\u200b\u7684\u200b <code>auth</code> \u200b\u6216\u200b <code>show_error</code> \u200b\u4e0d\u4f1a\u200b\u5728\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u53cd\u6620\u200b\u51fa\u6765\u200b\u3002</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u6a21\u5f0f\u200b\u65f6\u200b\uff0c\u200b\u8bf7\u200b\u8bb0\u4f4f\u200b\u4e00\u4ef6\u200b\u91cd\u8981\u200b\u7684\u200b\u4e8b\u60c5\u200b\uff1aGradio \u200b\u4e13\u95e8\u200b\u67e5\u627e\u200b\u540d\u4e3a\u200b <code>demo</code> \u200b\u7684\u200b Gradio Blocks/Interface \u200b\u6f14\u793a\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u5c06\u200b\u6f14\u793a\u200b\u547d\u540d\u200b\u4e3a\u200b\u5176\u4ed6\u200b\u540d\u79f0\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u4e2d\u200b\u4f20\u5165\u200b\u6f14\u793a\u200b\u7684\u200b FastAPI \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u540d\u79f0\u200b\u3002\u200b\u5bf9\u4e8e\u200b Gradio \u200b\u6f14\u793a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>.app</code> \u200b\u5c5e\u6027\u200b\u8bbf\u95ee\u200b FastAPI \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b <code>run.py</code> \u200b\u6587\u4ef6\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>import gradio as gr\n\nwith gr.Blocks() as my_demo:\n    gr.Markdown(\"# \u200b\u6765\u81ea\u200bGradio\u200b\u7684\u200b\u95ee\u5019\u200b\uff01\")\n    inp = gr.Textbox(placeholder=\"\u200b\u60a8\u200b\u53eb\u200b\u4ec0\u4e48\u200b\u540d\u5b57\u200b\uff1f\")\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: f\"\u200b\u6b22\u8fce\u200b\uff0c{x}\uff01\",\n               inputs=inp,\n               outputs=out)\n\nif __name__ == \"__main__\":\n    my_demo.launch()\n</code></pre> <p>\u200b\u90a3\u4e48\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u542f\u52a8\u200b\u5b83\u200b\uff1a<code>gradio run.py my_demo.app</code>\u3002</p> <p>\ud83d\udd25 \u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u63a5\u53d7\u547d\u4ee4\u200b\u884c\u200b\u53c2\u6570\u200b\uff0c\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u5b83\u4eec\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a</p> <pre><code>import gradio as gr\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--name\", type=str, default=\"User\")\nargs, unknown = parser.parse_known_args()\n\nwith gr.Blocks() as demo:\n    gr.Markdown(f\"# \u200b\u6b22\u8fce\u200b {args.name}\uff01\")\n    inp = gr.Textbox()\n    out = gr.Textbox()\n\n    inp.change(fn=lambda x: x, inputs=inp, outputs=out)\n\nif __name__ == \"__main__\":\n    demo.launch()\n</code></pre> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u8fd9\u6837\u200b\u8fd0\u884c\u200b\u5b83\u200b\uff1a<code>gradio run.py --name Gretel</code></p> <p>\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u5c0f\u63d0\u793a\u200b\uff0c\u200b\u53ea\u8981\u200b\u66f4\u6539\u200b\u4e86\u200b <code>run.py</code> \u200b\u6e90\u4ee3\u7801\u200b\u6216\u200b Gradio \u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u81ea\u52a8\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u5c31\u200b\u4f1a\u200b\u53d1\u751f\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5982\u679c\u200b\u60a8\u200b\u51b3\u5b9a\u200b\u4e3a\u200b Gradio \u200b\u505a\u200b\u8d21\u732e\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u975e\u5e38\u200b\u6709\u7528\u200b \u2705</p>"},{"location":"cn/07_other-tutorials/developing-faster-with-reload-mode/#jupyter-notebook","title":"Jupyter Notebook \u200b\u9b54\u6cd5\u200b\u547d\u4ee4\u200b\ud83d\udd2e","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b Jupyter Notebooks\uff08\u200b\u6216\u200b Colab Notebooks \u200b\u7b49\u200b\uff09\u200b\u8fdb\u884c\u200b\u5f00\u53d1\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff01</p> <p>\u200b\u6211\u4eec\u200b\u5f00\u53d1\u200b\u4e86\u200b\u4e00\u4e2a\u200b magic command \u200b\u9b54\u6cd5\u200b\u547d\u4ee4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u60a8\u200b\u521b\u5efa\u200b\u548c\u200b\u8fd0\u884c\u200b\u4e00\u4e2a\u200b Blocks \u200b\u6f14\u793a\u200b\u3002\u200b\u8981\u200b\u4f7f\u7528\u200b\u6b64\u200b\u529f\u80fd\u200b\uff0c\u200b\u5728\u200b\u7b14\u8bb0\u672c\u200b\u9876\u90e8\u200b\u52a0\u8f7d\u200b gradio \u200b\u6269\u5c55\u200b\uff1a</p> <p><code>%load_ext gradio</code></p> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u5728\u200b\u60a8\u200b\u6b63\u5728\u200b\u5f00\u53d1\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u5355\u5143\u683c\u200b\u4e2d\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5728\u200b\u9876\u90e8\u200b\u5199\u5165\u200b\u9b54\u6cd5\u200b\u547d\u4ee4\u200b<code>%%blocks</code>\uff0c\u200b\u7136\u540e\u200b\u50cf\u200b\u5e73\u5e38\u200b\u4e00\u6837\u200b\u7f16\u5199\u200b\u5e03\u5c40\u200b\u548c\u200b\u7ec4\u4ef6\u200b\uff1a</p> <pre><code>%%blocks\n\nimport gradio as gr\n\ngr.Markdown(\"# \u200b\u6765\u81ea\u200bGradio\u200b\u7684\u200b\u95ee\u5019\u200b\uff01\")\ninp = gr.Textbox(placeholder=\"\u200b\u60a8\u200b\u53eb\u200b\u4ec0\u4e48\u200b\u540d\u5b57\u200b\uff1f\")\nout = gr.Textbox()\n\ninp.change(fn=lambda x: f\"\u200b\u6b22\u8fce\u200b\uff0c{x}\uff01\",\n           inputs=inp,\n           outputs=out)\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff1a</p> <ul> <li> <p>\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u653e\u7f6e\u200b\u6837\u677f\u200b\u4ee3\u7801\u200b <code>with gr.Blocks() as demo:</code> \u200b\u548c\u200b <code>demo.launch()</code> \u2014 Gradio \u200b\u4f1a\u200b\u81ea\u52a8\u200b\u4e3a\u200b\u60a8\u200b\u5b8c\u6210\u200b\uff01</p> </li> <li> <p>\u200b\u6bcf\u6b21\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u5355\u5143\u683c\u200b\u65f6\u200b\uff0cGradio \u200b\u90fd\u200b\u5c06\u200b\u5728\u200b\u76f8\u540c\u200b\u7684\u200b\u7aef\u53e3\u200b\u4e0a\u200b\u91cd\u65b0\u542f\u52a8\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200b\u5e95\u5c42\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u60a8\u200b\u5c06\u200b\u6bd4\u200b\u6b63\u5e38\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u5355\u5143\u683c\u200b\u66f4\u5feb\u200b\u5730\u200b\u770b\u5230\u200b\u53d8\u5316\u200b\u3002</p> </li> </ul> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u5728\u200b Jupyter Notebook \u200b\u4e2d\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <p></p> <p>\ud83e\ude84\u200b\u8fd9\u200b\u5728\u200b colab \u200b\u7b14\u8bb0\u672c\u200b\u4e2d\u200b\u4e5f\u200b\u9002\u7528\u200b\uff01\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b colab \u200b\u7b14\u8bb0\u672c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5176\u4e2d\u200b\u770b\u5230\u200b Blocks \u200b\u9b54\u6cd5\u200b\u6548\u679c\u200b\u3002\u200b\u5c1d\u8bd5\u200b\u8fdb\u884c\u200b\u4e00\u4e9b\u200b\u66f4\u6539\u200b\u5e76\u200b\u91cd\u65b0\u200b\u8fd0\u884c\u200b\u5e26\u6709\u200b Gradio \u200b\u4ee3\u7801\u200b\u7684\u200b\u5355\u5143\u683c\u200b\uff01</p> <p>Notebook Magic \u200b\u73b0\u5728\u200b\u662f\u200b\u4f5c\u8005\u200b\u6784\u5efa\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u9996\u9009\u200b\u65b9\u5f0f\u200b\u3002\u200b\u65e0\u8bba\u200b\u60a8\u200b\u5982\u4f55\u200b\u7f16\u5199\u200b Python \u200b\u4ee3\u7801\u200b\uff0c\u200b\u6211\u4eec\u200b\u90fd\u200b\u5e0c\u671b\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u90fd\u200b\u80fd\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u66f4\u597d\u200b\u7684\u200b Gradio \u200b\u5f00\u53d1\u200b\u4f53\u9a8c\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/developing-faster-with-reload-mode/#_3","title":"\u4e0b\u200b\u4e00\u6b65","text":"<p>\u200b\u65e2\u7136\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u4e86\u89e3\u200b\u4e86\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Gradio \u200b\u5feb\u901f\u200b\u5f00\u53d1\u200b\uff0c\u200b\u8bf7\u200b\u5f00\u59cb\u200b\u6784\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5427\u200b\uff01</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u6b63\u5728\u200b\u5bfb\u627e\u200b\u7075\u611f\u200b\uff0c\u200b\u8bf7\u200b\u5c1d\u8bd5\u200b\u6d4f\u89c8\u200b\u5176\u4ed6\u4eba\u200b\u7528\u200b Gradio \u200b\u6784\u5efa\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u6d4f\u89c8\u200b Hugging Face Spaces \ud83e\udd17</p>"},{"location":"cn/07_other-tutorials/how-to-use-3D-model-component/","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200b 3D \u200b\u6a21\u578b\u200b\u7ec4\u4ef6","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/dawood/Model3D, https://huggingface.co/spaces/radames/PIFu-Clothed-Human-Digitization, https://huggingface.co/spaces/radames/dpt-depth-estimation-3d-obj \u200b\u6807\u7b7e\u200b\uff1aVISION, IMAGE</p>"},{"location":"cn/07_other-tutorials/how-to-use-3D-model-component/#_1","title":"\u4ecb\u7ecd","text":"<p>\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u4e2d\u200b\u7684\u200b 3D \u200b\u6a21\u578b\u200b\u8d8a\u6765\u8d8a\u200b\u53d7\u6b22\u8fce\u200b\uff0c\u200b\u5e76\u4e14\u200b\u662f\u200b\u4e00\u4e9b\u200b\u6700\u200b\u6709\u8da3\u200b\u7684\u200b\u6f14\u793a\u200b\u5b9e\u9a8c\u200b\u3002\u200b\u4f7f\u7528\u200b <code>gradio</code>\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u6784\u5efa\u200b\u60a8\u200b\u7684\u200b 3D \u200b\u56fe\u50cf\u200b\u6a21\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u5e76\u200b\u4e0e\u200b\u4efb\u4f55\u4eba\u200b\u5206\u4eab\u200b\u3002Gradio 3D \u200b\u6a21\u578b\u200b\u7ec4\u4ef6\u200b\u63a5\u53d7\u200b 3 \u200b\u79cd\u200b\u6587\u4ef6\u7c7b\u578b\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a.obj\uff0c.glb \u200b\u548c\u200b .gltf\u3002</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u5411\u200b\u60a8\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\u6784\u5efa\u200b\u60a8\u200b\u7684\u200b 3D \u200b\u56fe\u50cf\u200b\u6a21\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\uff1b\u200b\u50cf\u200b\u4e0b\u9762\u200b\u8fd9\u4e2a\u200b\u793a\u4f8b\u200b\u4e00\u6837\u200b\u3002\u200b\u70b9\u51fb\u200b\u3001\u200b\u62d6\u62fd\u200b\u548c\u200b\u7f29\u653e\u200b\u6765\u200b\u73a9\u8f6c\u200b 3D \u200b\u5bf9\u8c61\u200b\uff1a</p> <p> </p>"},{"location":"cn/07_other-tutorials/how-to-use-3D-model-component/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/how-to-use-3D-model-component/#_3","title":"\u67e5\u770b\u200b\u4ee3\u7801","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u770b\u770b\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u4e0a\u9762\u200b\u7684\u200b\u6700\u7b80\u200b\u754c\u9762\u200b\u3002\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u5c06\u200b\u53ea\u200b\u8fd4\u56de\u200b\u539f\u59cb\u200b\u7684\u200b 3D \u200b\u6a21\u578b\u200b\u7f51\u683c\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u66f4\u6539\u200b\u6b64\u200b\u51fd\u6570\u200b\u4ee5\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u63a8\u7406\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u4e0b\u9762\u200b\u770b\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</p> <pre><code>import gradio as gr\n\ndef load_mesh(mesh_file_name):\n    return mesh_file_name\n\ndemo = gr.Interface(\n    fn=load_mesh,\n    inputs=gr.Model3D(),\n    outputs=gr.Model3D(clear_color=[0.0, 0.0, 0.0, 0.0],  label=\"3D Model\"),\n    examples=[\n        [\"files/Bunny.obj\"],\n        [\"files/Duck.glb\"],\n        [\"files/Fox.gltf\"],\n        [\"files/face.obj\"],\n    ],\n    cache_examples=True,\n)\n\ndemo.launch()\n</code></pre> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u89e3\u6790\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> <p><code>load_mesh</code>\uff1a\u200b\u8fd9\u662f\u200b\u6211\u4eec\u200b\u7684\u200b\u201c\u200b\u9884\u6d4b\u200b\u201d\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e3a\u200b\u7b80\u5355\u200b\u8d77\u200b\u89c1\u200b\uff0c\u200b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u200b\u63a5\u6536\u200b 3D \u200b\u6a21\u578b\u200b\u7f51\u683c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5b83\u200b\u3002</p> <p>\u200b\u521b\u5efa\u200b\u754c\u9762\u200b\uff1a</p> <ul> <li><code>fn</code>\uff1a\u200b\u5f53\u200b\u7528\u6237\u200b\u70b9\u51fb\u200b\u63d0\u4ea4\u200b\u65f6\u200b\u4f7f\u7528\u200b\u7684\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u3002\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b <code>load_mesh</code> \u200b\u51fd\u6570\u200b\u3002</li> <li><code>inputs</code>\uff1a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b model3D \u200b\u8f93\u5165\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8f93\u5165\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e0a\u4f20\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4f5c\u4e3a\u200b{str}\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u3002</li> <li><code>outputs</code>\uff1a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b model3D \u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u3002\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u4e5f\u200b\u671f\u671b\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u4f5c\u4e3a\u200b{str}\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u3002</li> <li><code>clear_color</code>\uff1a\u200b\u8fd9\u662f\u200b 3D \u200b\u6a21\u578b\u200b\u753b\u5e03\u200b\u7684\u200b\u80cc\u666f\u200b\u989c\u8272\u200b\u3002\u200b\u671f\u671b\u200b RGBa \u200b\u503c\u200b\u3002</li> <li><code>label</code>\uff1a\u200b\u51fa\u73b0\u200b\u5728\u200b\u7ec4\u4ef6\u200b\u5de6\u4e0a\u89d2\u200b\u7684\u200b\u6807\u7b7e\u200b\u3002</li> <li><code>examples</code>\uff1a3D \u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\u7684\u200b\u5217\u8868\u200b\u30023D \u200b\u6a21\u578b\u200b\u7ec4\u4ef6\u200b\u53ef\u4ee5\u200b\u63a5\u53d7\u200b.obj\uff0c.glb\u200b\u548c\u200b.gltf\u200b\u6587\u4ef6\u7c7b\u578b\u200b\u3002</li> <li><code>cache_examples</code>\uff1a\u200b\u4fdd\u5b58\u200b\u793a\u4f8b\u200b\u7684\u200b\u9884\u6d4b\u200b\u8f93\u51fa\u200b\uff0c\u200b\u4ee5\u200b\u8282\u7701\u200b\u63a8\u7406\u200b\u65f6\u95f4\u200b\u3002</li> </ul>"},{"location":"cn/07_other-tutorials/how-to-use-3D-model-component/#model3d","title":"\u63a2\u7d22\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b Model3D \u200b\u6f14\u793a","text":"<p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b DPT \u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u56fe\u50cf\u200b\u6df1\u5ea6\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b 3D \u200b\u70b9\u4e91\u200b\u521b\u5efa\u200b 3D \u200b\u5bf9\u8c61\u200b\u7684\u200b\u6f14\u793a\u200b\u3002\u200b\u67e5\u770b\u200bcode.py\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e86\u89e3\u200b\u4ee3\u7801\u200b\u548c\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u3002  </p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b PIFu \u200b\u6a21\u578b\u200b\u5c06\u200b\u7a7f\u7740\u200b\u8863\u7269\u200b\u7684\u200b\u4eba\u200b\u7684\u200b\u56fe\u50cf\u200b\u8f6c\u6362\u200b\u4e3a\u200b 3D \u200b\u6570\u5b57\u5316\u200b\u6a21\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\u3002\u200b\u67e5\u770b\u200bspaces.py\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e86\u89e3\u200b\u4ee3\u7801\u200b\u548c\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u51fd\u6570\u200b\u3002</p> <p> </p> <p>\u200b\u641e\u5b9a\u200b\uff01\u200b\u8fd9\u200b\u5c31\u662f\u200b\u6784\u5efa\u200b Model3D \u200b\u6a21\u578b\u200b\u754c\u9762\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u4ee3\u7801\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e9b\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u6709\u7528\u200b\u7684\u200b\u53c2\u8003\u8d44\u6599\u200b\uff1a</p> <ul> <li>Gradio \u200b\u7684\u200b\u201c\u200b\u5165\u95e8\u200b\u6307\u5357\u200b\u201d</li> <li>\u200b\u7b2c\u4e00\u4e2a\u200b3D \u200b\u6a21\u578b\u200b\u6f14\u793a\u200b\u548c\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\uff08\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\uff09</li> </ul>"},{"location":"cn/07_other-tutorials/named-entity-recognition/","title":"\u547d\u540d\u200b\u5b9e\u4f53\u200b\u8bc6\u522b\u200b \uff08Named-Entity Recognition\uff09","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/rajistics/biobert_ner_demo\uff0chttps://huggingface.co/spaces/abidlabs/ner\uff0chttps://huggingface.co/spaces/rajistics/Financial_Analyst_AI \u200b\u6807\u7b7e\u200b\uff1aNER\uff0cTEXT\uff0cHIGHLIGHT</p>"},{"location":"cn/07_other-tutorials/named-entity-recognition/#_1","title":"\u7b80\u4ecb","text":"<p>\u200b\u547d\u540d\u200b\u5b9e\u4f53\u200b\u8bc6\u522b\u200b\uff08NER\uff09\u200b\u53c8\u200b\u79f0\u4e3a\u200b\u6807\u8bb0\u200b\u5206\u7c7b\u200b\u6216\u200b\u6587\u672c\u200b\u6807\u8bb0\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u4efb\u52a1\u200b\u662f\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u53e5\u5b50\u200b\u8fdb\u884c\u200b\u5206\u7c7b\u200b\uff0c\u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u5355\u8bcd\u200b\uff08\u200b\u6216\u200b \"token\"\uff09\u200b\u5f52\u4e3a\u200b\u4e0d\u540c\u200b\u7684\u200b\u7c7b\u522b\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4eba\u200b\u540d\u200b\u3001\u200b\u5730\u540d\u200b\u6216\u200b\u8bcd\u6027\u200b\u7b49\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u7ed9\u5b9a\u200b\u4ee5\u4e0b\u200b\u53e5\u5b50\u200b\uff1a</p> <p>\u200b\u829d\u52a0\u54e5\u200b\u6709\u200b\u5df4\u57fa\u65af\u5766\u200b\u9910\u5385\u200b\u5417\u200b\uff1f</p> <p>\u200b\u547d\u540d\u200b\u5b9e\u4f53\u200b\u8bc6\u522b\u200b\u7b97\u6cd5\u200b\u53ef\u4ee5\u200b\u8bc6\u522b\u200b\u51fa\u200b\uff1a</p> <ul> <li>\"Chicago\" as a location</li> <li>\"Pakistani\" as an ethnicity</li> </ul> <p>\u200b\u7b49\u7b49\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b <code>gradio</code>\uff08\u200b\u7279\u522b\u200b\u662f\u200b <code>HighlightedText</code> \u200b\u7ec4\u4ef6\u200b\uff09\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b NER \u200b\u6a21\u578b\u200b\u7684\u200b Web \u200b\u6f14\u793a\u200b\u5e76\u200b\u4e0e\u200b\u56e2\u961f\u200b\u5206\u4eab\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u662f\u200b\u60a8\u200b\u5c06\u200b\u80fd\u591f\u200b\u6784\u5efa\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6f14\u793a\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <p>$demo_ner_pipeline</p> <p>\u200b\u672c\u200b\u6559\u7a0b\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b NER \u200b\u6a21\u578b\u200b\u5e76\u200b\u4f7f\u7528\u200b Gradio \u200b\u754c\u9762\u200b\u90e8\u7f72\u200b\u8be5\u200b\u6a21\u578b\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u5c55\u793a\u200b\u4e24\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u4f7f\u7528\u200b <code>HighlightedText</code> \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u65b9\u6cd5\u200b--\u200b\u6839\u636e\u200b\u60a8\u200b\u7684\u200b NER \u200b\u6a21\u578b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u5176\u4e2d\u200b\u4efb\u4f55\u200b\u4e00\u79cd\u200b\u66f4\u200b\u5bb9\u6613\u200b\u5b66\u4e60\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/named-entity-recognition/#_2","title":"\u73af\u5883\u200b\u8981\u6c42","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002\u200b\u60a8\u200b\u8fd8\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u547d\u540d\u200b\u5b9e\u4f53\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>transformers</code> \u200b\u5e93\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/named-entity-recognition/#_3","title":"\u65b9\u6cd5\u200b\u4e00\u200b\uff1a\u200b\u5b9e\u4f53\u200b\u5b57\u5178\u200b\u5217\u8868","text":"<p>\u200b\u8bb8\u591a\u200b\u547d\u540d\u200b\u5b9e\u4f53\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b57\u5178\u200b\u5217\u8868\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u5b57\u5178\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u5b9e\u4f53\u200b\uff0c\u200b\u4e00\u4e2a\u200b \" \u200b\u8d77\u59cb\u200b \" \u200b\u7d22\u5f15\u200b\u548c\u200b\u4e00\u4e2a\u200b \" \u200b\u7ed3\u675f\u200b \" \u200b\u7d22\u5f15\u200b\u3002\u200b\u8fd9\u200b\u5c31\u662f\u200b <code>transformers</code> \u200b\u5e93\u4e2d\u200b\u7684\u200b NER \u200b\u6a21\u578b\u200b\u7684\u200b\u64cd\u4f5c\u200b\u65b9\u5f0f\u200b\u3002</p> <pre><code>from transformers import pipeline\nner_pipeline = pipeline(\"ner\")\nner_pipeline(\"\u200b\u829d\u52a0\u54e5\u200b\u6709\u200b\u5df4\u57fa\u65af\u5766\u200b\u9910\u5385\u200b\u5417\u200b\uff1f\")\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a</p> <pre><code>[{'entity': 'I-LOC',\n  'score': 0.9988978,\n  'index': 2,\n  'word': 'Chicago',\n  'start': 5,\n  'end': 12},\n {'entity': 'I-MISC',\n  'score': 0.9958592,\n  'index': 5,\n  'word': 'Pakistani',\n  'start': 22,\n  'end': 31}]\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u6709\u200b\u8fd9\u6837\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u8fde\u63a5\u200b\u5230\u200b Gradio \u200b\u7684\u200b <code>HighlightedText</code> \u200b\u7ec4\u4ef6\u200b\u975e\u5e38\u7b80\u5355\u200b\u3002\u200b\u60a8\u200b\u53ea\u200b\u9700\u8981\u200b\u5c06\u200b\u8fd9\u4e2a\u200b\u5b9e\u4f53\u200b\u5217\u8868\u200b\u4e0e\u200b\u539f\u59cb\u200b\u6587\u672c\u200b\u4ee5\u200b\u5b57\u5178\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6a21\u578b\u200b\uff0c\u200b\u5176\u4e2d\u200b\u952e\u200b\u5206\u522b\u200b\u4e3a\u200b <code>\"entities\"</code> \u200b\u548c\u200b <code>\"text\"</code>\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <p>$code_ner_pipeline $demo_ner_pipeline</p>"},{"location":"cn/07_other-tutorials/named-entity-recognition/#_4","title":"\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a\u200b\u5143\u7ec4\u200b\u5217\u8868","text":"<p>\u200b\u5c06\u200b\u6570\u636e\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>HighlightedText</code> \u200b\u7ec4\u4ef6\u200b\u7684\u200b\u53e6\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4f7f\u7528\u200b\u5143\u7ec4\u200b\u5217\u8868\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u5143\u7ec4\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u5e94\u8be5\u200b\u662f\u200b\u88ab\u200b\u5f52\u7c7b\u200b\u4e3a\u200b\u7279\u5b9a\u200b\u5b9e\u4f53\u200b\u7684\u200b\u5355\u8bcd\u200b\u6216\u200b\u8bcd\u7ec4\u200b\u3002\u200b\u7b2c\u4e8c\u4e2a\u200b\u5143\u7d20\u200b\u5e94\u8be5\u200b\u662f\u200b\u5b9e\u4f53\u200b\u6807\u7b7e\u200b\uff08\u200b\u5982\u679c\u200b\u4e0d\u200b\u9700\u8981\u200b\u6807\u7b7e\u200b\uff0c\u200b\u5219\u200b\u4e3a\u200b <code>None</code>\uff09\u3002<code>HighlightedText</code> \u200b\u7ec4\u4ef6\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u7ec4\u5408\u200b\u5355\u8bcd\u200b\u548c\u200b\u6807\u7b7e\u200b\u6765\u200b\u663e\u793a\u200b\u5b9e\u4f53\u200b\u3002</p> <p>\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u6bd4\u200b\u7b2c\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u66f4\u200b\u7b80\u5355\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b Spacy \u200b\u7684\u200b\u8bcd\u6027\u200b\u6807\u6ce8\u200b\u5668\u200b\u6f14\u793a\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <p>$code_text_analysis $demo_text_analysis</p> <p>\u200b\u5230\u6b64\u4e3a\u6b62\u200b\uff01\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u4e86\u89e3\u200b\u4e86\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b NER \u200b\u6a21\u578b\u200b\u6784\u5efa\u200b\u57fa\u4e8e\u200b Web \u200b\u7684\u200b\u56fe\u5f62\u7528\u6237\u754c\u9762\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u5168\u90e8\u5185\u5bb9\u200b\u3002</p> <p>\u200b\u6709\u8da3\u200b\u7684\u200b\u63d0\u793a\u200b\uff1a\u200b\u53ea\u200b\u9700\u200b\u5728\u200b <code>launch()</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>share=True</code>\uff0c\u200b\u5373\u53ef\u200b\u7acb\u5373\u200b\u4e0e\u200b\u5176\u4ed6\u4eba\u200b\u5206\u4eab\u200b\u60a8\u200b\u7684\u200b NER \u200b\u6f14\u793a\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/","title":"\u5b9e\u65f6\u200b\u8bed\u97f3\u200b\u8bc6\u522b","text":"<p>Related spaces: https://huggingface.co/spaces/abidlabs/streaming-asr-paused, https://huggingface.co/spaces/abidlabs/full-context-asr Tags: ASR, SPEECH, STREAMING</p>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/#_2","title":"\u4ecb\u7ecd","text":"<p>\u200b\u81ea\u52a8\u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\uff08ASR\uff09\u200b\u662f\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u4e2d\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u4e14\u200b\u84ec\u52c3\u53d1\u5c55\u200b\u7684\u200b\u9886\u57df\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u53e3\u8bed\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6587\u672c\u200b\u3002ASR \u200b\u7b97\u6cd5\u200b\u51e0\u4e4e\u200b\u5728\u200b\u6bcf\u90e8\u200b\u667a\u80fd\u624b\u673a\u200b\u4e0a\u200b\u90fd\u200b\u6709\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5e76\u200b\u8d8a\u6765\u8d8a\u200b\u591a\u5730\u200b\u5d4c\u5165\u200b\u5230\u200b\u4e13\u4e1a\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u4f8b\u5982\u200b\u62a4\u58eb\u200b\u548c\u200b\u533b\u751f\u200b\u7684\u200b\u6570\u5b57\u200b\u52a9\u624b\u200b\u3002\u200b\u7531\u4e8e\u200b ASR \u200b\u7b97\u6cd5\u200b\u662f\u200b\u76f4\u63a5\u200b\u9762\u5411\u200b\u5ba2\u6237\u200b\u548c\u200b\u6700\u7ec8\u7528\u6237\u200b\u8bbe\u8ba1\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5728\u200b\u9762\u5bf9\u200b\u5404\u79cd\u200b\u8bed\u97f3\u200b\u6a21\u5f0f\u200b\uff08\u200b\u4e0d\u540c\u200b\u7684\u200b\u53e3\u97f3\u200b\u3001\u200b\u97f3\u8c03\u200b\u548c\u200b\u80cc\u666f\u200b\u97f3\u9891\u200b\u6761\u4ef6\u200b\uff09\u200b\u65f6\u200b\uff0c\u200b\u9a8c\u8bc1\u200b\u5b83\u4eec\u200b\u7684\u200b\u884c\u4e3a\u200b\u662f\u5426\u200b\u7b26\u5408\u200b\u9884\u671f\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b <code>gradio</code>\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b ASR \u200b\u6a21\u578b\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u5e76\u200b\u4e0e\u200b\u6d4b\u8bd5\u200b\u56e2\u961f\u200b\u5171\u4eab\u200b\uff0c\u200b\u6216\u200b\u901a\u8fc7\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u7684\u200b\u9ea6\u514b\u98ce\u200b\u8fdb\u884c\u200b\u81ea\u884c\u200b\u6d4b\u8bd5\u200b\u3002</p> <p>\u200b\u672c\u200b\u6559\u7a0b\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u5e76\u200b\u5728\u200b Gradio \u200b\u754c\u9762\u200b\u4e0a\u200b\u90e8\u7f72\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ece\u200b\u4e00\u4e2a\u200b full-context \u200b\u5168\u6587\u200b\u6a21\u578b\u200b\u5f00\u59cb\u200b\uff0c\u200b\u5176\u4e2d\u200b\u7528\u6237\u200b\u5728\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u4e4b\u524d\u200b\u8981\u8bf4\u200b\u5b8c\u6574\u200b\u6bb5\u200b\u97f3\u9891\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8c03\u6574\u200b\u6f14\u793a\u200b\u4ee5\u4f7f\u200b\u5176\u200b\u53d8\u4e3a\u200b streaming \u200b\u6d41\u5f0f\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u97f3\u9891\u200b\u6a21\u578b\u200b\u5c06\u200b\u5728\u200b\u60a8\u200b\u8bf4\u8bdd\u200b\u65f6\u200b\u5c06\u200b\u8bed\u97f3\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6587\u672c\u200b\u3002\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u7684\u200b\u6d41\u5f0f\u200b\u6f14\u793a\u200b\u5c06\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff08\u200b\u5728\u200b\u4e0b\u65b9\u200b\u5c1d\u8bd5\u200b\u6216\u200b\u5728\u200b\u65b0\u200b\u6807\u7b7e\u200b\u9875\u200b\u4e2d\u200b\u6253\u5f00\u200b\uff09\uff1a</p> <p>\u200b\u5b9e\u65f6\u200b ASR \u200b\u672c\u8d28\u200b\u4e0a\u200b\u662f\u200b\u6709\u200b\u72b6\u6001\u200b\u7684\u200b\uff0c\u200b\u5373\u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u53d6\u51b3\u4e8e\u200b\u7528\u6237\u200b\u5148\u524d\u200b\u8bf4\u200b\u7684\u200b\u5355\u8bcd\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u5728\u200b Gradio \u200b\u6f14\u793a\u200b\u4e2d\u200b\u4f7f\u7528\u200b state\u3002</p>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/#_3","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gradio</code> Python \u200b\u5305\u200b\u3002\u200b\u60a8\u200b\u8fd8\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u7684\u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ece\u200b\u4e24\u4e2a\u200b ASR \u200b\u5e93\u200b\u6784\u5efa\u200b\u6f14\u793a\u200b\uff1a</p> <ul> <li>Transformers\uff08\u200b\u4e3a\u6b64\u200b\uff0c<code>pip install transformers</code> \u200b\u548c\u200b <code>pip install torch</code>\uff09* DeepSpeech\uff08<code>pip install deepspeech==0.8.2</code>\uff09</li> </ul> <p>\u200b\u786e\u4fdd\u60a8\u200b\u81f3\u5c11\u200b\u5b89\u88c5\u200b\u4e86\u200b\u5176\u4e2d\u200b\u4e4b\u4e00\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8ddf\u968f\u200b\u672c\u200b\u6559\u7a0b\u200b\u64cd\u4f5c\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u5c1a\u672a\u200b\u5b89\u88c5\u200b <code>ffmpeg</code>\uff0c\u200b\u8bf7\u200b\u5728\u200b\u7cfb\u7edf\u200b\u4e0a\u200b\u4e0b\u8f7d\u200b\u5e76\u200b\u5b89\u88c5\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4ece\u200b\u9ea6\u514b\u98ce\u200b\u5904\u7406\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u6784\u5efa\u200b\u5b9e\u65f6\u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\uff08ASR\uff09\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u8bbe\u7f6e\u200b Transformers ASR \u200b\u6a21\u578b\u200b</li> <li>[\u200b\u4f7f\u7528\u200b Transformers \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5168\u6587\u200b ASR \u200b\u6f14\u793a\u200b]    (#2-create-a-full-context-asr-demo-with-transformers)</li> <li>\u200b\u4f7f\u7528\u200b Transformers \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6d41\u5f0f\u200b ASR \u200b\u6f14\u793a\u200b</li> <li>\u200b\u4f7f\u7528\u200b DeepSpeech \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6d41\u5f0f\u200b ASR \u200b\u6f14\u793a\u200b</li> </ol>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/#1-transformers-asr","title":"1. \u200b\u8bbe\u7f6e\u200b Transformers ASR \u200b\u6a21\u578b","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b ASR \u200b\u6a21\u578b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u81ea\u5df1\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u6216\u8005\u200b\u9700\u8981\u200b\u4e0b\u8f7d\u200b\u4e00\u4e2a\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u672c\u200b\u6559\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b Hugging Face \u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u200b\u8bad\u7ec3\u200b ASR \u200b\u6a21\u578b\u200b <code>Wav2Vec2</code>\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u4ece\u200b Hugging Face \u200b\u7684\u200b <code>transformers</code> \u200b\u52a0\u8f7d\u200b <code>Wav2Vec2</code> \u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> <pre><code>from transformers import pipeline\np = pipeline(\"automatic-speech-recognition\")\n</code></pre> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u81ea\u52a8\u200b\u8bed\u97f3\u200b\u8bc6\u522b\u200b\u6a21\u578b\u200b\u7ba1\u9053\u200b\u4f1a\u200b\u52a0\u8f7d\u200b Facebook \u200b\u7684\u200b <code>facebook/wav2vec2-base-960h</code> \u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/#2-transformers-asr","title":"2. \u200b\u4f7f\u7528\u200b Transformers \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5168\u6587\u200b ASR \u200b\u6f14\u793a","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u9996\u5148\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5168\u6587\u200bASR \u200b\u6f14\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u7528\u6237\u200b\u5728\u200b\u4f7f\u7528\u200b ASR \u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u4e4b\u524d\u200b\u8bf4\u200b\u5b8c\u6574\u200b\u6bb5\u200b\u97f3\u9891\u200b\u3002\u200b\u4f7f\u7528\u200b Gradio \u200b\u975e\u5e38\u7b80\u5355\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b <code>pipeline</code> \u200b\u5bf9\u8c61\u200b\u5468\u56f4\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>gradio</code> \u200b\u5185\u7f6e\u200b\u7684\u200b <code>Audio</code> \u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u914d\u7f6e\u200b\u4ece\u200b\u7528\u6237\u200b\u7684\u200b\u9ea6\u514b\u98ce\u200b\u63a5\u6536\u200b\u8f93\u5165\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5f55\u5236\u200b\u97f3\u9891\u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u3002\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u5c06\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b <code>Textbox</code>\u3002</p> <pre><code>import gradio as gr\n\ndef transcribe(audio):\n    text = p(audio)[\"text\"]\n    return text\n\ngr.Interface(\n    fn=transcribe,\n    inputs=gr.Audio(sources=[\"microphone\"], type=\"filepath\"),\n    outputs=\"text\").launch()\n</code></pre> <p>\u200b\u90a3\u4e48\u200b\u8fd9\u91cc\u200b\u53d1\u751f\u200b\u4e86\u200b\u4ec0\u4e48\u200b\uff1f<code>transcribe</code> \u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b <code>audio</code>\uff0c\u200b\u5b83\u200b\u662f\u200b\u7528\u6237\u200b\u5f55\u5236\u200b\u7684\u200b\u97f3\u9891\u6587\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u3002<code>pipeline</code> \u200b\u5bf9\u8c61\u200b\u671f\u671b\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6587\u672c\u200b\uff0c\u200b\u7136\u540e\u200b\u8fd4\u56de\u200b\u5230\u200b\u524d\u7aef\u200b\u5e76\u200b\u5728\u200b\u6587\u672c\u6846\u200b\u4e2d\u200b\u663e\u793a\u200b\u3002</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200b\u5b83\u200b\u7684\u200b\u6548\u679c\u200b\u5427\u200b\uff01\uff08\u200b\u5f55\u5236\u200b\u4e00\u6bb5\u200b\u77ed\u200b\u97f3\u9891\u200b\u5e76\u200b\u70b9\u51fb\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u6216\u200b\u5728\u200b\u65b0\u200b\u6807\u7b7e\u200b\u9875\u200b\u6253\u5f00\u200b\uff09\uff1a</p>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/#3-transformers-asr","title":"3. \u200b\u4f7f\u7528\u200b Transformers \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6d41\u5f0f\u200b ASR \u200b\u6f14\u793a","text":"<p>\u200b\u592a\u68d2\u4e86\u200b\uff01\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u6784\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5bf9\u200b\u77ed\u200b\u97f3\u9891\u200b\u526a\u8f91\u200b\u6548\u679c\u200b\u826f\u597d\u200b\u7684\u200b ASR \u200b\u6a21\u578b\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u6b63\u5728\u200b\u8bb0\u5f55\u200b\u8f83\u957f\u200b\u7684\u200b\u97f3\u9891\u200b\u526a\u8f91\u200b\uff0c\u200b\u5219\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u6d41\u5f0f\u200b\u754c\u9762\u200b\uff0c\u200b\u5373\u200b\u5728\u200b\u7528\u6237\u200b\u8bf4\u8bdd\u200b\u65f6\u200b\u9010\u53e5\u200b\u8f6c\u5f55\u200b\u97f3\u9891\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4ec5\u4ec5\u200b\u5728\u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u5168\u90e8\u200b\u8f6c\u5f55\u200b\u3002</p> <p>\u200b\u597d\u6d88\u606f\u200b\u662f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u5bb9\u6613\u200b\u5730\u200b\u8c03\u6574\u200b\u521a\u521a\u200b\u521b\u5efa\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u6210\u4e3a\u200b\u6d41\u5f0f\u200b\u7684\u200b\uff0c\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200b <code>Wav2Vec2</code> \u200b\u6a21\u578b\u200b\u3002</p> <p>\u200b\u6700\u5927\u200b\u7684\u200b\u53d8\u5316\u200b\u662f\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u5fc5\u987b\u200b\u5f15\u5165\u200b\u4e00\u4e2a\u200b <code>state</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u5b83\u200b\u4fdd\u5b58\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\u8f6c\u5f55\u200b\u7684\u200b\u97f3\u9891\u200b\u3002\u200b\u8fd9\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u200b\u5904\u7406\u200b\u6700\u65b0\u200b\u7684\u200b\u97f3\u9891\u200b\u5757\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u7b80\u5355\u200b\u5730\u200b\u8ffd\u52a0\u200b\u5230\u200b\u5148\u524d\u200b\u8f6c\u5f55\u200b\u7684\u200b\u97f3\u9891\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5728\u200b\u5411\u200b Gradio \u200b\u6f14\u793a\u200b\u6dfb\u52a0\u200b\u72b6\u6001\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5b8c\u6210\u200b 3 \u200b\u4ef6\u200b\u4e8b\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200b\u51fd\u6570\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>state</code> \u200b\u53c2\u6570\u200b \u200b\u5728\u200b\u51fd\u6570\u200b\u672b\u5c3e\u200b\u8fd4\u56de\u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b <code>state</code> \u200b\u5728\u200b <code>Interface</code> \u200b\u7684\u200b <code>inputs</code> \u200b\u548c\u200b <code>outputs</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>\"state\"</code> \u200b\u7ec4\u4ef6\u200b</li> </ul> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>def transcribe(audio, state=\"\"):\n    text = p(audio)[\"text\"]\n    state += text + \" \"\n    return state, state\n\n# Set the starting state to an empty string\ngr.Interface(\n    fn=transcribe,\n    inputs=[\n        gr.Audio(sources=[\"microphone\"], type=\"filepath\", streaming=True),\n        \"state\"\n    ],\n    outputs=[\n        \"textbox\",\n        \"state\"\n    ],\n    live=True).launch()\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u8fdb\u884c\u200b\u4e86\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u66f4\u6539\u200b\uff0c\u200b\u5373\u200b\u6211\u4eec\u200b\u8bbe\u7f6e\u200b\u4e86\u200b <code>live=True</code>\u3002\u200b\u8fd9\u200b\u4f7f\u5f97\u200b Gradio \u200b\u63a5\u53e3\u200b\u4fdd\u6301\u200b\u6301\u7eed\u200b\u8fd0\u884c\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u8f6c\u5f55\u200b\u97f3\u9891\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u7528\u6237\u200b\u53cd\u590d\u200b\u70b9\u51fb\u200b\u63d0\u4ea4\u200b\u6309\u94ae\u200b\u3002</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200b\u5b83\u200b\u7684\u200b\u6548\u679c\u200b\uff08\u200b\u5728\u200b\u4e0b\u65b9\u200b\u5c1d\u8bd5\u200b\u6216\u200b\u5728\u200b\u65b0\u200b\u6807\u7b7e\u200b\u9875\u200b\u4e2d\u200b\u6253\u5f00\u200b\uff09\uff01</p> <p>\u200b\u4f60\u200b\u53ef\u80fd\u200b\u6ce8\u610f\u200b\u5230\u200b\u7684\u200b\u4e00\u4ef6\u200b\u4e8b\u662f\u200b\uff0c\u200b\u7531\u4e8e\u200b\u97f3\u9891\u200b\u5757\u200b\u975e\u5e38\u200b\u5c0f\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8f6c\u5f55\u200b\u8d28\u91cf\u200b\u4e0b\u964d\u200b\u4e86\u200b\uff0c\u200b\u5b83\u4eec\u200b\u7f3a\u4e4f\u200b\u6b63\u786e\u200b\u8f6c\u5f55\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u3002\u200b\u6b64\u200b\u95ee\u9898\u200b\u7684\u200b\u201chacky\u201d\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\u662f\u200b\u7b80\u5355\u200b\u5730\u200b\u589e\u52a0\u200b <code>transcribe()</code> \u200b\u51fd\u6570\u200b\u7684\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5904\u7406\u200b\u66f4\u957f\u200b\u7684\u200b\u97f3\u9891\u200b\u5757\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u51fd\u6570\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>time.sleep()</code> \u200b\u6765\u200b\u5b9e\u73b0\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff08\u200b\u63a5\u4e0b\u6765\u200b\u6211\u4eec\u200b\u5c06\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u6b63\u786e\u200b\u7684\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff09</p> <pre><code>from transformers import pipeline\nimport gradio as gr\nimport time\n\np = pipeline(\"automatic-speech-recognition\")\n\ndef transcribe(audio, state=\"\"):\n    time.sleep(2)\n    text = p(audio)[\"text\"]\n    state += text + \" \"\n    return state, state\n\ngr.Interface(\n    fn=transcribe,\n    inputs=[\n        gr.Audio(sources=[\"microphone\"], type=\"filepath\", streaming=True),\n        \"state\"\n    ],\n    outputs=[\n        \"textbox\",\n        \"state\"\n    ],\n    live=True).launch()\n</code></pre> <p>\u200b\u5c1d\u8bd5\u200b\u4e0b\u9762\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u67e5\u770b\u200b\u5dee\u5f02\u200b\uff08\u200b\u6216\u200b\u5728\u200b\u65b0\u200b\u6807\u7b7e\u200b\u9875\u200b\u4e2d\u200b\u6253\u5f00\u200b\uff09\uff01</p>"},{"location":"cn/07_other-tutorials/real-time-speech-recognition/#4-deepspeech-asr","title":"4. \u200b\u4f7f\u7528\u200b DeepSpeech \u200b\u521b\u5efa\u200b\u6d41\u5f0f\u200b ASR \u200b\u6f14\u793a","text":"<p>\u200b\u60a8\u200b\u4e0d\u4ec5\u200b\u9650\u4e8e\u200b\u4f7f\u7528\u200b <code>transformers</code> \u200b\u5e93\u4e2d\u200b\u7684\u200b ASR \u200b\u6a21\u578b\u200b - \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u81ea\u5df1\u200b\u7684\u200b\u6a21\u578b\u200b\u6216\u200b\u5176\u4ed6\u200b\u5e93\u4e2d\u200b\u7684\u200b\u6a21\u578b\u200b\u3002<code>DeepSpeech</code> \u200b\u5e93\u200b\u5305\u542b\u200b\u4e13\u95e8\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u6d41\u5f0f\u200b\u97f3\u9891\u200b\u6570\u636e\u200b\u7684\u200b\u6a21\u578b\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u6a21\u578b\u200b\u5728\u200b\u5904\u7406\u200b\u6d41\u5f0f\u200b\u6570\u636e\u200b\u65f6\u200b\u8868\u73b0\u200b\u975e\u5e38\u200b\u597d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u80fd\u591f\u200b\u8003\u8651\u200b\u5230\u200b\u5148\u524d\u200b\u7684\u200b\u97f3\u9891\u200b\u5757\u200b\u5728\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\u65f6\u200b\u4ea7\u751f\u200b\u7684\u200b\u5f71\u54cd\u200b\u3002</p> <p>\u200b\u6df1\u5165\u7814\u7a76\u200b DeepSpeech \u200b\u5e93\u200b\u8d85\u51fa\u200b\u4e86\u200b\u672c\u200b\u6307\u5357\u200b\u7684\u200b\u8303\u56f4\u200b\uff08\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6b64\u5904\u200b\u67e5\u770b\u200b\u5176\u200b\u4f18\u79c0\u200b\u7684\u200b\u6587\u6863\u200b\uff09\uff0c\u200b\u4f46\u662f\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u4f7f\u7528\u200b Transformer ASR \u200b\u6a21\u578b\u200b\u4e00\u6837\u200b\uff0c\u200b\u4f7f\u7528\u200b DeepSpeech ASR \u200b\u6a21\u578b\u200b\u4f7f\u7528\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u65b9\u6cd5\u200b\u4f7f\u7528\u200b Gradio\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u7684\u200b\u793a\u4f8b\u200b\uff08\u200b\u5728\u200b Linux \u200b\u4e0a\u200b\uff09\uff1a</p> <p>\u200b\u9996\u5148\u200b\u901a\u8fc7\u200b\u7ec8\u7aef\u200b\u5b89\u88c5\u200b DeepSpeech \u200b\u5e93\u200b\u5e76\u200b\u4e0b\u8f7d\u200b\u9884\u200b\u8bad\u7ec3\u200b\u6a21\u578b\u200b\uff1a</p> <pre><code>wget https://github.com/mozilla/DeepSpeech/releases/download/v0.8.2/deepspeech-0.8.2-models.pbmm\nwget https://github.com/mozilla/DeepSpeech/releases/download/v0.8.2/deepspeech-0.8.2-models.scorer\napt install libasound2-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg\npip install deepspeech==0.8.2\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u521b\u5efa\u200b\u4e0e\u200b\u4e4b\u524d\u200b\u76f8\u4f3c\u200b\u7684\u200b <code>transcribe()</code> \u200b\u51fd\u6570\u200b\uff1a</p> <pre><code>from deepspeech import Model\nimport numpy as np\n\nmodel_file_path = \"deepspeech-0.8.2-models.pbmm\"\nlm_file_path = \"deepspeech-0.8.2-models.scorer\"\nbeam_width = 100\nlm_alpha = 0.93\nlm_beta = 1.18\n\nmodel = Model(model_file_path)\nmodel.enableExternalScorer(lm_file_path)\nmodel.setScorerAlphaBeta(lm_alpha, lm_beta)\nmodel.setBeamWidth(beam_width)\n\n\ndef reformat_freq(sr, y):\n    if sr not in (\n        48000,\n        16000,\n    ):  # Deepspeech only supports 16k, (we convert 48k -&gt; 16k)\n        raise ValueError(\"Unsupported rate\", sr)\n    if sr == 48000:\n        y = (\n            ((y / max(np.max(y), 1)) * 32767)\n            .reshape((-1, 3))\n            .mean(axis=1)\n            .astype(\"int16\")\n        )\n        sr = 16000\n    return sr, y\n\n\ndef transcribe(speech, stream):\n    _, y = reformat_freq(*speech)\n    if stream is None:\n        stream = model.createStream()\n    stream.feedAudioContent(y)\n    text = stream.intermediateDecode()\n    return text, stream\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u5982\u524d\u6240\u8ff0\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b Gradio \u200b\u63a5\u53e3\u200b\uff08\u200b\u552f\u4e00\u200b\u7684\u200b\u533a\u522b\u200b\u662f\u200b\u8fd4\u56de\u200b\u7c7b\u578b\u200b\u5e94\u8be5\u200b\u662f\u200b <code>numpy</code> \u200b\u800c\u200b\u4e0d\u662f\u200b <code>filepath</code> \u200b\u4ee5\u200b\u4e0e\u200b DeepSpeech \u200b\u6a21\u578b\u200b\u517c\u5bb9\u200b\uff09</p> <pre><code>import gradio as gr\n\ngr.Interface(\n    fn=transcribe,\n    inputs=[\n        gr.Audio(sources=[\"microphone\"], type=\"numpy\"),\n        \"state\"\n    ],\n    outputs= [\n        \"text\",\n        \"state\"\n    ],\n    live=True).launch()\n</code></pre> <p>\u200b\u8fd0\u884c\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u5e94\u8be5\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u6f02\u4eae\u200b\u7684\u200b GUI \u200b\u90e8\u7f72\u200b\u5b9e\u65f6\u200b ASR \u200b\u6a21\u578b\u200b\u3002\u200b\u5c1d\u8bd5\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u770b\u200b\u5b83\u200b\u5728\u200b\u60a8\u200b\u90a3\u91cc\u200b\u8fd0\u884c\u200b\u5f97\u200b\u6709\u200b\u591a\u200b\u597d\u200b\u3002</p> <p>\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u5b8c\u6210\u200b\u4e86\u200b\uff01\u200b\u8fd9\u200b\u5c31\u662f\u200b\u6784\u5efa\u200b\u7528\u4e8e\u200b ASR \u200b\u6a21\u578b\u200b\u7684\u200b\u57fa\u4e8e\u200b Web \u200b\u7684\u200b GUI \u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u4ee3\u7801\u200b\u3002</p> <p>\u200b\u6709\u8da3\u200b\u7684\u200b\u63d0\u793a\u200b\uff1a\u200b\u60a8\u200b\u53ea\u200b\u9700\u200b\u5728\u200b <code>launch()</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>share=True</code>\uff0c\u200b\u5373\u53ef\u200b\u5373\u65f6\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5171\u4eab\u200b ASR \u200b\u6a21\u578b\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/running-background-tasks/","title":"\u8fd0\u884c\u200b\u540e\u53f0\u4efb\u52a1","text":"<p>Related spaces: https://huggingface.co/spaces/freddyaboulton/gradio-google-forms Tags: TASKS, SCHEDULED, TABULAR, DATA</p>"},{"location":"cn/07_other-tutorials/running-background-tasks/#_2","title":"\u7b80\u4ecb","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u4f55\u200b\u4ece\u200b gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u8fd0\u884c\u200b\u540e\u53f0\u4efb\u52a1\u200b\u3002 \u200b\u540e\u53f0\u4efb\u52a1\u200b\u662f\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u8bf7\u6c42\u200b-\u200b\u54cd\u5e94\u200b\u751f\u547d\u5468\u671f\u200b\u4e4b\u5916\u200b\u6267\u884c\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4e00\u6b21\u6027\u200b\u7684\u200b\u6216\u200b\u5b9a\u671f\u200b\u7684\u200b\u3002 \u200b\u540e\u53f0\u4efb\u52a1\u200b\u7684\u200b\u793a\u4f8b\u200b\u5305\u62ec\u200b\u5b9a\u671f\u200b\u5c06\u200b\u6570\u636e\u200b\u4e0e\u200b\u5916\u90e8\u200b\u6570\u636e\u5e93\u200b\u540c\u6b65\u200b\u6216\u200b\u901a\u8fc7\u200b\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u200b\u6a21\u578b\u200b\u9884\u6d4b\u200b\u62a5\u544a\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/running-background-tasks/#_3","title":"\u6982\u8ff0","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u201cGoogle Forms\u201d\u200b\u98ce\u683c\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6536\u96c6\u200b gradio \u200b\u5e93\u200b\u7684\u200b\u7528\u6237\u200b\u53cd\u9988\u200b\u3002 \u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u672c\u5730\u200b sqlite \u200b\u6570\u636e\u5e93\u200b\u6765\u200b\u5b58\u50a8\u200b\u6570\u636e\u200b\uff0c\u200b\u4f46\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b9a\u671f\u200b\u5c06\u200b\u6570\u636e\u5e93\u200b\u7684\u200b\u72b6\u6001\u200b\u4e0e\u200bHuggingFace Dataset\u200b\u540c\u6b65\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u59cb\u7ec8\u200b\u5907\u4efd\u200b\u6211\u4eec\u200b\u7684\u200b\u7528\u6237\u200b\u8bc4\u8bba\u200b\u3002 \u200b\u540c\u6b65\u200b\u5c06\u200b\u5728\u200b\u6bcf\u200b 60 \u200b\u79d2\u200b\u8fd0\u884c\u200b\u7684\u200b\u540e\u53f0\u4efb\u52a1\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u3002</p> <p>\u200b\u5728\u200b\u6f14\u793a\u200b\u7ed3\u675f\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b\u5b8c\u5168\u200b\u53ef\u200b\u5de5\u4f5c\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u4ee5\u4e0b\u200b\u5e94\u7528\u7a0b\u5e8f\u200b :</p> <p> </p>"},{"location":"cn/07_other-tutorials/running-background-tasks/#-","title":"\u7b2c\u4e00\u6b65\u200b - \u200b\u7f16\u5199\u200b\u6570\u636e\u5e93\u200b\u903b\u8f91\u200b \ud83d\udcbe","text":"<p>\u200b\u6211\u4eec\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5c06\u200b\u5b58\u50a8\u200b\u8bc4\u8bba\u8005\u200b\u7684\u200b\u59d3\u540d\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u5bf9\u200b gradio \u200b\u7ed9\u51fa\u200b\u7684\u200b\u8bc4\u5206\u200b\uff081 \u200b\u5230\u200b 5 \u200b\u7684\u200b\u8303\u56f4\u200b\uff09\uff0c\u200b\u4ee5\u53ca\u200b\u4ed6\u4eec\u200b\u60f3\u8981\u200b\u5206\u4eab\u200b\u7684\u200b\u5173\u4e8e\u200b\u8be5\u5e93\u200b\u7684\u200b\u4efb\u4f55\u200b\u8bc4\u8bba\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u7f16\u5199\u200b\u4e00\u4e9b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6570\u636e\u5e93\u200b\u8868\u6765\u200b\u5b58\u50a8\u200b\u8fd9\u4e9b\u200b\u6570\u636e\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u7f16\u5199\u200b\u4e00\u4e9b\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u200b\u5c06\u200b\u8bc4\u8bba\u200b\u63d2\u5165\u200b\u8be5\u8868\u4e2d\u200b\u5e76\u200b\u83b7\u53d6\u200b\u6700\u65b0\u200b\u7684\u200b 10 \u200b\u6761\u200b\u8bc4\u8bba\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>sqlite3</code> \u200b\u5e93\u6765\u200b\u8fde\u63a5\u200b\u6211\u4eec\u200b\u7684\u200b sqlite \u200b\u6570\u636e\u5e93\u200b\uff0c\u200b\u4f46\u200b gradio \u200b\u53ef\u4ee5\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u5e93\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b :</p> <pre><code>DB_FILE = \"./reviews.db\"\ndb = sqlite3.connect(DB_FILE)\n\n# Create table if it doesn't already exist\ntry:\n    db.execute(\"SELECT * FROM reviews\").fetchall()\n    db.close()\nexcept sqlite3.OperationalError:\n    db.execute(\n        '''\n        CREATE TABLE reviews (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\n                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n                              name TEXT, review INTEGER, comments TEXT)\n        ''')\n    db.commit()\n    db.close()\n\ndef get_latest_reviews(db: sqlite3.Connection):\n    reviews = db.execute(\"SELECT * FROM reviews ORDER BY id DESC limit 10\").fetchall()\n    total_reviews = db.execute(\"Select COUNT(id) from reviews\").fetchone()[0]\n    reviews = pd.DataFrame(reviews, columns=[\"id\", \"date_created\", \"name\", \"review\", \"comments\"])\n    return reviews, total_reviews\n\n\ndef add_review(name: str, review: int, comments: str):\n    db = sqlite3.connect(DB_FILE)\n    cursor = db.cursor()\n    cursor.execute(\"INSERT INTO reviews(name, review, comments) VALUES(?,?,?)\", [name, review, comments])\n    db.commit()\n    reviews, total_reviews = get_latest_reviews(db)\n    db.close()\n    return reviews, total_reviews\n</code></pre> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u5728\u200b gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u52a0\u8f7d\u200b\u6700\u65b0\u200b\u7684\u200b\u8bc4\u8bba\u200b :</p> <pre><code>def load_data():\n    db = sqlite3.connect(DB_FILE)\n    reviews, total_reviews = get_latest_reviews(db)\n    db.close()\n    return reviews, total_reviews\n</code></pre>"},{"location":"cn/07_other-tutorials/running-background-tasks/#-gradio","title":"\u7b2c\u4e8c\u6b65\u200b - \u200b\u521b\u5efa\u200b gradio \u200b\u5e94\u7528\u200b \u26a1","text":"<p>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u6570\u636e\u5e93\u200b\u903b\u8f91\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b gradio \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u200b\u7684\u200b\u7f51\u9875\u200b\u6765\u200b\u8be2\u95ee\u200b\u7528\u6237\u200b\u7684\u200b\u53cd\u9988\u200b\u610f\u89c1\u200b\uff01</p> <p>\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u6bb5\u200b :</p> <pre><code>with gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            name = gr.Textbox(label=\"Name\", placeholder=\"What is your name?\")\n            review = gr.Radio(label=\"How satisfied are you with using gradio?\", choices=[1, 2, 3, 4, 5])\n            comments = gr.Textbox(label=\"Comments\", lines=10, placeholder=\"Do you have any feedback on gradio?\")\n            submit = gr.Button(value=\"Submit Feedback\")\n        with gr.Column():\n            data = gr.Dataframe(label=\"Most recently created 10 rows\")\n            count = gr.Number(label=\"Total number of reviews\")\n    submit.click(add_review, [name, review, comments], [data, count])\n    demo.load(load_data, None, [data, count])\n</code></pre>"},{"location":"cn/07_other-tutorials/running-background-tasks/#-huggingface","title":"\u7b2c\u4e09\u6b65\u200b - \u200b\u4e0e\u200b HuggingFace \u200b\u6570\u636e\u200b\u96c6\u200b\u540c\u6b65\u200b \ud83e\udd17","text":"<p>\u200b\u5728\u200b\u7b2c\u200b 2 \u200b\u6b65\u540e\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b <code>demo.launch()</code> \u200b\u6765\u200b\u8fd0\u884c\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u529f\u80fd\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u6570\u636e\u200b\u5c06\u200b\u5b58\u50a8\u200b\u5728\u200b\u672c\u5730\u200b\u673a\u5668\u200b\u4e0a\u200b\u3002\u200b\u5982\u679c\u200b sqlite \u200b\u6587\u4ef6\u200b\u610f\u5916\u200b\u5220\u9664\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4e22\u5931\u200b\u6240\u6709\u200b\u8bc4\u8bba\u200b\uff01\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b\u6570\u636e\u5907\u4efd\u200b\u5230\u200b HuggingFace hub \u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u3002</p> <p>\u200b\u5728\u200b\u7ee7\u7eed\u200b\u4e4b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u6b64\u5904\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u6570\u636e\u200b\u96c6\u200b\u3002</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u5728\u200b\u6211\u4eec\u200b\u811a\u672c\u200b\u7684\u200b\u9876\u90e8\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200bhuggingface hub \u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\u8fde\u63a5\u200b\u5230\u200b\u6211\u4eec\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u5e76\u200b\u83b7\u53d6\u200b\u6700\u65b0\u200b\u7684\u200b\u5907\u4efd\u200b\u3002</p> <pre><code>TOKEN = os.environ.get('HUB_TOKEN')\nrepo = huggingface_hub.Repository(\n    local_dir=\"data\",\n    repo_type=\"dataset\",\n    clone_from=\"&lt;name-of-your-dataset&gt;\",\n    use_auth_token=TOKEN\n)\nrepo.git_pull()\n\nshutil.copyfile(\"./data/reviews.db\", DB_FILE)\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u4ece\u200b HuggingFace \u200b\u7684\u200b\u201c\u200b\u8bbe\u7f6e\u200b\u201d\u200b\u9009\u9879\u5361\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u8bbf\u95ee\u200b\u4ee4\u724c\u200b\uff0c\u200b\u4ee5\u4e0a\u200b\u4ee3\u7801\u200b\u624d\u80fd\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b\u3002\u200b\u5728\u200b\u811a\u672c\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u73af\u5883\u53d8\u91cf\u200b\u5b89\u5168\u200b\u8bbf\u95ee\u200b\u4ee4\u724c\u200b\u3002</p> <p></p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540e\u53f0\u4efb\u52a1\u200b\uff0c\u200b\u6bcf\u200b 60 \u200b\u79d2\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b\u672c\u5730\u200b\u6570\u636e\u5e93\u200b\u4e0e\u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u540c\u6b65\u200b\u4e00\u6b21\u200b\u3002 \u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200bAdvancedPythonScheduler\u200b\u6765\u200b\u5904\u7406\u200b\u8c03\u5ea6\u200b\u3002 \u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u200b\u5e76\u200b\u4e0d\u662f\u200b\u552f\u4e00\u200b\u53ef\u7528\u200b\u7684\u200b\u4efb\u52a1\u8c03\u5ea6\u200b\u5e93\u200b\u3002\u200b\u8bf7\u200b\u968f\u610f\u200b\u4f7f\u7528\u200b\u60a8\u200b\u719f\u6089\u200b\u7684\u200b\u4efb\u4f55\u200b\u5e93\u200b\u3002</p> <p>\u200b\u5907\u4efd\u200b\u6570\u636e\u200b\u7684\u200b\u51fd\u6570\u200b\u5982\u4e0b\u200b :</p> <pre><code>from apscheduler.schedulers.background import BackgroundScheduler\n\ndef backup_db():\n    shutil.copyfile(DB_FILE, \"./data/reviews.db\")\n    db = sqlite3.connect(DB_FILE)\n    reviews = db.execute(\"SELECT * FROM reviews\").fetchall()\n    pd.DataFrame(reviews).to_csv(\"./data/reviews.csv\", index=False)\n    print(\"updating db\")\n    repo.push_to_hub(blocking=False, commit_message=f\"Updating data at {datetime.datetime.now()}\")\n\n\nscheduler = BackgroundScheduler()\nscheduler.add_job(func=backup_db, trigger=\"interval\", seconds=60)\nscheduler.start()\n</code></pre>"},{"location":"cn/07_other-tutorials/running-background-tasks/#-huggingface-spaces","title":"\u7b2c\u56db\u6b65\u200b\uff08\u200b\u9644\u52a0\u200b\uff09- \u200b\u90e8\u7f72\u200b\u5230\u200b HuggingFace Spaces","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b HuggingFace Spaces \u200b\u5e73\u53f0\u200b\u514d\u8d39\u200b\u90e8\u7f72\u200b\u8fd9\u4e2a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b \u2728</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4e4b\u524d\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u8fc7\u200b Spaces\uff0c\u200b\u8bf7\u200b\u67e5\u770b\u200b\u6b64\u5904\u200b\u7684\u200b\u5148\u524d\u200b\u6307\u5357\u200b\u3002 \u200b\u60a8\u200b\u5c06\u200b\u9700\u8981\u200b\u5c06\u200b <code>HUB_TOKEN</code> \u200b\u73af\u5883\u53d8\u91cf\u200b\u4f5c\u4e3a\u200b\u6307\u5357\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u79d8\u5bc6\u200b\u4f7f\u7528\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/running-background-tasks/#_4","title":"\u7ed3\u8bba","text":"<p>\u200b\u606d\u559c\u200b\uff01\u200b\u60a8\u200b\u77e5\u9053\u200b\u5982\u4f55\u200b\u5728\u200b\u60a8\u200b\u7684\u200b gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u6309\u8ba1\u5212\u200b\u8fd0\u884c\u200b\u540e\u53f0\u4efb\u52a1\u200b\u23f2\ufe0f\u3002</p> <p>\u200b\u5728\u200b Spaces \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u53ef\u200b\u5728\u200b\u6b64\u5904\u200b\u67e5\u770b\u200b\u3002 \u200b\u5b8c\u6574\u200b\u7684\u200b\u4ee3\u7801\u200b\u5728\u200b\u6b64\u5904\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/running-gradio-on-your-web-server-with-nginx/","title":"\u5728\u200b Web \u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u4f7f\u7528\u200b Nginx \u200b\u8fd0\u884c\u200b Gradio \u200b\u5e94\u7528","text":"<p>\u200b\u6807\u7b7e\u200b\uff1a\u200b\u90e8\u7f72\u200b\uff0cWeb \u200b\u670d\u52a1\u5668\u200b\uff0cNginx</p>"},{"location":"cn/07_other-tutorials/running-gradio-on-your-web-server-with-nginx/#_1","title":"\u4ecb\u7ecd","text":"<p>Gradio \u200b\u662f\u200b\u4e00\u4e2a\u200b Python \u200b\u5e93\u200b\uff0c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5feb\u901f\u200b\u521b\u5efa\u200b\u53ef\u200b\u5b9a\u5236\u200b\u7684\u200b Web \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u7528\u4e8e\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u548c\u200b\u6570\u636e\u5904\u7406\u200b\u6d41\u6c34\u7ebf\u200b\u3002Gradio \u200b\u5e94\u7528\u200b\u53ef\u4ee5\u200b\u514d\u8d39\u200b\u90e8\u7f72\u200b\u5728\u200bHugging Face Spaces\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b Web \u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u90e8\u7f72\u200b Gradio \u200b\u5e94\u7528\u200b\u3002\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5df2\u7ecf\u200b\u5728\u200b\u4f7f\u7528\u200bNginx\u200b\u4f5c\u4e3a\u200b\u9ad8\u6027\u80fd\u200b\u7684\u200b Web \u200b\u670d\u52a1\u5668\u200b\u6765\u200b\u63d0\u4f9b\u200b\u60a8\u200b\u7684\u200b\u7f51\u7ad9\u200b\uff08\u200b\u4f8b\u5982\u200b <code>https://www.example.com</code>\uff09\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u5e0c\u671b\u200b\u5c06\u200b Gradio \u200b\u9644\u52a0\u200b\u5230\u200b\u7f51\u7ad9\u200b\u7684\u200b\u7279\u5b9a\u200b\u5b50\u200b\u8def\u5f84\u200b\u4e0a\u200b\uff08\u200b\u4f8b\u5982\u200b <code>https://www.example.com/gradio-demo</code>\uff09\u3002</p> <p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6307\u5bfc\u200b\u60a8\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b Web \u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u7684\u200b Nginx \u200b\u540e\u9762\u200b\u8fd0\u884c\u200b Gradio \u200b\u5e94\u7528\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u76ee\u7684\u200b\u3002</p> <p>\u200b\u5148\u51b3\u6761\u4ef6\u200b</p> <ol> <li> <p>\u200b\u5b89\u88c5\u200b\u4e86\u200b Nginx \u200b\u7684\u200b Linux Web \u200b\u670d\u52a1\u5668\u200b \u200b\u548c\u200b Gradio \u200b\u5e93\u200b</p> </li> <li> <p>\u200b\u5728\u200b Web \u200b\u670d\u52a1\u5668\u200b\u4e0a\u5c06\u200b Gradio \u200b\u5e94\u7528\u200b\u4fdd\u5b58\u200b\u4e3a\u200b Python \u200b\u6587\u4ef6\u200b</p> </li> </ol>"},{"location":"cn/07_other-tutorials/running-gradio-on-your-web-server-with-nginx/#nginx","title":"\u7f16\u8f91\u200b Nginx \u200b\u914d\u7f6e\u6587\u4ef6","text":"<ol> <li>\u200b\u9996\u5148\u200b\u7f16\u8f91\u200b Web \u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u7684\u200b Nginx \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6587\u4ef6\u200b\u4f4d\u4e8e\u200b\uff1a<code>/etc/nginx/nginx.conf</code></li> </ol> <p>\u200b\u5728\u200b <code>http</code> \u200b\u5757\u200b\u4e2d\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u884c\u4ee5\u200b\u4ece\u200b\u5355\u72ec\u200b\u7684\u200b\u6587\u4ef6\u200b\u5305\u542b\u200b\u670d\u52a1\u5668\u200b\u5757\u200b\u914d\u7f6e\u200b\uff1a</p> <pre><code>include /etc/nginx/sites-enabled/*;\n</code></pre> <ol> <li> <p>\u200b\u5728\u200b <code>/etc/nginx/sites-available</code> \u200b\u76ee\u5f55\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u6587\u4ef6\u200b\uff08\u200b\u5982\u679c\u200b\u76ee\u5f55\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5219\u200b\u521b\u5efa\u200b\uff09\uff0c\u200b\u6587\u4ef6\u540d\u200b\u8868\u793a\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1a<code>sudo nano /etc/nginx/sites-available/my_gradio_app</code></p> </li> <li> <p>\u200b\u5c06\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u7c98\u8d34\u200b\u5230\u200b\u6587\u4ef6\u200b\u7f16\u8f91\u5668\u200b\u4e2d\u200b\uff1a</p> </li> </ol> <pre><code>server {\n    listen 80;\n    server_name example.com www.example.com;  # \u200b\u5c06\u200b\u6b64\u9879\u200b\u66f4\u200b\u6539\u4e3a\u200b\u60a8\u200b\u7684\u200b\u57df\u540d\u200b\n\n    location /gradio-demo/ {  # \u200b\u5982\u679c\u200b\u8981\u200b\u5728\u200b\u4e0d\u540c\u200b\u8def\u5f84\u200b\u4e0a\u200b\u63d0\u4f9b\u200bGradio\u200b\u5e94\u7528\u200b\uff0c\u200b\u8bf7\u200b\u66f4\u6539\u200b\u6b64\u9879\u200b\n        proxy_pass http://127.0.0.1:7860/; # \u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200bGradio\u200b\u5e94\u7528\u200b\u5c06\u200b\u5728\u200b\u4e0d\u540c\u200b\u7aef\u53e3\u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u8bf7\u200b\u66f4\u6539\u200b\u6b64\u9879\u200b\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n    }\n}\n</code></pre>"},{"location":"cn/07_other-tutorials/running-gradio-on-your-web-server-with-nginx/#web-gradio","title":"\u5728\u200b Web \u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u8fd0\u884c\u200b Gradio \u200b\u5e94\u7528","text":"<ol> <li>\u200b\u5728\u200b\u542f\u52a8\u200b Gradio \u200b\u5e94\u7528\u200b\u4e4b\u524d\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u5c06\u200b <code>root_path</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u4e0e\u200b Nginx \u200b\u914d\u7f6e\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u7684\u200b\u5b50\u200b\u8def\u5f84\u200b\u76f8\u540c\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b Gradio \u200b\u5728\u200b\u9664\u57df\u200b\u7684\u200b\u6839\u200b\u8def\u5f84\u200b\u4e4b\u5916\u200b\u7684\u200b\u4efb\u4f55\u200b\u5b50\u200b\u8def\u5f84\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u662f\u200b\u5fc5\u8981\u200b\u7684\u200b\u3002</li> </ol> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5177\u6709\u200b\u81ea\u5b9a\u4e49\u200b <code>root_path</code> \u200b\u7684\u200b\u7b80\u5355\u200b\u793a\u4f8b\u200b Gradio \u200b\u5e94\u7528\u200b\uff1a</p> <pre><code>import gradio as gr\nimport time\n\ndef test(x):\n    time.sleep(4)\n    return x\n\ngr.Interface(test, \"textbox\", \"textbox\").queue().launch(root_path=\"/gradio-demo\")\n</code></pre> <ol> <li>\u200b\u901a\u8fc7\u200b\u952e\u5165\u200b <code>tmux</code> \u200b\u5e76\u200b\u6309\u200b\u56de\u8f66\u952e\u200b\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\u200b\u542f\u52a8\u200b <code>tmux</code> \u200b\u4f1a\u8bdd\u200b</li> </ol> <p>\u200b\u63a8\u8350\u200b\u5728\u200b <code>tmux</code> \u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u8fd0\u884c\u200b Gradio \u200b\u5e94\u7528\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u5728\u200b\u540e\u53f0\u200b\u8fd0\u884c\u200b\u5b83\u200b</p> <ol> <li>\u200b\u7136\u540e\u200b\uff0c\u200b\u542f\u52a8\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u3002\u200b\u53ea\u200b\u9700\u200b\u8f93\u5165\u200b <code>python</code>\uff0c\u200b\u540e\u200b\u8ddf\u200b\u60a8\u200b\u7684\u200b Gradio Python \u200b\u6587\u4ef6\u200b\u7684\u200b\u540d\u79f0\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5e94\u7528\u200b\u5c06\u200b\u5728\u200b <code>localhost:7860</code> \u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u5b83\u200b\u5728\u200b\u5176\u4ed6\u200b\u7aef\u53e3\u200b\u4e0a\u200b\u542f\u52a8\u200b\uff0c\u200b\u60a8\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b\u4e0a\u9762\u200b\u7684\u200b Nginx \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002</li> </ol>"},{"location":"cn/07_other-tutorials/running-gradio-on-your-web-server-with-nginx/#nginx_1","title":"\u91cd\u65b0\u542f\u52a8\u200b Nginx","text":"<ol> <li> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b tmux \u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\uff0c\u200b\u8bf7\u200b\u901a\u8fc7\u200b\u952e\u5165\u200b CTRL + B\uff08\u200b\u6216\u200b CMD + B\uff09\uff0c\u200b\u7136\u540e\u200b\u6309\u4e0b\u200b \"D\" \u200b\u952e\u6765\u200b\u9000\u51fa\u200b\u3002</p> </li> <li> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8fd0\u884c\u200b <code>sudo systemctl restart nginx</code> \u200b\u91cd\u65b0\u542f\u52a8\u200b nginx\u3002</p> </li> </ol> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u4e2d\u200b\u8bbf\u95ee\u200b <code>https://example.com/gradio-demo</code>\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u80fd\u591f\u200b\u770b\u5230\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u5e94\u7528\u200b\u5728\u200b\u90a3\u91cc\u200b\u8fd0\u884c\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/","title":"\u6700\u4f73\u200b\u6027\u80fd\u200b\u7684\u200b\u6f14\u793a\u200b (Maximum Performance)","text":"<p>Tags: QUEUE, PERFORMANCE</p> <p>\u200b\u5047\u8bbe\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u5728\u200b\u793e\u4ea4\u200b\u5a92\u4f53\u200b\u4e0a\u200b\u8fc5\u901f\u200b\u8d70\u7ea2\u200b-\u200b\u6709\u200b\u5f88\u591a\u200b\u7528\u6237\u200b\u540c\u65f6\u200b\u5c1d\u8bd5\u200b\uff0c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u6700\u4f73\u200b\u4f53\u9a8c\u200b\uff0c\u200b\u6362\u53e5\u8bdd\u8bf4\u200b\u5c31\u662f\u200b\u5c3d\u91cf\u51cf\u5c11\u200b\u6bcf\u4e2a\u200b\u7528\u6237\u200b\u7b49\u5f85\u200b\u961f\u5217\u200b\u4e2d\u200b\u67e5\u770b\u200b\u4ed6\u4eec\u200b\u7684\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u7684\u200b\u65f6\u95f4\u200b\u3002</p> <p>\u200b\u5982\u4f55\u200b\u914d\u7f6e\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u4ee5\u200b\u5904\u7406\u200b\u6700\u5927\u200b\u6d41\u91cf\u200b\uff1f\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6df1\u5165\u200b\u4ecb\u7ecd\u200b Gradio \u200b\u7684\u200b <code>.queue()</code> \u200b\u65b9\u6cd5\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u76f8\u5173\u200b\u914d\u7f6e\u200b\u7684\u200b\u4e00\u4e9b\u200b\u53c2\u6570\u200b\uff0c\u200b\u5e76\u200b\u8ba8\u8bba\u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200b\u8fd9\u4e9b\u200b\u53c2\u6570\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u4e3a\u200b\u5927\u91cf\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u200b\u5ef6\u8fdf\u200b\u4fdd\u6301\u200b\u6700\u5c0f\u200b\u3002</p> <p>\u200b\u8fd9\u662f\u200b\u4e00\u4efd\u200b\u9ad8\u7ea7\u200b\u6307\u5357\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u5df2\u7ecf\u200b\u4e86\u89e3\u200b Gradio \u200b\u7684\u200b\u57fa\u7840\u77e5\u8bc6\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u548c\u200b\u542f\u52a8\u200b Gradio \u200b\u754c\u9762\u200b\u3002\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\u7684\u200b\u5927\u90e8\u5206\u200b\u4fe1\u606f\u200b\u5bf9\u4e8e\u200b\u60a8\u200b\u662f\u200b\u5c06\u200b\u6f14\u793a\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Spaces\u200b\u8fd8\u662f\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u90fd\u200b\u662f\u200b\u76f8\u5173\u200b\u7684\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#gradio","title":"\u542f\u7528\u200b Gradio \u200b\u7684\u200b\u961f\u5217\u200b\u7cfb\u7edf","text":"<p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0cGradio \u200b\u6f14\u793a\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u961f\u5217\u200b\uff0c\u200b\u800c\u662f\u200b\u901a\u8fc7\u200b POST \u200b\u8bf7\u6c42\u200b\u5c06\u200b\u9884\u6d4b\u200b\u8bf7\u6c42\u200b\u53d1\u9001\u5230\u200b\u6258\u7ba1\u200b Gradio \u200b\u670d\u52a1\u5668\u200b\u548c\u200b Python \u200b\u4ee3\u7801\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5e38\u89c4\u200b POST \u200b\u8bf7\u6c42\u200b\u6709\u200b\u4e24\u4e2a\u200b\u91cd\u8981\u200b\u7684\u200b\u9650\u5236\u200b\uff1a</p> <p>(1) \u200b\u5b83\u4eec\u200b\u4f1a\u200b\u8d85\u65f6\u200b-\u200b\u5927\u591a\u6570\u200b\u6d4f\u89c8\u5668\u200b\u5728\u200b POST \u200b\u8bf7\u6c42\u200b\u5728\u200b\u5f88\u200b\u77ed\u200b\u7684\u200b\u65f6\u95f4\u200b\uff08\u200b\u4f8b\u5982\u200b 1 \u200b\u5206\u949f\u200b\uff09\u200b\u5185\u200b\u6ca1\u6709\u54cd\u5e94\u200b\u65f6\u4f1a\u200b\u5f15\u53d1\u200b\u8d85\u65f6\u200b\u9519\u8bef\u200b\u3002 \u200b\u5982\u679c\u200b\u63a8\u7406\u200b\u529f\u80fd\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u8d85\u8fc7\u200b 1 \u200b\u5206\u949f\u200b\uff0c\u200b\u6216\u8005\u200b\u5f53\u200b\u540c\u65f6\u200b\u6709\u200b\u5f88\u591a\u200b\u4eba\u200b\u5c1d\u8bd5\u200b\u60a8\u200b\u7684\u200b\u6f14\u793a\u200b\u65f6\u200b\uff0c\u200b\u589e\u52a0\u200b\u4e86\u200b\u5ef6\u8fdf\u200b\u3002</p> <p>(2) \u200b\u5b83\u4eec\u200b\u4e0d\u200b\u5141\u8bb8\u200b Gradio \u200b\u6f14\u793a\u200b\u548c\u200b Gradio \u200b\u670d\u52a1\u5668\u4e4b\u95f4\u200b\u7684\u200b\u53cc\u5411\u901a\u4fe1\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u65e0\u6cd5\u200b\u5b9e\u65f6\u200b\u83b7\u5f97\u200b\u60a8\u200b\u7684\u200b\u9884\u6d4b\u200b\u5b8c\u6210\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u9884\u8ba1\u200b\u65f6\u95f4\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u8fd9\u4e9b\u200b\u9650\u5236\u200b\uff0c\u200b\u4efb\u4f55\u200b Gradio \u200b\u5e94\u7528\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b Interface \u200b\u6216\u200b Blocks \u200b\u542f\u52a8\u200b\u4e4b\u524d\u200b\u6dfb\u52a0\u200b <code>.queue()</code> \u200b\u6765\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4f7f\u7528\u200b websockets\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>app = gr.Interface(lambda x:x, \"image\", \"image\")\napp.queue()  # &lt;-- Sets up a queue with default parameters\napp.launch()\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u6f14\u793a\u200b <code>app</code> \u200b\u4e2d\u200b\uff0c\u200b\u9884\u6d4b\u200b\u73b0\u5728\u200b\u5c06\u200b\u901a\u8fc7\u200b websocket \u200b\u53d1\u9001\u200b\u3002 \u200b\u4e0e\u200b POST \u200b\u8bf7\u6c42\u200b\u4e0d\u540c\u200b\uff0cwebsocket \u200b\u4e0d\u4f1a\u200b\u8d85\u65f6\u200b\u5e76\u4e14\u200b\u5141\u8bb8\u200b\u53cc\u5411\u901a\u4fe1\u200b\u3002\u200b\u5728\u200b Gradio \u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u4e00\u4e2a\u200b queue \u200b\u961f\u5217\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u5230\u8fbe\u200b\u7684\u200b\u8bf7\u6c42\u200b\u6dfb\u52a0\u200b\u5230\u200b\u5217\u8868\u200b\u4e2d\u200b\u3002\u200b\u5f53\u200b\u4e00\u4e2a\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u53ef\u7528\u200b\u65f6\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u53ef\u7528\u200b\u7684\u200b\u8bf7\u6c42\u200b\u5c06\u200b\u4f20\u9012\u200b\u7ed9\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u7528\u4e8e\u200b\u9884\u6d4b\u200b\u3002\u200b\u9884\u6d4b\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u961f\u5217\u200b\u901a\u8fc7\u200b websocket \u200b\u5c06\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u53d1\u9001\u200b\u56de\u200b\u8c03\u7528\u200b\u8be5\u200b\u9884\u6d4b\u200b\u7684\u200b\u7279\u5b9a\u200b Gradio \u200b\u7528\u6237\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u5982\u679c\u200b\u60a8\u200b\u5c06\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6258\u7ba1\u200b\u5728\u200bHugging Face Spaces\uff0c\u200b\u961f\u5217\u200b\u5df2\u7ecf\u200b enabled by default \u200b\u9ed8\u8ba4\u200b\u542f\u7528\u200b\u3002\u200b\u60a8\u200b\u4ecd\u7136\u200b\u53ef\u4ee5\u200b\u624b\u52a8\u200b\u8c03\u7528\u200b <code>.queue()</code> \u200b\u65b9\u6cd5\u200b\u4ee5\u200b\u914d\u7f6e\u200b\u4e0b\u9762\u200b\u63cf\u8ff0\u200b\u7684\u200b\u961f\u5217\u200b\u53c2\u6570\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#queuing-parameters","title":"\u961f\u5217\u200b\u53c2\u6570\u200b \uff08Queuing Parameters\uff09","text":"<p>\u200b\u6709\u200b\u51e0\u4e2a\u200b\u53c2\u6570\u200b\u53ef\u200b\u7528\u4e8e\u200b\u914d\u7f6e\u200b\u961f\u5217\u200b\uff0c\u200b\u5e76\u200b\u5e2e\u52a9\u200b\u51cf\u5c11\u200b\u5ef6\u8fdf\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u9010\u4e2a\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#concurrency_count","title":"<code>concurrency_count</code> \u200b\u53c2\u6570","text":"<p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u9996\u5148\u200b\u63a2\u8ba8\u200b <code>queue()</code> \u200b\u7684\u200b <code>concurrency_count</code> \u200b\u53c2\u6570\u200b\u3002\u200b\u8be5\u200b\u53c2\u6570\u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200b\u5728\u200b Gradio \u200b\u670d\u52a1\u5668\u200b\u4e2d\u5c06\u200b\u5e76\u884c\u5904\u7406\u200b\u8bf7\u6c42\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u6570\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6b64\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3a\u200b <code>1</code>\uff0c\u200b\u4f46\u200b\u589e\u52a0\u200b\u6b64\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u7ebf\u6027\u200b\u589e\u52a0\u200b\u670d\u52a1\u5668\u200b\u5904\u7406\u200b\u8bf7\u6c42\u200b\u7684\u200b\u80fd\u529b\u200b\u3002</p> <p>\u200b\u90a3\u200b\u4e3a\u4ec0\u4e48\u200b\u4e0d\u200b\u5c06\u200b\u6b64\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u5f97\u200b\u66f4\u200b\u9ad8\u200b\u5462\u200b\uff1f\u200b\u8bf7\u200b\u8bb0\u4f4f\u200b\uff0c\u200b\u7531\u4e8e\u200b\u8bf7\u6c42\u200b\u662f\u200b\u5e76\u884c\u5904\u7406\u200b\u7684\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8bf7\u6c42\u200b\u5c06\u200b\u6d88\u8017\u200b\u5185\u5b58\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u5904\u7406\u200b\u7684\u200b\u6570\u636e\u200b\u548c\u200b\u6743\u91cd\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u5c06\u200b <code>concurrency_count</code> \u200b\u8bbe\u7f6e\u200b\u5f97\u200b\u8fc7\u200b\u9ad8\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5185\u5b58\u200b\u6ea2\u51fa\u200b\u9519\u8bef\u200b\u3002\u200b\u5982\u679c\u200b <code>concurrency_count</code> \u200b\u8fc7\u9ad8\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u4e0d\u65ad\u200b\u5207\u6362\u200b\u4e0d\u540c\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u6210\u672c\u200b\u5bfc\u81f4\u200b\u6536\u76ca\u200b\u9012\u51cf\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</p> <p>\u200b\u63a8\u8350\u200b\uff1a\u200b\u5c06\u200b <code>concurrency_count</code> \u200b\u53c2\u6570\u200b\u589e\u52a0\u200b\u5230\u200b\u80fd\u591f\u200b\u83b7\u5f97\u200b\u6027\u80fd\u200b\u63d0\u5347\u200b\u6216\u200b\u8fbe\u5230\u200b\u673a\u5668\u200b\u5185\u5b58\u200b\u9650\u5236\u200b\u4e3a\u6b62\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6b64\u5904\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b Hugging Face Spaces \u200b\u673a\u5668\u200b\u89c4\u683c\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6ce8\u200b\uff1a\u200b\u8fd8\u6709\u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u53ef\u200b\u63a7\u5236\u200b Gradio \u200b\u80fd\u591f\u200b\u751f\u6210\u200b\u7684\u200b\u603b\u7ebf\u200b\u7a0b\u6570\u200b\uff0c\u200b\u65e0\u8bba\u200b\u662f\u5426\u200b\u542f\u7528\u200b\u961f\u5217\u200b\u3002\u200b\u8fd9\u662f\u200b <code>launch()</code> \u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7684\u200b <code>max_threads</code> \u200b\u53c2\u6570\u200b\u3002\u200b\u5f53\u200b\u60a8\u200b\u589e\u52a0\u200b <code>queue()</code> \u200b\u4e2d\u200b\u7684\u200b <code>concurrency_count</code> \u200b\u53c2\u6570\u200b\u65f6\u200b\uff0c\u200b\u6b64\u53c2\u6570\u200b\u4e5f\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u589e\u52a0\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u624b\u52a8\u200b\u589e\u52a0\u200b\u6b64\u53c2\u6570\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u672a\u200b\u542f\u7528\u200b\u961f\u5217\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#max_size","title":"<code>max_size</code> \u200b\u53c2\u6570","text":"<p>\u200b\u51cf\u5c11\u200b\u7b49\u5f85\u65f6\u95f4\u200b\u7684\u200b\u66f4\u200b\u76f4\u63a5\u200b\u7684\u200b\u65b9\u6cd5\u200b\u662f\u200b\u9632\u6b62\u200b\u8fc7\u591a\u200b\u7684\u200b\u4eba\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>queue()</code> \u200b\u7684\u200b <code>max_size</code> \u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u961f\u5217\u200b\u5904\u7406\u200b\u7684\u200b\u6700\u5927\u200b\u8bf7\u6c42\u200b\u6570\u200b\u3002\u200b\u5982\u679c\u200b\u8bf7\u6c42\u200b\u5728\u200b\u961f\u5217\u200b\u5df2\u7ecf\u200b\u8fbe\u5230\u200b\u6700\u5927\u200b\u5927\u200b\u5c0f\u65f6\u200b\u5230\u8fbe\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u88ab\u200b\u62d2\u7edd\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7528\u6237\u200b\u5c06\u200b\u6536\u5230\u200b\u4e00\u4e2a\u200b\u9519\u8bef\u200b\u63d0\u793a\u200b\uff0c\u200b\u6307\u793a\u200b\u961f\u5217\u200b\u5df2\u6ee1\u200b\uff0c\u200b\u8bf7\u200b\u91cd\u8bd5\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c<code>max_size=None</code>\uff0c\u200b\u8868\u793a\u200b\u6ca1\u6709\u200b\u9650\u5236\u200b\u53ef\u4ee5\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\u7684\u200b\u7528\u6237\u6570\u91cf\u200b\u3002</p> <p>\u200b\u77db\u76fe\u200b\u5730\u200b\uff0c\u200b\u8bbe\u7f6e\u200b <code>max_size</code> \u200b\u901a\u5e38\u200b\u53ef\u4ee5\u200b\u6539\u5584\u200b\u7528\u6237\u200b\u4f53\u9a8c\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u9632\u6b62\u200b\u7528\u6237\u200b\u56e0\u200b\u7b49\u5f85\u65f6\u95f4\u200b\u8fc7\u957f\u200b\u800c\u200b\u88ab\u200b\u6253\u6d88\u200b\u5174\u8da3\u200b\u3002\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u6f14\u793a\u200b\u66f4\u200b\u611f\u5174\u8da3\u200b\u548c\u200b\u6295\u5165\u200b\u7684\u200b\u7528\u6237\u200b\u5c06\u200b\u7ee7\u7eed\u200b\u5c1d\u8bd5\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\uff0c\u200b\u5e76\u4e14\u200b\u80fd\u591f\u200b\u66f4\u5feb\u200b\u5730\u200b\u83b7\u5f97\u200b\u4ed6\u4eec\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> <p>\u200b\u63a8\u8350\u200b\uff1a\u200b\u4e3a\u4e86\u200b\u83b7\u5f97\u200b\u66f4\u597d\u200b\u7684\u200b\u7528\u6237\u200b\u4f53\u9a8c\u200b\uff0c\u200b\u8bf7\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u5408\u7406\u200b\u7684\u200b <code>max_size</code>\uff0c\u200b\u8be5\u503c\u200b\u57fa\u4e8e\u200b\u7528\u6237\u200b\u5bf9\u200b\u9884\u6d4b\u200b\u6240\u200b\u613f\u610f\u200b\u7b49\u5f85\u200b\u591a\u957f\u65f6\u95f4\u200b\u7684\u200b\u9884\u671f\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#max_batch_size","title":"<code>max_batch_size</code> \u200b\u53c2\u6570","text":"<p>\u200b\u589e\u52a0\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u5e76\u884c\u6027\u200b\u7684\u200b\u53e6\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u662f\u200b\u7f16\u5199\u200b\u80fd\u591f\u200b\u63a5\u53d7\u200b\u6279\u6b21\u200b\u8f93\u5165\u200b\u7684\u200b\u51fd\u6570\u200b\u3002\u200b\u5927\u591a\u6570\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u6bd4\u200b\u5904\u7406\u200b\u5355\u4e2a\u200b\u6837\u672c\u200b\u66f4\u200b\u9ad8\u6548\u200b\u5730\u200b\u5904\u7406\u200b\u6279\u6b21\u200b\u6837\u672c\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u7f16\u5199\u200b\u7684\u200b\u51fd\u6570\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u4e00\u6279\u200b\u6837\u672c\u200b\uff0cGradio \u200b\u5c06\u200b\u81ea\u52a8\u200b\u5c06\u200b\u4f20\u5165\u200b\u7684\u200b\u8bf7\u6c42\u200b\u6279\u91cf\u200b\u5904\u7406\u200b\u5e76\u200b\u4f5c\u4e3a\u200b\u6279\u91cf\u200b\u6837\u672c\u200b\u4f20\u9012\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\u3002\u200b\u60a8\u200b\u9700\u8981\u200b\u5c06\u200b <code>batch</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>True</code>\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>False</code>\uff09\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u51fd\u6570\u200b\u80fd\u591f\u200b\u5904\u7406\u200b\u7684\u200b\u6700\u5927\u200b\u6837\u672c\u6570\u200b\u8bbe\u7f6e\u200b <code>max_batch_size</code>\uff08\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b <code>4</code>\uff09\u3002\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>gr.Interface()</code> \u200b\u6216\u200b Blocks \u200b\u4e2d\u200b\u7684\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>.click()</code>\u3002</p> <p>\u200b\u867d\u7136\u200b\u8bbe\u7f6e\u200b\u6279\u6b21\u200b\u5728\u200b\u6982\u5ff5\u200b\u4e0a\u200b\u4e0e\u200b\u4f7f\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u5e76\u884c\u5904\u7406\u200b\u8bf7\u6c42\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u4f46\u200b\u5bf9\u4e8e\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u800c\u8a00\u200b\uff0c\u200b\u5b83\u200b\u901a\u5e38\u200b\u6bd4\u200b\u8bbe\u7f6e\u200b <code>concurrency_count</code> \u200b\u66f4\u200b\u5feb\u200b\u3002\u200b\u7f3a\u70b9\u200b\u662f\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u7a0d\u5fae\u200b\u8c03\u6574\u200b\u51fd\u6570\u200b\u4ee5\u200b\u63a5\u53d7\u200b\u6279\u6b21\u200b\u6837\u672c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5355\u4e2a\u200b\u6837\u672c\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u63a5\u53d7\u200b\u6279\u6b21\u200b\u8f93\u5165\u200b\u7684\u200b\u51fd\u6570\u200b\u7684\u200b\u793a\u4f8b\u200b-\u200b\u5b83\u200b\u4e00\u6b21\u200b\u5904\u7406\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\uff1a</p> <pre><code>import time\n\ndef trim_words(word, length):\n    return w[:int(length)]\n</code></pre> <p>\u200b\u8fd9\u662f\u200b\u76f8\u540c\u200b\u51fd\u6570\u200b\u7684\u200b\u91cd\u5199\u200b\u7248\u672c\u200b\uff0c\u200b\u63a5\u53d7\u200b\u4e00\u6279\u200b\u6837\u672c\u200b\uff1a</p> <pre><code>import time\n\ndef trim_words(words, lengths):\n    trimmed_words = []\n    for w, l in zip(words, lengths):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n</code></pre>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#setup","title":"Setup \u200b\u5b89\u88c5\u200b\u548c\u200b\u8bbe\u7f6e","text":"<p>\u200b\u5efa\u8bae\u200b\uff1a\u200b\u5982\u679c\u200b\u53ef\u80fd\u200b\u7684\u8bdd\u200b\uff0c\u200b\u8bf7\u200b\u7f16\u5199\u200b\u63a5\u53d7\u200b\u6837\u672c\u200b\u6279\u6b21\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b <code>batch</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>True</code>\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u8ba1\u7b97\u673a\u200b\u7684\u200b\u5185\u5b58\u200b\u9650\u5236\u200b\u5c06\u200b <code>max_batch_size</code> \u200b\u8bbe\u7f6e\u200b\u5f97\u200b\u5c3d\u53ef\u80fd\u200b\u9ad8\u200b\u3002\u200b\u5982\u679c\u200b\u5c06\u200b <code>max_batch_size</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5c3d\u53ef\u80fd\u200b\u9ad8\u200b\uff0c\u200b\u5f88\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u5c06\u200b <code>concurrency_count</code> \u200b\u91cd\u65b0\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>1</code>\uff0c\u200b\u56e0\u4e3a\u200b\u60a8\u200b\u5c06\u200b\u6ca1\u6709\u200b\u8db3\u591f\u200b\u7684\u200b\u5185\u5b58\u200b\u6765\u200b\u540c\u65f6\u200b\u8fd0\u884c\u200b\u591a\u4e2a\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#api_open","title":"<code>api_open</code> \u200b\u53c2\u6570","text":"<p>\u200b\u5728\u200b\u521b\u5efa\u200b Gradio \u200b\u6f14\u793a\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5c06\u200b\u6240\u6709\u200b\u6d41\u91cf\u200b\u9650\u5236\u200b\u4e3a\u200b\u901a\u8fc7\u200b\u7528\u6237\u754c\u9762\u200b\u800c\u200b\u4e0d\u662f\u200b\u901a\u8fc7\u200b\u81ea\u52a8\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b Gradio \u200b\u6f14\u793a\u200b\u521b\u5efa\u200b\u7684\u200b\u7f16\u7a0b\u200b API\u200b\u8fdb\u884c\u200b\u3002\u200b\u8fd9\u200b\u4e00\u70b9\u200b\u5f88\u200b\u91cd\u8981\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5f53\u200b\u4eba\u4eec\u200b\u901a\u8fc7\u200b\u7f16\u7a0b\u200b API \u200b\u8fdb\u884c\u200b\u8bf7\u6c42\u200b\u65f6\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u7ed5\u8fc7\u200b\u6b63\u5728\u200b\u7b49\u5f85\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u7528\u6237\u200b\u5e76\u200b\u964d\u4f4e\u200b\u8fd9\u4e9b\u200b\u7528\u6237\u200b\u7684\u200b\u4f53\u9a8c\u200b\u3002</p> <p>\u200b\u5efa\u8bae\u200b\uff1a\u200b\u5728\u200b\u6f14\u793a\u200b\u4e2d\u5c06\u200b <code>queue()</code> \u200b\u4e2d\u200b\u7684\u200b <code>api_open</code> \u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3a\u200b <code>False</code>\uff0c\u200b\u4ee5\u200b\u9632\u6b62\u200b\u7a0b\u5e8f\u5316\u200b\u8bf7\u6c42\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#gputpu","title":"\u5347\u7ea7\u200b\u786c\u4ef6\u200b\uff08GPU\uff0cTPU \u200b\u7b49\u200b\uff09","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u5b8c\u6210\u200b\u4e86\u200b\u4ee5\u4e0a\u200b\u6240\u6709\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u7684\u200b\u6f14\u793a\u200b\u4ecd\u7136\u200b\u4e0d\u591f\u200b\u5feb\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5347\u7ea7\u200b\u6a21\u578b\u200b\u8fd0\u884c\u200b\u7684\u200b\u786c\u4ef6\u200b\u3002\u200b\u5c06\u200b\u6a21\u578b\u200b\u4ece\u200b CPU \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u5207\u6362\u200b\u5230\u200b GPU \u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u7684\u200b\u63a8\u7406\u200b\u65f6\u95f4\u200b\u901a\u5e38\u200b\u4f1a\u200b\u63d0\u9ad8\u200b 10 \u200b\u500d\u200b\u5230\u200b 50 \u200b\u500d\u200b\u3002</p> <p>\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b\u5347\u7ea7\u200b\u786c\u4ef6\u200b\u975e\u5e38\u7b80\u5355\u200b\u3002\u200b\u53ea\u200b\u9700\u200b\u5355\u51fb\u200b\u81ea\u5df1\u200b\u7684\u200b Space \u200b\u4e2d\u200b\u7684\u200b \"Settings\" \u200b\u9009\u9879\u5361\u200b\uff0c\u200b\u7136\u540e\u200b\u9009\u62e9\u200b\u6240\u200b\u9700\u200b\u7684\u200b Space \u200b\u786c\u4ef6\u200b\u3002</p> <p></p> <p>\u200b\u867d\u7136\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u8c03\u6574\u200b\u90e8\u5206\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u63a8\u7406\u200b\u4ee3\u7801\u200b\u4ee5\u200b\u5728\u200b GPU \u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u4f7f\u7528\u200b PyTorch\uff0c\u200b\u8fd9\u91cc\u200b\u6709\u200b\u4e00\u4e2a\u200b\u65b9\u4fbf\u200b\u7684\u200b\u6307\u5357\u200b\uff09\uff0c\u200b\u4f46\u200b Gradio \u200b\u5bf9\u4e8e\u200b\u786c\u4ef6\u200b\u9009\u62e9\u200b\u662f\u200b\u5b8c\u5168\u200b\u65e0\u200b\u611f\u77e5\u200b\u7684\u200b\uff0c\u200b\u65e0\u8bba\u200b\u60a8\u200b\u662f\u200b\u4f7f\u7528\u200b CPU\u3001GPU\u3001TPU \u200b\u8fd8\u662f\u200b\u5176\u4ed6\u200b\u4efb\u4f55\u200b\u786c\u4ef6\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b\uff01</p> <p>\u200b\u6ce8\u610f\u200b\uff1a\u200b\u60a8\u200b\u7684\u200b GPU \u200b\u5185\u5b58\u200b\u4e0e\u200b CPU \u200b\u5185\u5b58\u200b\u4e0d\u540c\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5982\u679c\u200b\u60a8\u200b\u5347\u7ea7\u200b\u4e86\u200b\u786c\u4ef6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u8c03\u6574\u200b\u4e0a\u9762\u200b\u63cf\u8ff0\u200b\u7684\u200b<code>concurrency_count</code> \u200b\u53c2\u6570\u200b\u7684\u200b\u503c\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/setting-up-a-demo-for-maximum-performance/#_1","title":"\u7ed3\u8bba","text":"<p>\u200b\u795d\u8d3a\u200b\u60a8\u200b\uff01\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200b Gradio \u200b\u6f14\u793a\u200b\u4ee5\u200b\u83b7\u5f97\u6700\u4f73\u200b\u6027\u80fd\u200b\u3002\u200b\u795d\u60a8\u200b\u5728\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u75c5\u6bd2\u200b\u5f0f\u200b\u6f14\u793a\u200b\u4e2d\u200b\u597d\u8fd0\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/theming-guide/","title":"\u4e3b\u9898\u200b Theming","text":"<p>Tags: THEMES</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_1","title":"\u4ecb\u7ecd","text":"<p>Gradio \u200b\u5177\u6709\u200b\u5185\u7f6e\u200b\u7684\u200b\u4e3b\u9898\u200b\u5f15\u64ce\u200b\uff0c\u200b\u53ef\u200b\u8ba9\u200b\u60a8\u200b\u81ea\u5b9a\u4e49\u200b\u5e94\u7528\u200b\u7684\u200b\u5916\u89c2\u200b\u548c\u200b\u611f\u89c9\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u5404\u79cd\u200b\u4e3b\u9898\u200b\uff0c\u200b\u6216\u8005\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b\u3002\u200b\u8981\u200b\u8fd9\u6837\u200b\u505a\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b <code>theme=</code> kwarg \u200b\u4f20\u9012\u200b\u7ed9\u200b <code>Blocks</code> \u200b\u6216\u200b <code>Interface</code> \u200b\u6784\u9020\u51fd\u6570\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>with gr.Blocks(theme=gr.themes.Soft()) as demo:\n    ...\n</code></pre> <p>Gradio \u200b\u5e26\u6709\u200b\u4e00\u7ec4\u200b\u9884\u200b\u6784\u5efa\u200b\u7684\u200b\u4e3b\u9898\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b <code>gr.themes.*</code> \u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u8fd9\u4e9b\u200b\u4e3b\u9898\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u4e3b\u9898\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li><code>gr.themes.Base()</code></li> <li><code>gr.themes.Default()</code></li> <li><code>gr.themes.Glass()</code></li> <li><code>gr.themes.Monochrome()</code></li> <li><code>gr.themes.Soft()</code></li> </ul> <p>\u200b\u8fd9\u4e9b\u200b\u4e3b\u9898\u200b\u4e3a\u200b\u6570\u767e\u4e2a\u200b CSS \u200b\u53d8\u91cf\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u503c\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u9884\u200b\u6784\u5efa\u200b\u7684\u200b\u4e3b\u9898\u200b\u4f5c\u4e3a\u200b\u81ea\u5b9a\u4e49\u200b\u4e3b\u9898\u200b\u7684\u200b\u8d77\u70b9\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4ece\u5934\u5f00\u59cb\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200b\u6bcf\u79cd\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_2","title":"\u4f7f\u7528\u200b\u4e3b\u9898\u200b\u6784\u5efa\u200b\u5668","text":"<p>\u200b\u4f7f\u7528\u200b\u4e3b\u9898\u200b\u6784\u5efa\u200b\u5668\u200b\u6784\u5efa\u200b\u4e3b\u9898\u200b\u6700\u200b\u7b80\u5355\u200b\u3002\u200b\u8981\u200b\u5728\u200b\u672c\u5730\u200b\u542f\u52a8\u200b\u4e3b\u9898\u200b\u6784\u5efa\u200b\u5668\u200b\uff0c\u200b\u8bf7\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\uff1a</p> <pre><code>import gradio as gr\n\ngr.themes.builder()\n</code></pre> <p>$demo_theme_builder</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0a\u9762\u200b\u7684\u200b Spaces \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b Theme Builder\uff0c\u200b\u4f46\u200b\u901a\u8fc7\u200b <code>gr.themes.builder()</code> \u200b\u5728\u200b\u672c\u5730\u200b\u542f\u52a8\u200b\u65f6\u200b\u8fd0\u884c\u200b\u901f\u5ea6\u200b\u66f4\u200b\u5feb\u200b\u3002</p> <p>\u200b\u5728\u200b Theme Builder \u200b\u4e2d\u200b\u7f16\u8f91\u200b\u503c\u65f6\u200b\uff0c\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5c06\u200b\u5b9e\u65f6\u200b\u9884\u89c8\u200b\u66f4\u65b0\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4e0b\u8f7d\u200b\u751f\u6210\u200b\u7684\u200b\u4e3b\u9898\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u4efb\u4f55\u200b Gradio \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5b83\u200b\u3002</p> <p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u7684\u200b\u5176\u4f59\u90e8\u5206\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u4ee5\u200b\u7f16\u7a0b\u200b\u65b9\u5f0f\u200b\u6784\u5efa\u200b\u4e3b\u9898\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_3","title":"\u901a\u8fc7\u200b\u6784\u9020\u51fd\u6570\u200b\u6269\u5c55\u200b\u4e3b\u9898","text":"<p>\u200b\u5c3d\u7ba1\u200b\u6bcf\u4e2a\u200b\u4e3b\u9898\u200b\u90fd\u200b\u6709\u200b\u6570\u767e\u4e2a\u200b CSS \u200b\u53d8\u91cf\u200b\uff0c\u200b\u4f46\u200b\u5927\u591a\u6570\u200b\u8fd9\u4e9b\u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u200b\u90fd\u200b\u662f\u4ece\u200b 8 \u200b\u4e2a\u200b\u6838\u5fc3\u200b\u53d8\u91cf\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u7684\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6bcf\u4e2a\u200b\u9884\u200b\u6784\u5efa\u200b\u4e3b\u9898\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u8bbe\u7f6e\u200b\u8fd9\u4e9b\u200b\u53d8\u91cf\u200b\u3002\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u8fd9\u200b 8 \u200b\u4e2a\u200b\u53c2\u6570\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5feb\u901f\u200b\u66f4\u6539\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u5916\u89c2\u200b\u548c\u200b\u611f\u89c9\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_4","title":"\u6838\u5fc3\u200b\u989c\u8272","text":"<p>\u200b\u524d\u200b 3 \u200b\u4e2a\u200b\u6784\u9020\u51fd\u6570\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3b\u9898\u200b\u7684\u200b\u989c\u8272\u200b\uff0c\u200b\u5e76\u4e14\u200b\u662f\u200b <code>gradio.themes.Color</code> \u200b\u5bf9\u8c61\u200b\u3002\u200b\u5728\u200b\u5185\u90e8\u200b\uff0c\u200b\u8fd9\u4e9b\u200b Color \u200b\u5bf9\u8c61\u200b\u5305\u542b\u200b\u5355\u4e2a\u200b\u8272\u8c03\u200b\u7684\u200b\u8c03\u8272\u677f\u200b\u7684\u200b\u4eae\u5ea6\u200b\u503c\u200b\uff0c\u200b\u8303\u56f4\u200b\u4ece\u200b 50\uff0c100\uff0c200...\uff0c800\uff0c900\uff0c950\u3002\u200b\u5176\u4ed6\u200b CSS \u200b\u53d8\u91cf\u200b\u662f\u4ece\u200b\u8fd9\u200b 3 \u200b\u79cd\u989c\u8272\u200b\u6d3e\u751f\u200b\u7684\u200b\u3002</p> <p>3 \u200b\u4e2a\u200b\u989c\u8272\u200b\u6784\u9020\u200b\u51fd\u6570\u53c2\u6570\u200b\u662f\u200b\uff1a</p> <ul> <li><code>primary_hue</code>\uff1a\u200b\u8fd9\u662f\u200b\u4e3b\u9898\u200b\u4e2d\u200b\u7684\u200b\u4e3b\u8272\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.colors.orange</code>\u3002</li> <li><code>secondary_hue</code>\uff1a\u200b\u8fd9\u662f\u200b\u4e3b\u9898\u200b\u4e2d\u200b\u7528\u4e8e\u200b\u8f85\u52a9\u200b\u5143\u7d20\u200b\u7684\u200b\u989c\u8272\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.colors.blue</code>\u3002</li> <li><code>neutral_hue</code>\uff1a\u200b\u8fd9\u662f\u200b\u4e3b\u9898\u200b\u4e2d\u200b\u7528\u4e8e\u200b\u6587\u672c\u200b\u548c\u200b\u5176\u4ed6\u200b\u4e2d\u6027\u200b\u5143\u7d20\u200b\u7684\u200b\u989c\u8272\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.colors.gray</code>\u3002</li> </ul> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u5feb\u6377\u65b9\u5f0f\u200b\u4fee\u6539\u200b\u8fd9\u4e9b\u200b\u503c\u200b\uff0c\u200b\u4f8b\u5982\u200b</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(primary_hue=\"red\", secondary_hue=\"pink\")) as demo:\n    ...\n</code></pre> <p>\u200b\u6216\u8005\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b <code>Color</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(primary_hue=gr.themes.colors.red, secondary_hue=gr.themes.colors.pink)) as demo:\n    ...\n</code></pre> <p>\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u989c\u8272\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li><code>slate</code></li> <li><code>gray</code></li> <li><code>zinc</code></li> <li><code>neutral</code></li> <li><code>stone</code></li> <li><code>red</code></li> <li><code>orange</code></li> <li><code>amber</code></li> <li><code>yellow</code></li> <li><code>lime</code></li> <li><code>green</code></li> <li><code>emerald</code></li> <li><code>teal</code></li> <li><code>cyan</code></li> <li><code>sky</code></li> <li><code>blue</code></li> <li><code>indigo</code></li> <li><code>violet</code></li> <li><code>purple</code></li> <li><code>fuchsia</code></li> <li><code>pink</code></li> <li><code>rose</code></li> </ul> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b <code>Color</code> \u200b\u5bf9\u8c61\u200b\u5e76\u200b\u4f20\u9012\u200b\u5b83\u4eec\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#core-sizing","title":"\u6838\u5fc3\u200b\u5927\u5c0f\u200b \uff08Core Sizing\uff09","text":"<p>\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b 3 \u200b\u4e2a\u200b\u6784\u9020\u51fd\u6570\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3b\u9898\u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u5e76\u4e14\u200b\u662f\u200b <code>gradio.themes.Size</code> \u200b\u5bf9\u8c61\u200b\u3002\u200b\u5728\u200b\u5185\u90e8\u200b\uff0c\u200b\u8fd9\u4e9b\u200b Size \u200b\u5bf9\u8c61\u200b\u5305\u542b\u200b\u4ece\u200b <code>xxs</code> \u200b\u5230\u200b <code>xxl</code> \u200b\u7684\u200b\u50cf\u7d20\u200b\u5927\u5c0f\u200b\u503c\u200b\u3002\u200b\u5176\u4ed6\u200b CSS \u200b\u53d8\u91cf\u200b\u662f\u4ece\u200b\u8fd9\u200b 3 \u200b\u4e2a\u200b\u5927\u5c0f\u200b\u6d3e\u751f\u200b\u7684\u200b\u3002</p> <ul> <li><code>spacing_size</code>\uff1a\u200b\u6b64\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u5143\u7d20\u200b\u5185\u90e8\u200b\u7684\u200b\u586b\u5145\u200b\u548c\u200b\u5143\u7d20\u200b\u4e4b\u95f4\u200b\u7684\u200b\u95f4\u8ddd\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.sizes.spacing_md</code>\u3002</li> <li><code>radius_size</code>\uff1a\u200b\u6b64\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u5143\u7d20\u200b\u7684\u200b\u5706\u89d2\u200b\u5f27\u5ea6\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.sizes.radius_md</code>\u3002</li> <li><code>text_size</code>\uff1a\u200b\u6b64\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u6587\u672c\u200b\u7684\u200b\u5b57\u4f53\u5927\u5c0f\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.sizes.text_md</code>\u3002</li> </ul> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5b57\u7b26\u4e32\u200b\u5feb\u6377\u65b9\u5f0f\u200b\u4fee\u6539\u200b\u8fd9\u4e9b\u200b\u503c\u200b\uff0c\u200b\u4f8b\u5982\u200b</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(spacing_size=\"sm\", radius_size=\"none\")) as demo:\n    ...\n</code></pre> <p>\u200b\u6216\u8005\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b <code>Size</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(spacing_size=gr.themes.sizes.spacing_sm, radius_size=gr.themes.sizes.radius_none)) as demo:\n    ...\n</code></pre> <p>\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u5927\u5c0f\u200b\u5bf9\u8c61\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li><code>radius_none</code></li> <li><code>radius_sm</code></li> <li><code>radius_md</code></li> <li><code>radius_lg</code></li> <li><code>spacing_sm</code></li> <li><code>spacing_md</code></li> <li><code>spacing_lg</code></li> <li><code>text_sm</code></li> <li><code>text_md</code></li> <li><code>text_lg</code></li> </ul> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b <code>Size</code> \u200b\u5bf9\u8c61\u200b\u5e76\u200b\u4f20\u9012\u200b\u5b83\u4eec\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#core-fonts","title":"\u6838\u5fc3\u200b\u5b57\u4f53\u200b\uff08Core Fonts\uff09","text":"<p>\u200b\u6700\u540e\u200b\u7684\u200b 2 \u200b\u4e2a\u200b\u6784\u9020\u51fd\u6570\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3b\u9898\u200b\u7684\u200b\u5b57\u4f53\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4e00\u7cfb\u5217\u200b\u5b57\u4f53\u200b\u4f20\u9012\u200b\u7ed9\u200b\u8fd9\u4e9b\u200b\u53c2\u6570\u200b\uff0c\u200b\u4ee5\u200b\u6307\u5b9a\u200b\u56de\u9000\u200b\u5b57\u4f53\u200b\u3002\u200b\u5982\u679c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u88ab\u200b\u52a0\u8f7d\u200b\u4e3a\u200b\u7cfb\u7edf\u200b\u5b57\u4f53\u200b\u3002\u200b\u5982\u679c\u200b\u63d0\u4f9b\u200b\u4e86\u200b <code>gradio.themes.GoogleFont</code>\uff0c\u200b\u5219\u200b\u5c06\u200b\u4ece\u200b Google Fonts \u200b\u52a0\u8f7d\u200b\u8be5\u200b\u5b57\u4f53\u200b\u3002</p> <ul> <li><code>font</code>\uff1a\u200b\u6b64\u200b\u8bbe\u7f6e\u200b\u4e3b\u9898\u200b\u7684\u200b\u4e3b\u8981\u200b\u5b57\u4f53\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.GoogleFont(\"Source Sans Pro\")</code>\u3002</li> <li><code>font_mono</code>\uff1a\u200b\u6b64\u200b\u8bbe\u7f6e\u200b\u4e3b\u9898\u200b\u7684\u200b\u7b49\u200b\u5bbd\u200b\u5b57\u4f53\u200b\u3002\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u4e3b\u9898\u200b\u4e2d\u200b\uff0c\u200b\u6b64\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gradio.themes.GoogleFont(\"IBM Plex Mono\")</code>\u3002</li> </ul> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\u8fd9\u4e9b\u200b\u503c\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4ee5\u4e0b\u200b\u65b9\u5f0f\u200b\uff1a</p> <pre><code>with gr.Blocks(theme=gr.themes.Default(font=[gr.themes.GoogleFont(\"Inconsolata\"), \"Arial\", \"sans-serif\"])) as demo:\n    ...\n</code></pre>"},{"location":"cn/07_other-tutorials/theming-guide/#set","title":"\u901a\u8fc7\u200b <code>.set()</code> \u200b\u6269\u5c55\u200b\u4e3b\u9898","text":"<p>\u200b\u4e3b\u9898\u200b\u52a0\u8f7d\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b CSS \u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u4e3a\u6b64\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b\u4e3b\u9898\u200b\u5bf9\u8c61\u200b\u7684\u200b <code>.set()</code> \u200b\u65b9\u6cd5\u200b\u6765\u200b\u8bbf\u95ee\u200b CSS \u200b\u53d8\u91cf\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>theme = gr.themes.Default(primary_hue=\"blue\").set(    loader_color=\"#FF0000\",    slider_color=\"#FF0000\",)\n\u200b\u4f7f\u7528\u200b`gr.Blocks(theme=theme)`\u200b\u521b\u5efa\u200b\u6f14\u793a\u200b\u5757\u200b    ...\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b <code>loader_color</code> \u200b\u548c\u200b <code>slider_color</code> \u200b\u53d8\u91cf\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b<code>#FF0000</code>\uff0c\u200b\u5c3d\u7ba1\u200b\u6574\u4f53\u200b <code>primary_color</code> \u200b\u4f7f\u7528\u200b\u84dd\u8272\u200b\u8c03\u8272\u677f\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u8bbe\u7f6e\u200b\u4e3b\u9898\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4efb\u4f55\u200b CSS \u200b\u53d8\u91cf\u200b\u3002 \u200b\u60a8\u200b\u7684\u200b IDE \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u5e94\u8be5\u200b\u5e2e\u52a9\u200b\u60a8\u200b\u5bfc\u822a\u200b\u8fd9\u4e9b\u200b\u53d8\u91cf\u200b\u3002\u200b\u7531\u4e8e\u200b\u6709\u200b\u5f88\u591a\u200b CSS \u200b\u53d8\u91cf\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u200b\u4e00\u4e0b\u200b\u8fd9\u4e9b\u200b\u53d8\u91cf\u200b\u7684\u200b\u547d\u540d\u200b\u548c\u200b\u7ec4\u7ec7\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#css","title":"CSS \u200b\u53d8\u91cf\u200b\u547d\u540d\u200b\u89c4\u8303","text":"<p>CSS \u200b\u53d8\u91cf\u540d\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d8\u5f97\u200b\u5f88\u957f\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>button_primary_background_fill_hover_dark</code>\uff01\u200b\u4f46\u662f\u200b\u5b83\u4eec\u200b\u9075\u5faa\u200b\u4e00\u79cd\u200b\u5e38\u89c1\u200b\u7684\u200b\u547d\u540d\u200b\u7ea6\u5b9a\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u7406\u89e3\u200b\u53d8\u91cf\u200b\u529f\u80fd\u200b\u548c\u200b\u67e5\u627e\u200b\u60a8\u200b\u8981\u200b\u67e5\u627e\u200b\u7684\u200b\u53d8\u91cf\u200b\u53d8\u5f97\u200b\u5bb9\u6613\u200b\u3002\u200b\u53d8\u91cf\u540d\u200b\u7531\u200b\u4e0b\u5212\u7ebf\u200b\u5206\u9694\u200b\uff0c\u200b\u7531\u200b\u4ee5\u4e0b\u200b\u7ec4\u6210\u200b\uff1a</p> <ol> <li>\u200b\u76ee\u6807\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>button</code>\u3001<code>slider</code> \u200b\u6216\u200b <code>block</code>\u30022. \u200b\u76ee\u6807\u200b\u5143\u7d20\u200b\u7c7b\u578b\u200b\u6216\u5b50\u200b\u5143\u7d20\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>button_primary</code> \u200b\u6216\u200b <code>block_label</code>\u30023. \u200b\u5c5e\u6027\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>button_primary_background_fill</code> \u200b\u6216\u200b <code>block_label_border_width</code>\u30024. \u200b\u4efb\u4f55\u200b\u76f8\u5173\u200b\u72b6\u6001\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>button_primary_background_fill_hover</code>\u30025. \u200b\u5982\u679c\u200b\u5728\u200b\u6697\u200b\u6a21\u5f0f\u200b\u4e2d\u200b\u503c\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b\u540e\u7f00\u200b <code>_dark</code>\u3002\u200b\u4f8b\u5982\u200b\uff0c<code>input_border_color_focus_dark</code>\u3002    \u200b\u5f53\u7136\u200b\uff0c\u200b\u8bb8\u591a\u200b CSS \u200b\u53d8\u91cf\u540d\u200b\u90fd\u200b\u6bd4\u200b\u8fd9\u4e2a\u200b\u77ed\u200b\uff0c\u200b\u4f8b\u5982\u200b <code>table_border_color</code> \u200b\u6216\u200b <code>input_shadow</code>\u3002</li> </ol>"},{"location":"cn/07_other-tutorials/theming-guide/#css_1","title":"CSS \u200b\u53d8\u91cf\u200b\u7ec4\u7ec7","text":"<p>\u200b\u867d\u7136\u200b\u6709\u200b\u6570\u767e\u4e2a\u200b CSS \u200b\u53d8\u91cf\u200b\uff0c\u200b\u4f46\u200b\u5e76\u4e0d\u9700\u8981\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u53d8\u91cf\u200b\u90fd\u200b\u6307\u5b9a\u200b\u5355\u72ec\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u5b83\u4eec\u200b\u901a\u8fc7\u200b\u5f15\u7528\u200b\u4e00\u7ec4\u200b\u6838\u5fc3\u200b\u53d8\u91cf\u200b\u548c\u200b\u5f7c\u6b64\u200b\u5f15\u7528\u200b\u6765\u200b\u83b7\u53d6\u200b\u503c\u200b\u3002\u200b\u8fd9\u6837\u200b\u505a\u200b\u53ef\u4ee5\u200b\u4ec5\u200b\u4fee\u6539\u200b\u5c11\u91cf\u200b\u53d8\u91cf\u200b\u4ee5\u200b\u6539\u53d8\u200b\u6574\u4e2a\u200b\u4e3b\u9898\u200b\u7684\u200b\u5916\u89c2\u200b\u548c\u200b\u611f\u89c9\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u7cbe\u7ec6\u200b\u5730\u200b\u63a7\u5236\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u60f3\u8981\u200b\u4fee\u6539\u200b\u7684\u200b\u4e2a\u522b\u200b\u5143\u7d20\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_5","title":"\u5f15\u7528\u200b\u6838\u5fc3\u200b\u53d8\u91cf","text":"<p>\u200b\u8981\u200b\u5f15\u7528\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u6838\u5fc3\u200b\u6784\u9020\u51fd\u6570\u200b\u53d8\u91cf\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u53d8\u91cf\u540d\u200b\u524d\u200b\u52a0\u4e0a\u200b\u661f\u53f7\u200b\u3002\u200b\u8981\u200b\u5f15\u7528\u200b\u6838\u5fc3\u200b\u989c\u8272\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b<code>*primary_</code>\u3001<code>*secondary_</code> \u200b\u6216\u200b<code>*neutral_</code> \u200b\u524d\u7f00\u200b\uff0c\u200b\u540e\u200b\u8ddf\u200b\u4eae\u5ea6\u200b\u503c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>theme = gr.themes.Default(primary_hue=\"blue\").set(\n    button_primary_background_fill=\"*primary_200\",\n    button_primary_background_fill_hover=\"*primary_300\",\n)\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b <code>button_primary_background_fill</code> \u200b\u548c\u200b <code>button_primary_background_fill_hover</code> \u200b\u53d8\u91cf\u200b\u5206\u522b\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b<code>*primary_200</code> \u200b\u548c\u200b<code>*primary_300</code>\u3002\u200b\u8fd9\u4e9b\u200b\u53d8\u91cf\u200b\u5c06\u200b\u5206\u522b\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u84dd\u8272\u200b\u4e3b\u8272\u8c03\u200b\u8c03\u8272\u677f\u200b\u7684\u200b 200 \u200b\u548c\u200b 300 \u200b\u4eae\u5ea6\u200b\u503c\u200b\u3002 \u200b\u540c\u6837\u200b\u5730\u200b\uff0c\u200b\u8981\u200b\u5f15\u7528\u200b\u6838\u5fc3\u200b\u5927\u5c0f\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b<code>*spacing_</code>\u3001<code>*radius_</code> \u200b\u6216\u200b<code>*text_</code> \u200b\u524d\u7f00\u200b\uff0c\u200b\u540e\u200b\u8ddf\u200b\u5927\u5c0f\u200b\u503c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>theme = gr.themes.Default(radius_size=\"md\").set(\n    button_primary_border_radius=\"*radius_xl\",\n)\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b <code>button_primary_border_radius</code> \u200b\u53d8\u91cf\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b<code>*radius_xl</code>\u3002\u200b\u6b64\u200b\u53d8\u91cf\u200b\u5c06\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u4e2d\u7b49\u200b\u534a\u5f84\u5927\u5c0f\u200b\u8303\u56f4\u200b\u7684\u200b <code>xl</code> \u200b\u8bbe\u7f6e\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_6","title":"\u5f15\u7528\u200b\u5176\u4ed6\u200b\u53d8\u91cf","text":"<p>\u200b\u53d8\u91cf\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5f15\u7528\u200b\u5f7c\u6b64\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u8bf7\u200b\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"#FF0000\",\n    button_primary_border=\"#FF0000\",\n)\n</code></pre> <p>\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u76f8\u540c\u200b\u7684\u200b\u989c\u8272\u200b\u6709\u70b9\u200b\u7e41\u7410\u200b\u3002\u200b\u76f8\u53cd\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>button_primary_background_fill_hover</code> \u200b\u548c\u200b <code>button_primary_border</code> \u200b\u53d8\u91cf\u200b\u4e2d\u200b\u4f7f\u7528\u200b<code>*</code> \u200b\u524d\u7f00\u200b\u5f15\u7528\u200b <code>button_primary_background_fill</code> \u200b\u53d8\u91cf\u200b\u3002</p> <pre><code>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"*button_primary_background_fill\",\n    button_primary_border=\"*button_primary_background_fill\",\n)\n</code></pre> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u66f4\u6539\u200b <code>button_primary_background_fill</code> \u200b\u53d8\u91cf\u200b\uff0c<code>button_primary_background_fill_hover</code> \u200b\u548c\u200b <code>button_primary_border</code> \u200b\u53d8\u91cf\u200b\u5c06\u200b\u81ea\u52a8\u66f4\u65b0\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u6253\u7b97\u200b\u5171\u4eab\u200b\u4e3b\u9898\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u975e\u5e38\u200b\u6709\u7528\u200b- \u200b\u5b83\u200b\u4f7f\u5f97\u200b\u4fee\u6539\u200b\u4e3b\u9898\u200b\u53d8\u5f97\u200b\u5bb9\u6613\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u66f4\u6539\u200b\u6bcf\u4e2a\u200b\u53d8\u91cf\u200b\u3002 \u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6697\u200b\u6a21\u5f0f\u200b\u53d8\u91cf\u200b\u81ea\u52a8\u200b\u76f8\u4e92\u200b\u5f15\u7528\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <pre><code>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_dark=\"#AAAAAA\",\n    button_primary_border=\"*button_primary_background_fill\",\n    button_primary_border_dark=\"*button_primary_background_fill_dark\",\n)\n</code></pre> <p><code>button_primary_border_dark</code> \u200b\u5c06\u200b\u4ece\u200b <code>button_primary_background_fill_dark</code> \u200b\u83b7\u53d6\u200b\u5176\u503c\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6697\u200b\u6a21\u5f0f\u200b\u603b\u662f\u200b\u4f7f\u7528\u200b\u53d8\u91cf\u200b\u7684\u200b\u6697\u200b\u7248\u672c\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_7","title":"\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5b8c\u6574\u200b\u7684\u200b\u4e3b\u9898","text":"<p>\u200b\u5047\u8bbe\u200b\u60a8\u200b\u60f3\u200b\u4ece\u5934\u5f00\u59cb\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u4e3b\u9898\u200b\uff01\u200b\u6211\u4eec\u200b\u5c06\u200b\u9010\u6b65\u200b\u8fdb\u884c\u200b - \u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b gradio \u200b\u6e90\u4ee3\u7801\u200b\u5e93\u4e2d\u9884\u200b\u6784\u5efa\u200b\u4e3b\u9898\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u8bf7\u200b\u770b\u200b\u8fd9\u91cc\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1aMonochrome theme \u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b \u200b\u6211\u4eec\u200b\u7684\u200b\u65b0\u200b\u4e3b\u9898\u200b\u7c7b\u200b\u5c06\u200b\u7ee7\u627f\u200b\u81ea\u200b <code>gradio.themes.Base</code>\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u8bb8\u591a\u200b\u65b9\u4fbf\u200b\u9ed8\u8ba4\u503c\u200b\u7684\u200b\u4e3b\u9898\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b Seafoam \u200b\u7684\u200b\u7b80\u5355\u200b\u6f14\u793a\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b\u5b83\u200b\u7684\u200b\u7b80\u5355\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002 $code_theme_new_step_1</p> <p>Base \u200b\u4e3b\u9898\u200b\u975e\u5e38\u200b\u7b80\u6d01\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>gr.themes.Blue</code> \u200b\u4f5c\u4e3a\u200b\u5176\u200b\u4e3b\u8981\u200b\u989c\u8272\u200b-\u200b\u7531\u4e8e\u200b\u6b64\u200b\u539f\u56e0\u200b\uff0c\u200b\u4e3b\u200b\u6309\u94ae\u200b\u548c\u200b\u52a0\u8f7d\u200b\u52a8\u753b\u200b\u90fd\u200b\u662f\u200b\u84dd\u8272\u200b\u7684\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6539\u53d8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u9ed8\u8ba4\u200b\u6838\u5fc3\u200b\u53c2\u6570\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u8986\u76d6\u200b\u6784\u9020\u51fd\u6570\u200b\u5e76\u200b\u4f20\u9012\u200b\u65b0\u200b\u7684\u200b\u9ed8\u8ba4\u503c\u200b\u7ed9\u200b\u6838\u5fc3\u200b\u6784\u9020\u200b\u51fd\u6570\u53c2\u6570\u200b\u3002 \u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>gr.themes.Emerald</code> \u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u7684\u200b\u4e3b\u8981\u200b\u989c\u8272\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u6b21\u8981\u200b\u548c\u200b\u4e2d\u6027\u200b\u8272\u8c03\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gr.themes.Blue</code>\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>text_lg</code> \u200b\u4f7f\u200b\u6587\u672c\u200b\u66f4\u5927\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b <code>Quicksand</code> \u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u7684\u200b\u9ed8\u8ba4\u200b\u5b57\u4f53\u200b\uff0c\u200b\u4ece\u200b Google Fonts \u200b\u52a0\u8f7d\u200b\u3002 $code_theme_new_step_2</p> <p>\u200b\u6ce8\u610f\u200b\u5230\u200b\u4e3b\u200b\u6309\u94ae\u200b\u548c\u200b\u52a0\u8f7d\u200b\u52a8\u753b\u200b\u73b0\u5728\u200b\u662f\u200b\u7eff\u8272\u200b\u7684\u200b\u4e86\u200b\u5417\u200b\uff1f\u200b\u8fd9\u4e9b\u200b CSS \u200b\u53d8\u91cf\u200b\u4e0e\u200b <code>primary_hue</code> \u200b\u76f8\u5173\u8054\u200b\u3002 \u200b\u6211\u4eec\u200b\u6765\u200b\u76f4\u63a5\u200b\u4fee\u6539\u200b\u4e3b\u9898\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u8c03\u7528\u200b <code>set()</code> \u200b\u65b9\u6cd5\u200b\u6765\u200b\u660e\u786e\u200b\u8986\u76d6\u200b CSS \u200b\u53d8\u91cf\u503c\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4efb\u4f55\u200b CSS \u200b\u903b\u8f91\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b<code>*</code> \u200b\u524d\u7f00\u200b\u5f15\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u6838\u5fc3\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\u3002</p> <p>$code_theme_new_step_3</p> <p>\u200b\u770b\u770b\u200b\u6211\u4eec\u200b\u7684\u200b\u4e3b\u9898\u200b\u73b0\u5728\u200b\u591a\u4e48\u200b\u6709\u8da3\u200b\uff01\u200b\u4ec5\u200b\u901a\u8fc7\u200b\u51e0\u4e2a\u200b\u53d8\u91cf\u200b\u7684\u200b\u66f4\u6539\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u4e3b\u9898\u200b\u5b8c\u5168\u200b\u6539\u53d8\u200b\u4e86\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u63a2\u7d22\u200b\u5176\u4ed6\u200b\u9884\u5efa\u200b\u4e3b\u9898\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u4f1a\u200b\u5f88\u200b\u6709\u200b\u5e2e\u52a9\u200b\uff0c\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u4ed6\u4eec\u200b\u5982\u4f55\u200b\u4fee\u6539\u200b\u57fa\u672c\u200b\u4e3b\u9898\u200b\u3002\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200b\u68c0\u67e5\u200b\u5de5\u5177\u200b\uff0c\u200b\u9009\u62e9\u200b UI \u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u5e76\u200b\u67e5\u770b\u200b\u5728\u200b\u6837\u5f0f\u200b\u9762\u677f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b CSS \u200b\u53d8\u91cf\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_8","title":"\u5206\u4eab\u200b\u4e3b\u9898","text":"<p>\u200b\u5728\u200b\u521b\u5efa\u200b\u4e3b\u9898\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u4e0a\u200b\u4f20\u5230\u200b HuggingFace Hub\uff0c\u200b\u8ba9\u200b\u5176\u4ed6\u4eba\u200b\u67e5\u770b\u200b\u3001\u200b\u4f7f\u7528\u200b\u548c\u200b\u6784\u5efa\u200b\u4e3b\u9898\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_9","title":"\u4e0a\u4f20\u200b\u4e3b\u9898","text":"<p>\u200b\u6709\u200b\u4e24\u79cd\u200b\u4e0a\u4f20\u200b\u4e3b\u9898\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e3b\u9898\u200b\u7c7b\u200b\u5b9e\u4f8b\u200b\u6216\u200b\u547d\u4ee4\u884c\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u521b\u5efa\u200b\u7684\u200b\u201cseafoam\u201d\u200b\u4e3b\u9898\u200b\u6765\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u3002</p> <ul> <li>\u200b\u901a\u8fc7\u200b\u7c7b\u200b\u5b9e\u4f8b\u200b</li> </ul> <p>\u200b\u6bcf\u4e2a\u200b\u4e3b\u9898\u200b\u5b9e\u4f8b\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b\u201cpush_to_hub\u201d\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5b83\u200b\u6765\u200b\u5c06\u200b\u4e3b\u9898\u200b\u4e0a\u200b\u4f20\u5230\u200b HuggingFace Hub\u3002</p> <pre><code>seafoam.push_to_hub(repo_name=\"seafoam\",\n                    version=\"0.0.1\",\n                    hf_token=\"&lt;token&gt;\")\n</code></pre> <ul> <li>\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b</li> </ul> <p>\u200b\u9996\u5148\u200b\u5c06\u200b\u4e3b\u9898\u200b\u4fdd\u5b58\u200b\u5230\u200b\u78c1\u76d8\u200b</p> <pre><code>seafoam.dump(filename=\"seafoam.json\")\n</code></pre> <p>\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b\u201cupload_theme\u201d\u200b\u547d\u4ee4\u200b\uff1a</p> <pre><code>upload_theme\\\n\"seafoam.json\"\\\n\"seafoam\"\\\n--version \"0.0.1\"\\\n--hf_token \"&lt;token&gt;\"\n</code></pre> <p>\u200b\u8981\u200b\u4e0a\u4f20\u200b\u4e3b\u9898\u200b\uff0c\u200b\u60a8\u200b\u5fc5\u987b\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b HuggingFace \u200b\u8d26\u6237\u200b\uff0c\u200b\u5e76\u200b\u901a\u8fc7\u200b <code>hf_token</code> \u200b\u53c2\u6570\u4f20\u9012\u200b\u60a8\u200b\u7684\u200b\u8bbf\u95ee\u200b\u4ee4\u724c\u200b\u3002 \u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u901a\u8fc7\u200bHuggingFace \u200b\u547d\u4ee4\u884c\u200b\u767b\u5f55\u200b\uff08\u200b\u4e0e\u200b <code>gradio</code> \u200b\u4e00\u8d77\u200b\u5b89\u88c5\u200b\uff09\uff0c \u200b\u90a3\u4e48\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7701\u7565\u200b <code>hf_token</code> \u200b\u53c2\u6570\u200b\u3002</p> <p><code>version</code> \u200b\u53c2\u6570\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4e3a\u200b\u4e3b\u9898\u200b\u6307\u5b9a\u200b\u4e00\u4e2a\u200b\u6709\u6548\u200b\u7684\u200b\u8bed\u4e49\u200b\u7248\u672c\u200b\u5b57\u7b26\u4e32\u200b\u3002 \u200b\u8fd9\u6837\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u7528\u6237\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4ed6\u4eec\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u4e3b\u9898\u200b\u7248\u672c\u200b\u3002\u200b\u8fd9\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u60a8\u200b\u53d1\u5e03\u200b\u4e3b\u9898\u200b\u66f4\u65b0\u200b\u800c\u200b\u4e0d\u5fc5\u200b\u62c5\u5fc3\u200b \u200b\u4ee5\u524d\u200b\u521b\u5efa\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u5916\u89c2\u200b\u5982\u4f55\u200b\u66f4\u6539\u200b\u3002<code>version</code> \u200b\u53c2\u6570\u200b\u662f\u200b\u53ef\u9009\u200b\u7684\u200b\u3002\u200b\u5982\u679c\u200b\u7701\u7565\u200b\uff0c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4fee\u8ba2\u200b\u7248\u672c\u200b\u5c06\u200b\u81ea\u52a8\u200b\u5e94\u7528\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_10","title":"\u4e3b\u9898\u200b\u9884\u89c8","text":"<p>\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b <code>push_to_hub</code> \u200b\u6216\u200b <code>upload_theme</code>\uff0c\u200b\u4e3b\u9898\u200b\u8d44\u6e90\u200b\u5c06\u200b\u5b58\u50a8\u200b\u5728\u200bHuggingFace \u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u7684\u200b seafoam \u200b\u4e3b\u9898\u200b\u7684\u200b\u9884\u89c8\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff1aseafoam \u200b\u9884\u89c8\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_11","title":"\u53d1\u73b0\u200b\u4e3b\u9898","text":"<p>\u200b\u4e3b\u9898\u200b\u5e93\u200b\u663e\u793a\u200b\u4e86\u200b\u6240\u6709\u200b\u516c\u5f00\u200b\u7684\u200b gradio \u200b\u4e3b\u9898\u200b\u3002\u200b\u5728\u200b\u53d1\u5e03\u200b\u4e3b\u9898\u200b\u4e4b\u540e\u200b\uff0c \u200b\u5b83\u200b\u5c06\u200b\u5728\u200b\u51e0\u5206\u949f\u200b\u540e\u200b\u81ea\u52a8\u200b\u663e\u793a\u200b\u5728\u200b\u4e3b\u9898\u200b\u5e93\u4e2d\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u7a7a\u95f4\u200b\u4e0a\u70b9\u200b\u8d5e\u200b\u7684\u200b\u6570\u91cf\u200b\u4ee5\u53ca\u200b\u6309\u200b\u521b\u5efa\u200b\u65f6\u95f4\u200b\u4ece\u200b\u6700\u8fd1\u200b\u5230\u200b\u6700\u8fd1\u200b\u5bf9\u200b\u4e3b\u9898\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d45\u8272\u200b\u548c\u200b\u6df1\u8272\u200b\u6a21\u5f0f\u200b\u4e4b\u95f4\u200b\u5207\u6362\u200b\u4e3b\u9898\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/theming-guide/#_12","title":"\u4e0b\u8f7d","text":"<p>\u200b\u8981\u200b\u4f7f\u7528\u200b Hub \u200b\u4e2d\u200b\u7684\u200b\u4e3b\u9898\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b <code>ThemeClass</code> \u200b\u4e0a\u200b\u4f7f\u7528\u200b <code>from_hub</code> \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u4f20\u9012\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff1a</p> <pre><code>my_theme = gr.Theme.from_hub(\"gradio/seafoam\")\n\nwith gr.Blocks(theme=my_theme) as demo:\n    ....\n</code></pre> <p>\u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u5c06\u200b\u4e3b\u9898\u200b\u5b57\u7b26\u4e32\u200b\u4f20\u9012\u200b\u7ed9\u200b <code>Blocks</code> \u200b\u6216\u200b <code>Interface</code>\uff08<code>gr.Blocks(theme=\"gradio/seafoam\")</code>\uff09</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u8bed\u4e49\u200b\u7248\u672c\u200b\u8868\u8fbe\u5f0f\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u56fa\u5b9a\u200b\u5230\u200b\u4e0a\u6e38\u200b\u4e3b\u9898\u200b\u7248\u672c\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u5c06\u200b\u786e\u4fdd\u200b\u6211\u4eec\u200b\u4ece\u200b\u201cseafoam\u201d\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u7684\u200b\u4e3b\u9898\u200b\u4f4d\u4e8e\u200b <code>0.0.1</code> \u200b\u548c\u200b <code>0.1.0</code> \u200b\u7248\u672c\u200b\u4e4b\u95f4\u200b\uff1a</p> <pre><code>with gr.Blocks(theme=\"gradio/seafoam@&gt;=0.0.1,&lt;0.1.0\") as demo:\n    ....\n</code></pre> <p>\u200b\u4eab\u53d7\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e3b\u9898\u200b\u5427\u200b\uff01\u200b\u5982\u679c\u200b\u60a8\u200b\u5236\u4f5c\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u81ea\u8c6a\u200b\u7684\u200b\u4e3b\u9898\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b\u5176\u200b\u4e0a\u200b\u4f20\u5230\u200b Hub \u200b\u4e0e\u200b\u4e16\u754c\u200b\u5206\u4eab\u200b\uff01 \u200b\u5982\u679c\u200b\u5728\u200bTwitter\u200b\u4e0a\u200b\u6807\u8bb0\u200b\u6211\u4eec\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u4e3b\u9898\u200b\u4e00\u4e2a\u200b\u5ba3\u4f20\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/using-flagging/","title":"\u4f7f\u7528\u200b\u6807\u8bb0","text":"<p>\u200b\u76f8\u5173\u200b\u7a7a\u95f4\u200b\uff1ahttps://huggingface.co/spaces/gradio/calculator-flagging-crowdsourced, https://huggingface.co/spaces/gradio/calculator-flagging-options, https://huggingface.co/spaces/gradio/calculator-flag-basic \u200b\u6807\u7b7e\u200b\uff1a\u200b\u6807\u8bb0\u200b\uff0c\u200b\u6570\u636e\u200b</p>"},{"location":"cn/07_other-tutorials/using-flagging/#_2","title":"\u7b80\u4ecb","text":"<p>\u200b\u5f53\u200b\u60a8\u200b\u6f14\u793a\u200b\u4e00\u4e2a\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u6536\u96c6\u200b\u8bd5\u7528\u200b\u6a21\u578b\u200b\u7684\u200b\u7528\u6237\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u6a21\u578b\u200b\u884c\u4e3a\u200b\u4e0d\u5982\u200b\u9884\u671f\u200b\u7684\u200b\u6570\u636e\u200b\u70b9\u200b\u3002\u200b\u6355\u83b7\u200b\u8fd9\u4e9b\u200b\u201c\u200b\u56f0\u96be\u200b\u201d\u200b\u6570\u636e\u200b\u70b9\u200b\u662f\u200b\u6709\u200b\u4ef7\u503c\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u5141\u8bb8\u200b\u60a8\u200b\u6539\u8fdb\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u5e76\u200b\u4f7f\u200b\u5176\u200b\u66f4\u200b\u53ef\u9760\u200b\u548c\u200b\u7a33\u5065\u200b\u3002</p> <p>Gradio \u200b\u901a\u8fc7\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u201c\u200b\u754c\u9762\u200b\u201d\u200b\u4e2d\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\u6765\u200b\u7b80\u5316\u200b\u8fd9\u4e9b\u200b\u6570\u636e\u200b\u7684\u200b\u6536\u96c6\u200b\u3002\u200b\u8fd9\u200b\u4f7f\u5f97\u200b\u7528\u6237\u200b\u6216\u200b\u6d4b\u8bd5\u4eba\u5458\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u5c06\u200b\u6570\u636e\u200b\u53d1\u9001\u200b\u56de\u200b\u8fd0\u884c\u200b\u6f14\u793a\u200b\u7684\u200b\u673a\u5668\u200b\u3002\u200b\u6837\u672c\u200b\u4f1a\u200b\u4fdd\u5b58\u200b\u5728\u200b\u4e00\u4e2a\u200b CSV \u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff09\u3002\u200b\u5982\u679c\u200b\u6f14\u793a\u200b\u6d89\u53ca\u200b\u56fe\u50cf\u200b\u3001\u200b\u97f3\u9891\u200b\u3001\u200b\u89c6\u9891\u200b\u6216\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5219\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u4f1a\u200b\u5355\u72ec\u200b\u4fdd\u5b58\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5e76\u884c\u200b\u76ee\u5f55\u200b\u4e2d\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u4f1a\u200b\u4fdd\u5b58\u200b\u5728\u200b CSV \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002</p>"},{"location":"cn/07_other-tutorials/using-flagging/#gradiointerface","title":"\u5728\u200b <code>gradio.Interface</code> \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u6807\u8bb0\u200b\u6309\u94ae","text":"<p>\u200b\u4f7f\u7528\u200b Gradio \u200b\u7684\u200b <code>Interface</code> \u200b\u8fdb\u884c\u200b\u6807\u8bb0\u200b\u7279\u522b\u200b\u7b80\u5355\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5728\u200b\u8f93\u51fa\u200b\u7ec4\u4ef6\u200b\u4e0b\u65b9\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u6807\u8bb0\u200b\u7684\u200b\u6309\u94ae\u200b\u3002\u200b\u5f53\u200b\u7528\u6237\u200b\u6d4b\u8bd5\u200b\u60a8\u200b\u7684\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u770b\u5230\u200b\u6709\u8da3\u200b\u7684\u200b\u8f93\u51fa\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u53ef\u4ee5\u200b\u70b9\u51fb\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\u5c06\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u6570\u636e\u200b\u53d1\u9001\u200b\u56de\u200b\u8fd0\u884c\u200b\u6f14\u793a\u200b\u7684\u200b\u673a\u5668\u200b\u3002\u200b\u6837\u672c\u200b\u4f1a\u200b\u4fdd\u5b58\u200b\u5728\u200b\u4e00\u4e2a\u200b CSV \u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff09\u3002\u200b\u5982\u679c\u200b\u6f14\u793a\u200b\u6d89\u53ca\u200b\u56fe\u50cf\u200b\u3001\u200b\u97f3\u9891\u200b\u3001\u200b\u89c6\u9891\u200b\u6216\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5219\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u4f1a\u200b\u5355\u72ec\u200b\u4fdd\u5b58\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5e76\u884c\u200b\u76ee\u5f55\u200b\u4e2d\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b\u4f1a\u200b\u4fdd\u5b58\u200b\u5728\u200b CSV \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5728\u200b <code>gradio.Interface</code> \u200b\u4e2d\u6709\u200b\u56db\u4e2a\u200b\u53c2\u6570\u200b\u63a7\u5236\u200b\u6807\u8bb0\u200b\u7684\u200b\u5de5\u4f5c\u200b\u65b9\u5f0f\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200b\u5b83\u4eec\u200b\u3002</p> <ul> <li><code>allow_flagging</code>\uff1a\u200b\u6b64\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>\"manual\"</code>\uff08\u200b\u9ed8\u8ba4\u503c\u200b\uff09\uff0c<code>\"auto\"</code> \u200b\u6216\u200b <code>\"never\"</code>\u3002</li> <li><code>manual</code>\uff1a\u200b\u7528\u6237\u200b\u5c06\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\uff0c\u200b\u53ea\u6709\u200b\u5728\u200b\u70b9\u51fb\u200b\u6309\u94ae\u200b\u65f6\u200b\u6837\u672c\u200b\u624d\u200b\u4f1a\u200b\u88ab\u200b\u6807\u8bb0\u200b\u3002</li> <li><code>auto</code>\uff1a\u200b\u7528\u6237\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\uff0c\u200b\u4f46\u200b\u6bcf\u4e2a\u200b\u6837\u672c\u200b\u90fd\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u88ab\u200b\u6807\u8bb0\u200b\u3002</li> <li><code>never</code>\uff1a\u200b\u7528\u6237\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e0d\u4f1a\u200b\u6807\u8bb0\u200b\u4efb\u4f55\u200b\u6837\u672c\u200b\u3002</li> <li><code>flagging_options</code>\uff1a\u200b\u6b64\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u662f\u200b <code>None</code>\uff08\u200b\u9ed8\u8ba4\u503c\u200b\uff09\u200b\u6216\u200b\u5b57\u7b26\u4e32\u200b\u5217\u8868\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b\u662f\u200b <code>None</code>\uff0c\u200b\u5219\u200b\u7528\u6237\u200b\u53ea\u200b\u9700\u200b\u70b9\u51fb\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u663e\u793a\u200b\u5176\u4ed6\u200b\u9009\u9879\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u5217\u8868\u200b\uff0c\u200b\u5219\u200b\u7528\u6237\u200b\u4f1a\u200b\u770b\u5230\u200b\u591a\u4e2a\u200b\u6309\u94ae\u200b\uff0c\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u6b64\u53c2\u6570\u200b\u7684\u200b\u503c\u200b\u4e3a\u200b<code>[\" \u200b\u9519\u8bef\u200b \", \" \u200b\u6a21\u7cca\u200b \"]</code>\uff0c\u200b\u5219\u200b\u4f1a\u200b\u663e\u793a\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u9519\u8bef\u200b\u548c\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u6a21\u7cca\u200b\u7684\u200b\u6309\u94ae\u200b\u3002\u200b\u8fd9\u4ec5\u200b\u9002\u7528\u200b\u4e8e\u200b <code>allow_flagging</code> \u200b\u4e3a\u200b <code>\"manual\"</code> \u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</li> <li>\u200b\u6240\u200b\u9009\u200b\u9009\u9879\u200b\u5c06\u200b\u4e0e\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u4e00\u8d77\u200b\u8bb0\u5f55\u200b\u3002</li> <li><code>flagging_dir</code>\uff1a\u200b\u6b64\u53c2\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u3002</li> <li>\u200b\u5b83\u200b\u8868\u793a\u200b\u6807\u8bb0\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u7684\u200b\u76ee\u5f55\u200b\u540d\u79f0\u200b\u3002</li> <li><code>flagging_callback</code>\uff1a\u200b\u6b64\u53c2\u6570\u200b\u63a5\u53d7\u200b <code>FlaggingCallback</code> \u200b\u7c7b\u200b\u7684\u200b\u5b50\u7c7b\u200b\u7684\u200b\u5b9e\u4f8b\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u6b64\u53c2\u6570\u200b\u5141\u8bb8\u200b\u60a8\u200b\u7f16\u5199\u200b\u5728\u200b\u70b9\u51fb\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\u65f6\u200b\u8fd0\u884c\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u4ee3\u7801\u200b</li> <li>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5b83\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gr.CSVLogger</code> \u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b9e\u4f8b\u200b</li> <li>\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\u662f\u200b\u5c06\u200b\u5176\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b <code>gr.HuggingFaceDatasetSaver</code> \u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u8fd9\u6837\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u4f55\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u5bfc\u5165\u5230\u200b HuggingFace \u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\uff08\u200b\u53c2\u89c1\u200b\u4e0b\u6587\u200b\uff09\u3002</li> </ul>"},{"location":"cn/07_other-tutorials/using-flagging/#_3","title":"\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u4f1a\u200b\u53d1\u751f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u5728\u200b <code>flagging_dir</code> \u200b\u53c2\u6570\u200b\u63d0\u4f9b\u200b\u7684\u200b\u76ee\u5f55\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b\u8bb0\u5f55\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u7684\u200b CSV \u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u793a\u4f8b\u200b\uff1a\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u521b\u5efa\u200b\u4e86\u200b\u5d4c\u5165\u200b\u5176\u4e2d\u200b\u7684\u200b\u8ba1\u7b97\u5668\u200b\u754c\u9762\u200b\uff1a</p> <pre><code>import gradio as gr\n\n\ndef calculator(num1, operation, num2):\n    if operation == \"add\":\n        return num1 + num2\n    elif operation == \"subtract\":\n        return num1 - num2\n    elif operation == \"multiply\":\n        return num1 * num2\n    elif operation == \"divide\":\n        return num1 / num2\n\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\"\n)\n\niface.launch()\n</code></pre> <p></p> <p>\u200b\u5f53\u200b\u60a8\u200b\u70b9\u51fb\u200b\u4e0a\u9762\u200b\u7684\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\u65f6\u200b\uff0c\u200b\u542f\u52a8\u200b\u754c\u9762\u200b\u7684\u200b\u76ee\u5f55\u200b\u5c06\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6807\u8bb0\u200b\u5b50\u200b\u6587\u4ef6\u5939\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b CSV \u200b\u6587\u4ef6\u200b\u3002\u200b\u8be5\u200b CSV \u200b\u6587\u4ef6\u200b\u5305\u62ec\u200b\u6240\u6709\u200b\u88ab\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u3002</p> <pre><code>+-- flagged/\n|   +-- logs.csv\n</code></pre> <p>flagged/logs.csv</p> <pre><code>num1,operation,num2,Output,timestamp\n5,add,7,12,2022-01-31 11:40:51.093412\n6,subtract,1.5,4.5,2022-01-31 03:25:32.023542\n</code></pre> <p>\u200b\u5982\u679c\u200b\u754c\u9762\u200b\u6d89\u53ca\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u56fe\u50cf\u200b\u548c\u200b\u97f3\u9891\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u8fd8\u200b\u5c06\u200b\u521b\u5efa\u200b\u6587\u4ef6\u5939\u200b\u6765\u200b\u5b58\u50a8\u200b\u8fd9\u4e9b\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5c06\u200b <code>image</code> \u200b\u8f93\u5165\u200b\u5230\u200b <code>image</code> \u200b\u8f93\u51fa\u200b\u754c\u9762\u200b\u5c06\u200b\u521b\u5efa\u200b\u4ee5\u4e0b\u200b\u7ed3\u6784\u200b\u3002</p> <pre><code>+-- flagged/\n|   +-- logs.csv\n|   +-- image/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n</code></pre> <p>flagged/logs.csv</p> <pre><code>im,Output timestamp\nim/0.png,Output/0.png,2022-02-04 19:49:58.026963\nim/1.png,Output/1.png,2022-02-02 10:40:51.093412\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u7528\u6237\u200b\u4e3a\u200b\u6807\u8bb0\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u539f\u56e0\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5b57\u7b26\u4e32\u200b\u5217\u8868\u200b\u4f20\u9012\u200b\u7ed9\u200b Interface \u200b\u7684\u200b <code>flagging_options</code> \u200b\u53c2\u6570\u200b\u3002\u200b\u7528\u6237\u200b\u5728\u200b\u6807\u8bb0\u200b\u65f6\u200b\u5fc5\u987b\u200b\u9009\u62e9\u200b\u5176\u4e2d\u200b\u4e00\u9879\u200b\uff0c\u200b\u9009\u9879\u200b\u5c06\u200b\u4f5c\u4e3a\u200b\u9644\u52a0\u200b\u5217\u200b\u4fdd\u5b58\u200b\u5728\u200b CSV \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u56de\u5230\u200b\u8ba1\u7b97\u5668\u200b\u793a\u4f8b\u200b\uff0c\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u5c06\u200b\u521b\u5efa\u200b\u5d4c\u5165\u200b\u5176\u4e2d\u200b\u7684\u200b\u754c\u9762\u200b\u3002</p> <pre><code>iface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"]\n)\n\niface.launch()\n</code></pre> <p></p> <p>\u200b\u5f53\u200b\u7528\u6237\u200b\u70b9\u51fb\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\u65f6\u200b\uff0cCSV \u200b\u6587\u4ef6\u200b\u73b0\u5728\u200b\u5c06\u200b\u5305\u62ec\u200b\u6307\u793a\u200b\u6240\u200b\u9009\u200b\u9009\u9879\u200b\u7684\u200b\u5217\u200b\u3002</p> <p>flagged/logs.csv</p> <pre><code>num1,operation,num2,Output,flag,timestamp\n5,add,7,-12,wrong sign,2022-02-04 11:40:51.093412\n6,subtract,1.5,3.5,off by one,2022-02-04 11:42:32.062512\n</code></pre>"},{"location":"cn/07_other-tutorials/using-flagging/#huggingfacedatasetsaver","title":"HuggingFaceDatasetSaver \u200b\u56de\u8c03","text":"<p>\u200b\u6709\u65f6\u200b\uff0c\u200b\u5c06\u200b\u6570\u636e\u200b\u4fdd\u5b58\u200b\u5230\u200b\u672c\u5730\u200b CSV \u200b\u6587\u4ef6\u200b\u662f\u200b\u4e0d\u5408\u7406\u200b\u7684\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e0a\u200b \uff0c\u200b\u5f00\u53d1\u8005\u200b\u901a\u5e38\u200b\u65e0\u6cd5\u8bbf\u95ee\u200b\u6258\u7ba1\u200b Gradio \u200b\u6f14\u793a\u200b\u7684\u200b\u5e95\u5c42\u200b\u4e34\u65f6\u200b\u673a\u5668\u200b\u3002\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5728\u200b Hugging Face Space \u200b\u4e2d\u200b\u5173\u95ed\u200b\u6807\u8bb0\u200b\u7684\u200b\u539f\u56e0\u200b\u3002\u200b\u7136\u800c\u200b\uff0c \u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u5bf9\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u505a\u200b\u5176\u4ed6\u200b\u5904\u7406\u200b\u3002 you may want to do something else with the flagged data.</p> <p>\u200b\u901a\u8fc7\u200b <code>flagging_callback</code> \u200b\u53c2\u6570\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u200b\u8fd9\u200b\u53d8\u5f97\u200b\u975e\u5e38\u7b80\u5355\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e0b\u9762\u200b\u6211\u4eec\u200b\u5c06\u4f1a\u200b\u5c06\u200b\u6807\u8bb0\u200b\u7684\u200b\u6570\u636e\u200b\u4ece\u200b\u6211\u4eec\u200b\u7684\u200b\u8ba1\u7b97\u5668\u200b\u793a\u4f8b\u200b\u5bfc\u5165\u5230\u200b Hugging Face \u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u201c\u200b\u4f17\u5305\u200b\u201d\u200b\u6570\u636e\u200b\u96c6\u200b\uff1a</p> <pre><code>import os\n\nHF_TOKEN = os.getenv('HF_TOKEN')\nhf_writer = gr.HuggingFaceDatasetSaver(HF_TOKEN, \"crowdsourced-calculator-demo\")\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    description=\"Check out the crowd-sourced dataset at: [https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo](https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo)\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"],\n    flagging_callback=hf_writer\n)\n\niface.launch()\n</code></pre> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b Hugging Face \u200b\u4ee4\u724c\u200b\u548c\u200b \u200b\u8981\u200b\u4fdd\u5b58\u200b\u6837\u672c\u200b\u7684\u200b\u6570\u636e\u200b\u96c6\u200b\u7684\u200b\u540d\u79f0\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u6211\u4eec\u200b\u81ea\u5df1\u200b\u7684\u200b <code>gradio.HuggingFaceDatasetSaver</code> \u200b\u7684\u200b\u5b9e\u4f8b\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b <code>allow_flagging=\"manual\"</code> \u200b\u8bbe\u7f6e\u200b\u4e3a\u4e86\u200b \uff0c\u200b\u56e0\u4e3a\u200b\u5728\u200b Hugging Face Spaces \u200b\u4e2d\u200b\uff0c<code>allow_flagging</code> \u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b\u4e3a\u200b <code>\"never\"</code>\u3002\u200b\u8fd9\u662f\u200b\u6211\u4eec\u200b\u7684\u200b\u6f14\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u60a8\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u516c\u5171\u200b\u7684\u200b Hugging Face \u200b\u6570\u636e\u200b\u96c6\u4e2d\u200b\u770b\u5230\u200b\u4e0a\u9762\u200b\u6807\u8bb0\u200b\u7684\u200b\u6240\u6709\u200b\u793a\u4f8b\u200b\u3002</p> <p></p> <p>\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u4e86\u200b <code>gradio.HuggingFaceDatasetSaver</code> \u200b\u7c7b\u200b\uff0c\u200b\u4f46\u200b\u53ea\u8981\u200b\u5b83\u200b\u7ee7\u627f\u200b\u81ea\u6b64\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b <code>FlaggingCallback</code>\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u81ea\u5df1\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u7c7b\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5f88\u68d2\u200b\u7684\u200b\u56de\u8c03\u200b\uff0c\u200b\u8bf7\u200b\u5c06\u200b\u5176\u200b\u8d21\u732e\u200b\u7ed9\u200b\u8be5\u200b\u5b58\u50a8\u200b\u5e93\u200b\uff01</p>"},{"location":"cn/07_other-tutorials/using-flagging/#blocks","title":"\u4f7f\u7528\u200b Blocks \u200b\u8fdb\u884c\u200b\u6807\u8bb0","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b <code>gradio.Blocks</code>\uff0c\u200b\u53c8\u200b\u8be5\u200b\u600e\u4e48\u529e\u200b\u5462\u200b\uff1f\u200b\u4e00\u65b9\u9762\u200b\uff0c\u200b\u4f7f\u7528\u200b Blocks \u200b\u60a8\u200b\u62e5\u6709\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u7075\u6d3b\u6027\u200b --\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u4efb\u4f55\u200b\u60a8\u200b\u60f3\u200b\u5728\u200b\u6309\u94ae\u200b\u88ab\u200b\u70b9\u51fb\u200b\u65f6\u200b\u8fd0\u884c\u200b\u7684\u200b Python \u200b\u4ee3\u7801\u200b\uff0c \u200b\u5e76\u200b\u4f7f\u7528\u200b Blocks \u200b\u4e2d\u200b\u7684\u200b\u5185\u7f6e\u200b\u4e8b\u4ef6\u200b\u5206\u914d\u200b\u5b83\u200b\u3002</p> <p>\u200b\u540c\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u4f7f\u7528\u200b\u73b0\u6709\u200b\u7684\u200b <code>FlaggingCallback</code> \u200b\u6765\u200b\u907f\u514d\u200b\u7f16\u5199\u200b\u989d\u5916\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002 \u200b\u8fd9\u200b\u9700\u8981\u200b\u4e24\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a</p> <ol> <li>\u200b\u60a8\u200b\u5fc5\u987b\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e2a\u200b\u4f4d\u7f6e\u200b\u8fd0\u884c\u200b\u60a8\u200b\u7684\u200b\u56de\u8c03\u200b\u7684\u200b <code>.setup()</code> \u200b\u65b9\u6cd5\u200b    \u200b\u5728\u200b\u7b2c\u4e00\u6b21\u200b\u6807\u8bb0\u200b\u6570\u636e\u200b\u4e4b\u524d\u200b</li> <li>\u200b\u5f53\u200b\u70b9\u51fb\u200b\u6807\u8bb0\u200b\u6309\u94ae\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u89e6\u53d1\u200b\u56de\u8c03\u200b\u7684\u200b <code>.flag()</code> \u200b\u65b9\u6cd5\u200b\uff0c    \u200b\u786e\u4fdd\u200b\u6b63\u786e\u200b\u6536\u96c6\u200b\u53c2\u6570\u200b\u5e76\u200b\u7981\u7528\u200b\u901a\u5e38\u200b\u7684\u200b\u9884\u5904\u7406\u200b\u3002</li> </ol> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b\u9ed8\u8ba4\u200b\u7684\u200b <code>CSVLogger</code> \u200b\u6807\u8bb0\u200b\u56fe\u50cf\u200b\u6000\u65e7\u200b\u6ee4\u955c\u200b Blocks \u200b\u6f14\u793a\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a data using the default <code>CSVLogger</code>:</p> <p>$code_blocks_flag $demo_blocks_flag</p>"},{"location":"cn/07_other-tutorials/using-flagging/#_4","title":"\u9690\u79c1","text":"<p>\u200b\u91cd\u8981\u200b\u63d0\u793a\u200b\uff1a\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u7528\u6237\u200b\u4e86\u89e3\u200b\u4ed6\u4eec\u200b\u63d0\u4ea4\u200b\u7684\u200b\u6570\u636e\u200b\u4f55\u65f6\u200b\u88ab\u200b\u4fdd\u5b58\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u8ba1\u5212\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u5b83\u200b\u3002\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200b <code>allow_flagging=auto</code>\uff08\u200b\u5f53\u200b\u901a\u8fc7\u200b\u6f14\u793a\u200b\u63d0\u4ea4\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u90fd\u200b\u88ab\u200b\u6807\u8bb0\u200b\u65f6\u200b\uff09\uff0c\u200b\u8fd9\u200b\u4e00\u70b9\u200b\u5c24\u4e3a\u91cd\u8981\u200b</p>"},{"location":"cn/07_other-tutorials/using-flagging/#_5","title":"\u8fd9\u200b\u5c31\u662f\u200b\u5168\u90e8\u200b\uff01\u200b\u795d\u60a8\u200b\u5efa\u8bbe\u200b\u6109\u5feb\u200b :)","text":""}]}